[gd_scene load_steps=708 format=3 uid="uid://c0y4dh3a6qrur"]

[ext_resource type="Texture2D" uid="uid://dukgbairam5vc" path="res://addons/shaderV/shaderV_icon.png" id="1"]
[ext_resource type="Script" path="res://addons/shaderV/uv/tilingNoffset.gd" id="2"]
[ext_resource type="Script" path="res://addons/shaderV/uv/pixelate.gd" id="3"]
[ext_resource type="Script" path="res://addons/shaderV/uv/lensDistortion.gd" id="4"]
[ext_resource type="Script" path="res://addons/shaderV/uv/flipUV.gd" id="5"]
[ext_resource type="Script" path="res://addons/shaderV/uv/distortionUV.gd" id="6"]
[ext_resource type="Script" path="res://addons/shaderV/uv/scaleUV.gd" id="7"]
[ext_resource type="Script" path="res://addons/shaderV/uv/sphericalUV.gd" id="8"]
[ext_resource type="Script" path="res://addons/shaderV/uv/rotate.gd" id="9"]
[ext_resource type="Script" path="res://addons/shaderV/uv/tileUV.gd" id="10"]
[ext_resource type="Script" path="res://addons/shaderV/uv/transformUV.gd" id="11"]
[ext_resource type="Script" path="res://addons/shaderV/uv/twirl.gd" id="12"]
[ext_resource type="Script" path="res://addons/shaderV/uv/animated/distortionUVAnimated.gd" id="13"]
[ext_resource type="Script" path="res://addons/shaderV/uv/animated/doodleUV.gd" id="14"]
[ext_resource type="Script" path="res://addons/shaderV/uv/animated/tilingNoffsetAnimated.gd" id="15"]
[ext_resource type="Script" path="res://addons/shaderV/tools/sinTime.gd" id="16"]
[ext_resource type="Script" path="res://addons/shaderV/uv/animated/rotateAnimated.gd" id="17"]
[ext_resource type="Script" path="res://addons/shaderV/tools/random/hash1d.gd" id="18"]
[ext_resource type="Script" path="res://addons/shaderV/uv/animated/swirlUV.gd" id="19"]
[ext_resource type="Script" path="res://addons/shaderV/tools/random/hash2d.gd" id="20"]
[ext_resource type="Script" path="res://addons/shaderV/tools/random/hash2dvector.gd" id="21"]
[ext_resource type="Script" path="res://addons/shaderV/tools/random/randomFloat.gd" id="22"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/BCSAdjustment.gd" id="23"]
[ext_resource type="Script" path="res://addons/shaderV/tools/random/randomGoldNoiseFloat.gd" id="24"]
[ext_resource type="Script" path="res://addons/shaderV/tools/vec2Compose.gd" id="25"]
[ext_resource type="Script" path="res://addons/shaderV/tools/remap.gd" id="26"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/blur/blur9sample.gd" id="27"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/blur/blurCustom.gd" id="28"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/blur/zoomBlur.gd" id="29"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/glow/innerGlow.gd" id="30"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/glow/glowEmpty.gd" id="31"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/glow/innerGlowEmpty.gd" id="32"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/glow/outerGlow.gd" id="33"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/glow/outerGlowEmpty.gd" id="34"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/generate_shapes/chekerboardPattern.gd" id="35"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/generate_shapes/generateCircle2.gd" id="36"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/generate_shapes/generateCircle.gd" id="37"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/generate_shapes/generateRegularNgon.gd" id="39"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/generate_shapes/generateSpiral.gd" id="40"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/generate_shapes/scanLinesSharp.gd" id="41"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/generate_shapes/stripesRandom.gd" id="42"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/generic2d.gd" id="43"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/perlin2d.gd" id="44"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/perlin3d.gd" id="45"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/perlinPeriodic3d.gd" id="46"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/perlin4d.gd" id="47"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/simplex2d.gd" id="48"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/simplex3d.gd" id="49"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/simplex4d.gd" id="50"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/worley2d.gd" id="51"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/worley2x2.gd" id="52"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/worley2x2x2.gd" id="53"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/worley3d.gd" id="54"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/blackNwhite.gd" id="56"]
[ext_resource type="Texture2D" uid="uid://ds4rnuhypjs8a" path="res://addons/shaderV/examples/godot_logo.png" id="57"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/blendAwithB.gd" id="58"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/bloom.gd" id="59"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/chromaticAberration.gd" id="60"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/clamp.gd" id="61"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/colorCorrectionAdjustment.gd" id="62"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/emboss.gd" id="63"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/fireFX.gd" id="64"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/gradient4corners.gd" id="65"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/gradientMapping.gd" id="66"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/grayscale.gd" id="67"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/hue.gd" id="68"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/inverseColor.gd" id="69"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/maskAlpha.gd" id="70"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/posterize.gd" id="71"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/shiftHSV.gd" id="72"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/shineFX.gd" id="73"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/tintRGBA.gd" id="74"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/tonemap.gd" id="75"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/turnCGA4Palette.gd" id="76"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/turnGBPalette.gd" id="77"]
[ext_resource type="Script" path="res://addons/shaderV/tools/TimeScaled.gd" id="78"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/fractal/generic2d_fractal.gd" id="79"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/fractal/perlin2d_fractal.gd" id="80"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/fractal/worley2d_fractal.gd" id="81"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/fractal/simplex2d_fractal.gd" id="82"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/fractal/worley3d_fractal.gd" id="83"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/fractal/perlin3d_fractal.gd" id="84"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/fractal/simplex3d_fractal.gd" id="85"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/fractal/perlin4d_fractal.gd" id="86"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/fractal/simplex4d_fractal.gd" id="87"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/normalFromHeightmap.gd" id="88"]
[ext_resource type="Script" path="res://addons/shaderV/tools/transformCoordinates/cartesianToPolar.gd" id="89"]
[ext_resource type="Script" path="res://addons/shaderV/tools/transformCoordinates/sphericalToCartesian.gd" id="90"]
[ext_resource type="Script" path="res://addons/shaderV/tools/transformCoordinates/cartesianToSpherical.gd" id="91"]
[ext_resource type="Script" path="res://addons/shaderV/tools/transformCoordinates/polarToCartesian.gd" id="92"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/generate_shapes/gridShape.gd" id="93"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/sobelEdge.gd" id="94"]

[sub_resource type="VisualShaderNodeCustom" id="1"]
default_input_values = [1, 0, 2, 0, 3, 0, 4, 0]
initialized = true
script = ExtResource("6")

[sub_resource type="VisualShaderNodeInput" id="2"]
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id="3"]
expanded_output_ports = [0]
source = 2

[sub_resource type="VisualShaderNodeFloatConstant" id="4"]
constant = 7.0

[sub_resource type="VisualShaderNodeFloatConstant" id="5"]
constant = 0.1

[sub_resource type="VisualShaderNodeFloatConstant" id="6"]
constant = 5.0

[sub_resource type="VisualShader" id="7"]
code = "shader_type canvas_item;
render_mode blend_mix;



// DistortionUV
vec2 _distortionUV(vec2 _distortion_uv, vec2 _distortion_vect, vec2 _distortion_wave_vect) {
	_distortion_uv.x += sin(_distortion_uv.y * _distortion_wave_vect.x) * _distortion_vect.x;
	_distortion_uv.y += sin(_distortion_uv.x * _distortion_wave_vect.y) * _distortion_vect.y;
	return _distortion_uv;
}

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:5
	float n_out5p0 = 7.000000;


// FloatConstant:7
	float n_out7p0 = 5.000000;


// FloatConstant:6
	float n_out6p0 = 0.100000;


	vec3 n_out2p0;
// DistortionUV:2
	{
		n_out2p0.xy = _distortionUV(vec3(n_out3p0, 0.0).xy, vec2(n_out6p0, n_out6p0), vec2(n_out5p0, n_out7p0));
	}


	vec4 n_out4p0;
// Texture2D:4
	n_out4p0 = texture(TEXTURE, vec2(n_out2p0.xy));
	float n_out4p4 = n_out4p0.a;


// Output:0
	COLOR.rgb = vec3(n_out4p0.xyz);
	COLOR.a = n_out4p4;


}
"
graph_offset = Vector2(-27.0226, 88.4635)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(500, 80)
nodes/fragment/2/node = SubResource("1")
nodes/fragment/2/position = Vector2(60, 80)
nodes/fragment/3/node = SubResource("2")
nodes/fragment/3/position = Vector2(-320, 80)
nodes/fragment/4/node = SubResource("3")
nodes/fragment/4/position = Vector2(240, 60)
nodes/fragment/5/node = SubResource("4")
nodes/fragment/5/position = Vector2(-180, 160)
nodes/fragment/6/node = SubResource("5")
nodes/fragment/6/position = Vector2(-180, 280)
nodes/fragment/7/node = SubResource("6")
nodes/fragment/7/position = Vector2(-180, 220)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 0, 4, 0, 0, 0, 5, 0, 2, 1, 6, 0, 2, 3, 7, 0, 2, 2, 6, 0, 2, 4, 2, 0, 4, 0, 4, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="8"]
shader = SubResource("7")

[sub_resource type="VisualShaderNodeInput" id="9"]
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id="10"]
expanded_output_ports = [0]
texture = ExtResource("1")

[sub_resource type="VisualShaderNodeCustom" id="11"]
default_input_values = [1, false, 2, false]
initialized = true
script = ExtResource("5")

[sub_resource type="VisualShaderNodeBooleanConstant" id="12"]
constant = true

[sub_resource type="VisualShaderNodeBooleanConstant" id="13"]
constant = true

[sub_resource type="VisualShader" id="14"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_5;


// FlipUV
vec2 _flipUV(vec2 _flip_uv, vec2 _flip_vect) {
	_flip_uv.x = mix(_flip_uv.x, 1.0 - _flip_uv.x, _flip_vect.x);
	_flip_uv.y = mix(_flip_uv.y, 1.0 - _flip_uv.y, _flip_vect.y);
	return _flip_uv;
}

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// BooleanConstant:8
	bool n_out8p0 = true;


// BooleanConstant:9
	bool n_out9p0 = true;


	vec3 n_out7p0;
// FlipUV:7
	{
		n_out7p0.xy = _flipUV(vec3(n_out3p0, 0.0).xy, vec2(float(n_out8p0), float(n_out9p0)));
	}


// Texture2D:5
	vec4 n_out5p0 = texture(tex_frg_5, vec2(n_out7p0.xy));
	float n_out5p4 = n_out5p0.a;


// Output:0
	COLOR.rgb = vec3(n_out5p0.xyz);
	COLOR.a = n_out5p4;


}
"
graph_offset = Vector2(-46.685, -122.596)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(500, -20)
nodes/fragment/3/node = SubResource("9")
nodes/fragment/3/position = Vector2(-260, -40)
nodes/fragment/5/node = SubResource("10")
nodes/fragment/5/position = Vector2(240, -40)
nodes/fragment/7/node = SubResource("11")
nodes/fragment/7/position = Vector2(80, -20)
nodes/fragment/8/node = SubResource("12")
nodes/fragment/8/position = Vector2(-120, 40)
nodes/fragment/9/node = SubResource("13")
nodes/fragment/9/position = Vector2(-120, 120)
nodes/fragment/connections = PackedInt32Array(5, 0, 0, 0, 3, 0, 7, 0, 8, 0, 7, 1, 9, 0, 7, 2, 7, 0, 5, 0, 5, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="15"]
shader = SubResource("14")

[sub_resource type="VisualShaderNodeCustom" id="16"]
default_input_values = [1, 1.0]
initialized = true
script = ExtResource("4")

[sub_resource type="VisualShaderNodeFloatConstant" id="17"]
constant = 1.3

[sub_resource type="VisualShader" id="18"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_5;


// LensDistortionUV
vec2 _lensDistortionUV(vec2 _lens_uv, float _lens_factor){
	vec2 _pos_dist_lens = _lens_uv - 0.5;
	float _d1st_d1s_1en5 = length(_pos_dist_lens);
	if (_lens_factor > 0.0) // fisheye / barrel
		_lens_uv = vec2(0.5)+normalize(_pos_dist_lens)*tan(_d1st_d1s_1en5*_lens_factor)*0.70711/tan(0.70711*_lens_factor);
	else if (_lens_factor < 0.0) // antifisheye / pincushion
		_lens_uv = vec2(0.5)+normalize(_pos_dist_lens)*atan(_d1st_d1s_1en5*-_lens_factor*10.0)*0.5/atan(-_lens_factor*0.5*10.0);
	return _lens_uv;
}

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:8
	float n_out8p0 = 1.300000;


	vec3 n_out7p0;
// LensDistortionUV:7
	{
		n_out7p0.xy = _lensDistortionUV(vec3(n_out3p0, 0.0).xy, n_out8p0);
	}


// Texture2D:5
	vec4 n_out5p0 = texture(tex_frg_5, vec2(n_out7p0.xy));
	float n_out5p4 = n_out5p0.a;


// Output:0
	COLOR.rgb = vec3(n_out5p0.xyz);
	COLOR.a = n_out5p4;


}
"
graph_offset = Vector2(26, -66)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(700, 40)
nodes/fragment/3/node = SubResource("9")
nodes/fragment/3/position = Vector2(-140, 0)
nodes/fragment/5/node = SubResource("10")
nodes/fragment/5/position = Vector2(440, 20)
nodes/fragment/7/node = SubResource("16")
nodes/fragment/7/position = Vector2(200, 40)
nodes/fragment/8/node = SubResource("17")
nodes/fragment/8/position = Vector2(0, 80)
nodes/fragment/connections = PackedInt32Array(5, 0, 0, 0, 3, 0, 7, 0, 8, 0, 7, 1, 7, 0, 5, 0, 5, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="19"]
shader = SubResource("18")

[sub_resource type="VisualShaderNodeCustom" id="20"]
default_input_values = [1, Vector3(64, 64, 0)]
initialized = true
script = ExtResource("3")

[sub_resource type="VisualShaderNodeVec3Constant" id="21"]
constant = Vector3(16, 16, 0)

[sub_resource type="VisualShaderNodeFloatConstant" id="22"]

[sub_resource type="VisualShader" id="23"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_5;


// PixelateUV
vec2 _pixelateUV(vec2 _pixelate_uv, vec2 _effect_factor_pixelate) {
	return round(_pixelate_uv * _effect_factor_pixelate) / (_effect_factor_pixelate - 1.0);
}

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// Vector3Constant:8
	vec3 n_out8p0 = vec3(16.000000, 16.000000, 0.000000);


	vec3 n_out7p0;
// PixelateUV:7
	{
		n_out7p0.xy = _pixelateUV(vec3(n_out3p0, 0.0).xy, n_out8p0.xy);
	}


// FloatConstant:9
	float n_out9p0 = 0.000000;


// Texture2D:5
	vec4 n_out5p0 = textureLod(tex_frg_5, vec2(n_out7p0.xy), n_out9p0);
	float n_out5p4 = n_out5p0.a;


// Output:0
	COLOR.rgb = vec3(n_out5p0.xyz);
	COLOR.a = n_out5p4;


}
"
graph_offset = Vector2(-56.7934, -122.455)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(640, 20)
nodes/fragment/3/node = SubResource("9")
nodes/fragment/3/position = Vector2(-240, -60)
nodes/fragment/5/node = SubResource("10")
nodes/fragment/5/position = Vector2(340, -20)
nodes/fragment/7/node = SubResource("20")
nodes/fragment/7/position = Vector2(140, -20)
nodes/fragment/8/node = SubResource("21")
nodes/fragment/8/position = Vector2(-240, 20)
nodes/fragment/9/node = SubResource("22")
nodes/fragment/9/position = Vector2(120, 100)
nodes/fragment/connections = PackedInt32Array(5, 0, 0, 0, 8, 0, 7, 1, 3, 0, 7, 0, 9, 0, 5, 1, 7, 0, 5, 0, 5, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="24"]
shader = SubResource("23")

[sub_resource type="VisualShaderNodeCustom" id="25"]
default_input_values = [1, 0.0, 2, Vector3(0.5, 0.5, 0)]
initialized = true
script = ExtResource("9")

[sub_resource type="VisualShaderNodeFloatConstant" id="26"]
constant = 0.4

[sub_resource type="VisualShaderNodeVec3Constant" id="27"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShader" id="28"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_5;


// RotateUV
vec3 _rotateUV(vec3 _rotate_uv, vec2 _rotate_pivot_vect, float _rotate_radians){
	//_r0tation_r0tate = radians(_r0tationDeg_r0tate);
	vec2 _rotation_angle = vec2(cos(_rotate_radians), sin(_rotate_radians));
	_rotate_uv.xy -= _rotate_pivot_vect;
	_rotate_uv.xy = vec2((_rotate_uv.x*_rotation_angle.x-_rotate_uv.y*_rotation_angle.y), 
						 (_rotate_uv.x*_rotation_angle.y+_rotate_uv.y*_rotation_angle.x));
	_rotate_uv.xy += _rotate_pivot_vect;
	return _rotate_uv;
}

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:8
	float n_out8p0 = 0.400000;


// Vector3Constant:9
	vec3 n_out9p0 = vec3(0.500000, 0.500000, 0.000000);


	vec3 n_out7p0;
// RotateUV:7
	{
		n_out7p0 = _rotateUV(vec3(n_out3p0, 0.0), n_out9p0.xy, n_out8p0);
	}


// Texture2D:5
	vec4 n_out5p0 = texture(tex_frg_5, vec2(n_out7p0.xy));
	float n_out5p4 = n_out5p0.a;


// Output:0
	COLOR.rgb = vec3(n_out5p0.xyz);
	COLOR.a = n_out5p4;


}
"
graph_offset = Vector2(-232.618, -80.4463)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(620, 0)
nodes/fragment/3/node = SubResource("9")
nodes/fragment/3/position = Vector2(-180, -40)
nodes/fragment/5/node = SubResource("10")
nodes/fragment/5/position = Vector2(360, -20)
nodes/fragment/7/node = SubResource("25")
nodes/fragment/7/position = Vector2(180, -20)
nodes/fragment/8/node = SubResource("26")
nodes/fragment/8/position = Vector2(-40, 40)
nodes/fragment/9/node = SubResource("27")
nodes/fragment/9/position = Vector2(-200, 120)
nodes/fragment/connections = PackedInt32Array(5, 0, 0, 0, 3, 0, 7, 0, 8, 0, 7, 1, 9, 0, 7, 2, 7, 0, 5, 0, 5, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="29"]
shader = SubResource("28")

[sub_resource type="VisualShaderNodeVec3Constant" id="30"]
constant = Vector3(2, 3, 0)

[sub_resource type="VisualShaderNodeVec3Constant" id="31"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShaderNodeCustom" id="32"]
default_input_values = [1, Vector3(1, 1, 0), 2, Vector3(0.5, 0.5, 0)]
initialized = true
script = ExtResource("7")

[sub_resource type="VisualShader" id="33"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_5;


// ScaleUV
vec2 _scaleUV(vec2 _scale_uv, vec2 _scale_vect, vec2 _pivot_vect) {
	return (_scale_uv - _pivot_vect) * _scale_vect + _pivot_vect;
}

void fragment() {
// Vector3Constant:10
	vec3 n_out10p0 = vec3(2.000000, 3.000000, 0.000000);


// Vector3Constant:11
	vec3 n_out11p0 = vec3(0.500000, 0.500000, 0.000000);


	vec3 n_out9p0;
// ScaleUV:9
	{
		n_out9p0.xy = _scaleUV(UV.xy, n_out10p0.xy, n_out11p0.xy);
	}


// Texture2D:5
	vec4 n_out5p0 = texture(tex_frg_5, vec2(n_out9p0.xy));
	float n_out5p4 = n_out5p0.a;


// Output:0
	COLOR.rgb = vec3(n_out5p0.xyz);
	COLOR.a = n_out5p4;


}
"
graph_offset = Vector2(-200.86, -79.7994)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(600, 0)
nodes/fragment/5/node = SubResource("10")
nodes/fragment/5/position = Vector2(400, 0)
nodes/fragment/9/node = SubResource("32")
nodes/fragment/9/position = Vector2(180, 0)
nodes/fragment/10/node = SubResource("30")
nodes/fragment/10/position = Vector2(-220, 20)
nodes/fragment/11/node = SubResource("31")
nodes/fragment/11/position = Vector2(-220, 140)
nodes/fragment/connections = PackedInt32Array(5, 0, 0, 0, 10, 0, 9, 1, 11, 0, 9, 2, 9, 0, 5, 0, 5, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="34"]
shader = SubResource("33")

[sub_resource type="VisualShaderNodeCustom" id="35"]
default_input_values = [1, Vector3(1, 1, 0), 2, Vector3(0, 0, 0), 3, Vector3(0.5, 0.5, 0), 4, Vector3(0, 0, 0)]
initialized = true
script = ExtResource("8")

[sub_resource type="VisualShaderNodeVec3Constant" id="36"]
constant = Vector3(1, 1, 0)

[sub_resource type="VisualShaderNodeVec3Constant" id="37"]

[sub_resource type="VisualShaderNodeVec3Constant" id="38"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShaderNodeVec3Constant" id="39"]

[sub_resource type="VisualShader" id="40"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_5;


// SphericalUV
vec2 _sphericalUV(vec2 _spherical_uv, vec2 _spherical_position_vect, vec2 _spherical_radius_vect, vec2 _spherical_spin_vect, vec2 _spherical_local_position_vect){
	vec2 _temp_p = (_spherical_uv - _spherical_position_vect) * 2.0;
	float _temp_rad = length((_temp_p - _spherical_local_position_vect) * _spherical_radius_vect) + 0.0001;
	float _temp_f = (1.0 - sqrt(1.0 - _temp_rad)) / _temp_rad;
	return mod(vec2((_temp_p.x * 0.5 * _temp_f + _spherical_spin_vect.x) + 0.5,
					(_temp_p.y * 0.5 * _temp_f + _spherical_spin_vect.y) + 0.5), vec2(1.0));
}

void fragment() {
// Vector3Constant:13
	vec3 n_out13p0 = vec3(1.000000, 1.000000, 0.000000);


// Vector3Constant:14
	vec3 n_out14p0 = vec3(0.000000, 0.000000, 0.000000);


// Vector3Constant:15
	vec3 n_out15p0 = vec3(0.500000, 0.500000, 0.000000);


// Vector3Constant:16
	vec3 n_out16p0 = vec3(0.000000, 0.000000, 0.000000);


	vec3 n_out12p0;
// SphericalUV:12
	{
		n_out12p0.xy = _sphericalUV(UV.xy, n_out15p0.xy, n_out13p0.xy, n_out14p0.xy, n_out16p0.xy);
	}


// Texture2D:5
	vec4 n_out5p0 = texture(tex_frg_5, vec2(n_out12p0.xy));
	float n_out5p4 = n_out5p0.a;


// Output:0
	COLOR.rgb = vec3(n_out5p0.xyz);
	COLOR.a = n_out5p4;


}
"
graph_offset = Vector2(-207.557, -76.182)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(660, 20)
nodes/fragment/5/node = SubResource("10")
nodes/fragment/5/position = Vector2(400, 0)
nodes/fragment/12/node = SubResource("35")
nodes/fragment/12/position = Vector2(200, 0)
nodes/fragment/13/node = SubResource("36")
nodes/fragment/13/position = Vector2(-200, -100)
nodes/fragment/14/node = SubResource("37")
nodes/fragment/14/position = Vector2(-200, 0)
nodes/fragment/15/node = SubResource("38")
nodes/fragment/15/position = Vector2(-200, 100)
nodes/fragment/16/node = SubResource("39")
nodes/fragment/16/position = Vector2(-200, 200)
nodes/fragment/connections = PackedInt32Array(5, 0, 0, 0, 13, 0, 12, 1, 14, 0, 12, 2, 15, 0, 12, 3, 16, 0, 12, 4, 12, 0, 5, 0, 5, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="41"]
shader = SubResource("40")

[sub_resource type="VisualShaderNodeCustom" id="42"]
default_input_values = [1, 2.0, 2, 2.0, 3, 0.0]
initialized = true
script = ExtResource("10")

[sub_resource type="VisualShaderNodeFloatConstant" id="43"]

[sub_resource type="VisualShaderNodeFloatConstant" id="44"]
constant = 2.0

[sub_resource type="VisualShaderNodeFloatConstant" id="45"]
constant = 2.0

[sub_resource type="VisualShader" id="46"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_5;


// TileUV
vec2 _tileMapUV(vec2 _tile_uv, float _tile_width, float _tile_height, float _tile_number){
	_tile_number = min(max(floor(_tile_number), 0.0), _tile_width * _tile_height - 1.0);
	vec2 tcrcp = vec2(1.0) / vec2(_tile_width, _tile_height);
	float ty =floor(_tile_number * tcrcp.x);
	float tx = _tile_number - _tile_width * ty;
	return (_tile_uv + vec2(tx, ty)) * tcrcp;
}

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:15
	float n_out15p0 = 2.000000;


// FloatConstant:16
	float n_out16p0 = 2.000000;


// FloatConstant:14
	float n_out14p0 = 0.000000;


	vec3 n_out13p0;
// TileUV:13
	{
		n_out13p0.xy = _tileMapUV(vec3(n_out3p0, 0.0).xy, n_out15p0, n_out16p0, n_out14p0);
	}


// Texture2D:5
	vec4 n_out5p0 = texture(tex_frg_5, vec2(n_out13p0.xy));
	float n_out5p4 = n_out5p0.a;


// Output:0
	COLOR.rgb = vec3(n_out5p0.xyz);
	COLOR.a = n_out5p4;


}
"
graph_offset = Vector2(-140.949, -69.3822)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(660, 40)
nodes/fragment/3/node = SubResource("9")
nodes/fragment/3/position = Vector2(-180, -80)
nodes/fragment/5/node = SubResource("10")
nodes/fragment/5/position = Vector2(400, 0)
nodes/fragment/13/node = SubResource("42")
nodes/fragment/13/position = Vector2(200, 0)
nodes/fragment/14/node = SubResource("43")
nodes/fragment/14/position = Vector2(-40, 160)
nodes/fragment/15/node = SubResource("44")
nodes/fragment/15/position = Vector2(-40, 0)
nodes/fragment/16/node = SubResource("45")
nodes/fragment/16/position = Vector2(-40, 80)
nodes/fragment/connections = PackedInt32Array(5, 0, 0, 0, 3, 0, 13, 0, 14, 0, 13, 3, 15, 0, 13, 1, 16, 0, 13, 2, 13, 0, 5, 0, 5, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="47"]
shader = SubResource("46")

[sub_resource type="VisualShaderNodeCustom" id="48"]
default_input_values = [1, Vector3(0, 0, 0)]
initialized = true
script = ExtResource("2")

[sub_resource type="VisualShaderNodeFloatConstant" id="49"]
constant = 0.2

[sub_resource type="VisualShader" id="50"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_5;


// TilingAndOffsetUV
vec2 _tiling_and_offset(vec2 _tiling_and_offset_uv, vec2 _tiling_and_offset_offset_vect){
	return vec2(mod(_tiling_and_offset_uv.x + _tiling_and_offset_offset_vect.x, 1.0),
				mod(_tiling_and_offset_uv.y + _tiling_and_offset_offset_vect.y, 1.0));
}

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:18
	float n_out18p0 = 0.200000;


	vec3 n_out17p0;
// TilingAndOffsetUV:17
	{
		n_out17p0 = vec3(_tiling_and_offset(vec3(n_out3p0, 0.0).xy, vec3(n_out18p0).xy), 0);
	}


// Texture2D:5
	vec4 n_out5p0 = texture(tex_frg_5, vec2(n_out17p0.xy));
	float n_out5p4 = n_out5p0.a;


// Output:0
	COLOR.rgb = vec3(n_out5p0.xyz);
	COLOR.a = n_out5p4;


}
"
graph_offset = Vector2(-110, -126)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(660, 40)
nodes/fragment/3/node = SubResource("9")
nodes/fragment/3/position = Vector2(-180, -40)
nodes/fragment/5/node = SubResource("10")
nodes/fragment/5/position = Vector2(400, 0)
nodes/fragment/17/node = SubResource("48")
nodes/fragment/17/position = Vector2(180, 0)
nodes/fragment/18/node = SubResource("49")
nodes/fragment/18/position = Vector2(-40, 80)
nodes/fragment/connections = PackedInt32Array(5, 0, 0, 0, 18, 0, 17, 1, 3, 0, 17, 0, 17, 0, 5, 0, 5, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="51"]
shader = SubResource("50")

[sub_resource type="VisualShaderNodeFloatConstant" id="52"]
constant = 0.2

[sub_resource type="VisualShaderNodeCustom" id="53"]
default_input_values = [1, Vector3(0, 0, 0), 2, Vector3(1, 1, 0), 3, Vector3(0.5, 0.5, 0), 4, 0, 5, Vector3(0.5, 0.5, 0)]
initialized = true
script = ExtResource("11")

[sub_resource type="VisualShaderNodeVec3Constant" id="54"]
constant = Vector3(0.1, 0.1, 0)

[sub_resource type="VisualShaderNodeVec3Constant" id="55"]
constant = Vector3(2, 2, 0)

[sub_resource type="VisualShaderNodeVec3Constant" id="56"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShaderNodeVec3Constant" id="57"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShader" id="58"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_5;


// TransformUV
vec2 _transformUV(vec2 _uv_transform, vec2 _scale_uv_, vec2 _pivot_scale_uv_, vec2 _offset_uv_, float _rotate_uv, vec2 _pivot_rotate_uv_){
	_uv_transform -= _offset_uv_; // offset
	_uv_transform = (_uv_transform - _pivot_scale_uv_) * _scale_uv_ + _pivot_scale_uv_; // zoom
	vec2 _rot_uv_angl = vec2(cos(_rotate_uv), sin(_rotate_uv));
	mat2 _rot_matrix = mat2(vec2(_rot_uv_angl.x, - _rot_uv_angl.y), vec2(_rot_uv_angl.y, _rot_uv_angl.x));
	_uv_transform = (_uv_transform - _pivot_rotate_uv_) * _rot_matrix + _pivot_rotate_uv_; // rotate
	return _uv_transform;
}

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// Vector3Constant:19
	vec3 n_out19p0 = vec3(0.100000, 0.100000, 0.000000);


// Vector3Constant:20
	vec3 n_out20p0 = vec3(2.000000, 2.000000, 0.000000);


// Vector3Constant:22
	vec3 n_out22p0 = vec3(0.500000, 0.500000, 0.000000);


// FloatConstant:15
	float n_out15p0 = 0.200000;


// Vector3Constant:21
	vec3 n_out21p0 = vec3(0.500000, 0.500000, 0.000000);


	vec3 n_out18p0;
// TransformUV:18
	{
		n_out18p0.xy = _transformUV(vec3(n_out3p0, 0.0).xy, n_out20p0.xy, n_out22p0.xy, n_out19p0.xy, n_out15p0, n_out21p0.xy);
	}


// Texture2D:5
	vec4 n_out5p0 = texture(tex_frg_5, vec2(n_out18p0.xy));
	float n_out5p4 = n_out5p0.a;


// Output:0
	COLOR.rgb = vec3(n_out5p0.xyz);
	COLOR.a = n_out5p4;


}
"
graph_offset = Vector2(-225.266, -106.044)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(600, 20)
nodes/fragment/3/node = SubResource("9")
nodes/fragment/3/position = Vector2(-300, -240)
nodes/fragment/5/node = SubResource("10")
nodes/fragment/5/position = Vector2(340, -20)
nodes/fragment/15/node = SubResource("52")
nodes/fragment/15/position = Vector2(-300, 140)
nodes/fragment/18/node = SubResource("53")
nodes/fragment/18/position = Vector2(120, -20)
nodes/fragment/19/node = SubResource("54")
nodes/fragment/19/position = Vector2(-300, -160)
nodes/fragment/20/node = SubResource("55")
nodes/fragment/20/position = Vector2(-300, -60)
nodes/fragment/21/node = SubResource("56")
nodes/fragment/21/position = Vector2(-300, 220)
nodes/fragment/22/node = SubResource("57")
nodes/fragment/22/position = Vector2(-300, 40)
nodes/fragment/connections = PackedInt32Array(5, 0, 0, 0, 3, 0, 18, 0, 19, 0, 18, 1, 20, 0, 18, 2, 22, 0, 18, 3, 15, 0, 18, 4, 21, 0, 18, 5, 18, 0, 5, 0, 5, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="59"]
shader = SubResource("58")

[sub_resource type="VisualShaderNodeCustom" id="60"]
default_input_values = [1, 1.0, 2, Vector3(0.5, 0.5, 0)]
initialized = true
script = ExtResource("12")

[sub_resource type="VisualShaderNodeVec3Constant" id="61"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShaderNodeFloatConstant" id="62"]
constant = 1.0

[sub_resource type="VisualShader" id="63"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_5;


// TwirlUV
vec3 _twirlUVFunc(vec2 _uv_twirlUVFunc, vec2 _pivot_twirlUVFunc, float _amount_twirlUVFunc){
	_uv_twirlUVFunc -= _pivot_twirlUVFunc;
	float _angle_twirlUVFunc = atan(_uv_twirlUVFunc.y, _uv_twirlUVFunc.x);
	float _radiusTemp_twirlUVFunc = length(_uv_twirlUVFunc);
	_angle_twirlUVFunc += _radiusTemp_twirlUVFunc * _amount_twirlUVFunc;
	return vec3(_radiusTemp_twirlUVFunc * vec2(cos(_angle_twirlUVFunc), sin(_angle_twirlUVFunc)) + 0.5, 0.0);
}

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:25
	float n_out25p0 = 1.000000;


// Vector3Constant:24
	vec3 n_out24p0 = vec3(0.500000, 0.500000, 0.000000);


	vec3 n_out23p0;
// TwirlUV:23
	{
		n_out23p0 = _twirlUVFunc(vec3(n_out3p0, 0.0).xy, n_out24p0.xy, n_out25p0);
	}


// Texture2D:5
	vec4 n_out5p0 = texture(tex_frg_5, vec2(n_out23p0.xy));
	float n_out5p4 = n_out5p0.a;


// Output:0
	COLOR.rgb = vec3(n_out5p0.xyz);
	COLOR.a = n_out5p4;


}
"
graph_offset = Vector2(-187.876, -150.917)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(580, 40)
nodes/fragment/3/node = SubResource("9")
nodes/fragment/3/position = Vector2(-260, -100)
nodes/fragment/5/node = SubResource("10")
nodes/fragment/5/position = Vector2(320, -20)
nodes/fragment/23/node = SubResource("60")
nodes/fragment/23/position = Vector2(100, -20)
nodes/fragment/24/node = SubResource("61")
nodes/fragment/24/position = Vector2(-260, 60)
nodes/fragment/25/node = SubResource("62")
nodes/fragment/25/position = Vector2(-120, -20)
nodes/fragment/connections = PackedInt32Array(5, 0, 0, 0, 3, 0, 23, 0, 24, 0, 23, 2, 25, 0, 23, 1, 23, 0, 5, 0, 5, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="64"]
shader = SubResource("63")

[sub_resource type="VisualShaderNodeCustom" id="65"]
default_input_values = [1, 0, 2, 0, 3, 0, 4, 0, 5, 1, 6, 0]
initialized = true
script = ExtResource("13")

[sub_resource type="VisualShaderNodeInput" id="66"]
input_name = "time"

[sub_resource type="VisualShaderNodeFloatConstant" id="67"]
constant = 5.0

[sub_resource type="VisualShaderNodeFloatConstant" id="68"]
constant = -0.2

[sub_resource type="VisualShaderNodeFloatConstant" id="69"]
constant = 0.01

[sub_resource type="VisualShaderNodeFloatConstant" id="70"]
constant = 1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="71"]
constant = 5.0

[sub_resource type="VisualShader" id="72"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_5;


// DistortionUVAnimated
vec2 _distortionUVAnimatedFunc(vec2 _uv_dist, float _distX_dist, float _distY_dist, float _waveX_dist, float _waveY_dist, float _spd_dist, float _time_dist){
	_uv_dist.x += sin(_uv_dist.y * _waveX_dist + _time_dist * _spd_dist) * _distX_dist;
	_uv_dist.y += sin(_uv_dist.x * _waveY_dist + _time_dist * _spd_dist) * _distY_dist;
	return _uv_dist;
}

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:26
	float n_out26p0 = 5.000000;


// FloatConstant:30
	float n_out30p0 = 5.000000;


// FloatConstant:27
	float n_out27p0 = -0.200000;


// FloatConstant:28
	float n_out28p0 = 0.010000;


// FloatConstant:29
	float n_out29p0 = 1.000000;


// Input:25
	float n_out25p0 = TIME;


	vec3 n_out24p0;
// DistortionUVAnimated:24
	{
		n_out24p0.xy = _distortionUVAnimatedFunc(vec3(n_out3p0, 0.0).xy, n_out27p0, n_out28p0, n_out26p0, n_out30p0, n_out29p0, n_out25p0);
	}


// Texture2D:5
	vec4 n_out5p0 = texture(tex_frg_5, vec2(n_out24p0.xy));
	float n_out5p4 = n_out5p0.a;


// Output:0
	COLOR.rgb = vec3(n_out5p0.xyz);
	COLOR.a = n_out5p4;


}
"
graph_offset = Vector2(-456.631, -160.005)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(580, 40)
nodes/fragment/3/node = SubResource("9")
nodes/fragment/3/position = Vector2(-320, -200)
nodes/fragment/5/node = SubResource("10")
nodes/fragment/5/position = Vector2(320, -20)
nodes/fragment/24/node = SubResource("65")
nodes/fragment/24/position = Vector2(60, -20)
nodes/fragment/25/node = SubResource("66")
nodes/fragment/25/position = Vector2(-300, 300)
nodes/fragment/26/node = SubResource("67")
nodes/fragment/26/position = Vector2(-180, -120)
nodes/fragment/27/node = SubResource("68")
nodes/fragment/27/position = Vector2(-180, 40)
nodes/fragment/28/node = SubResource("69")
nodes/fragment/28/position = Vector2(-180, 120)
nodes/fragment/29/node = SubResource("70")
nodes/fragment/29/position = Vector2(-180, 200)
nodes/fragment/30/node = SubResource("71")
nodes/fragment/30/position = Vector2(-180, -40)
nodes/fragment/connections = PackedInt32Array(5, 0, 0, 0, 3, 0, 24, 0, 25, 0, 24, 6, 26, 0, 24, 1, 29, 0, 24, 5, 28, 0, 24, 4, 27, 0, 24, 3, 30, 0, 24, 2, 24, 0, 5, 0, 5, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="73"]
shader = SubResource("72")

[sub_resource type="VisualShaderNodeFloatConstant" id="74"]
constant = 0.7

[sub_resource type="VisualShaderNodeFloatConstant" id="75"]
constant = 0.065

[sub_resource type="VisualShaderNodeCustom" id="76"]
default_input_values = [1, 0.5, 2, 4.0, 3, 0.7, 4, 0.065, 5, 0]
initialized = true
script = ExtResource("14")

[sub_resource type="VisualShaderNodeInput" id="77"]
input_name = "time"

[sub_resource type="VisualShaderNodeFloatConstant" id="78"]
constant = 0.5

[sub_resource type="VisualShaderNodeFloatConstant" id="79"]
constant = 4.0

[sub_resource type="VisualShader" id="80"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_5;


// DoodleUV
float _hash2Doodle(vec2 _p_hash_doodle) {
	return fract(1e4 * sin(17.0 * _p_hash_doodle.x + _p_hash_doodle.y * 0.1) * (0.1 + abs(sin(_p_hash_doodle.y * 13.0 + _p_hash_doodle.x))));
}

float _noiseDoodle(vec2 _seed_noise_doodle){
	vec2 i = floor(_seed_noise_doodle);
	vec2 f = fract(_seed_noise_doodle);
	float _a = _hash2Doodle(i);
	float _b = _hash2Doodle(i + vec2(1.0, 0.0));
	float _c = _hash2Doodle(i + vec2(0.0, 1.0));
	float _d = _hash2Doodle(i + vec2(1.0, 1.0));
	vec2 u = f * f * (3.0 - 2.0 * f);
	return mix(_a, _b, u.x) + (_c - _a) * u.y * (1.0 - u.x) + (_d - _b) * u.x * u.y;
}

vec2 _doodleUVFunc(vec2 _doodle_uv, float _doodle_max_offset, float _doodle_time, float _doodle_frame_time, int _doodle_frame_count, float _doodle_scale){
	float _timeValueDoodle = mod(floor(_doodle_time / _doodle_frame_time), float(_doodle_frame_count)) + 1.0;
	return _doodle_uv + vec2(_noiseDoodle((_doodle_uv + _timeValueDoodle) * _doodle_scale) * 2.0 - 1.0) * _doodle_max_offset;
}

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:8
	float n_out8p0 = 0.500000;


// FloatConstant:9
	float n_out9p0 = 4.000000;


// FloatConstant:10
	float n_out10p0 = 0.700000;


// FloatConstant:11
	float n_out11p0 = 0.065000;


// Input:7
	float n_out7p0 = TIME;


	vec3 n_out12p0;
// DoodleUV:12
	{
		n_out12p0.xy = _doodleUVFunc(vec3(n_out3p0, 0.0).xy, n_out11p0, n_out7p0, n_out8p0, int(n_out9p0), n_out10p0);
	}


// Texture2D:5
	vec4 n_out5p0 = texture(tex_frg_5, vec2(n_out12p0.xy));
	float n_out5p4 = n_out5p0.a;


// Output:0
	COLOR.rgb = vec3(n_out5p0.xyz);
	COLOR.a = n_out5p4;


}
"
graph_offset = Vector2(114.429, -71.7107)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(600, 60)
nodes/fragment/3/node = SubResource("9")
nodes/fragment/3/position = Vector2(-260, -160)
nodes/fragment/5/node = SubResource("10")
nodes/fragment/5/position = Vector2(340, 0)
nodes/fragment/7/node = SubResource("77")
nodes/fragment/7/position = Vector2(-240, 240)
nodes/fragment/8/node = SubResource("78")
nodes/fragment/8/position = Vector2(-120, -80)
nodes/fragment/9/node = SubResource("79")
nodes/fragment/9/position = Vector2(-120, 0)
nodes/fragment/10/node = SubResource("74")
nodes/fragment/10/position = Vector2(-120, 80)
nodes/fragment/11/node = SubResource("75")
nodes/fragment/11/position = Vector2(-120, 160)
nodes/fragment/12/node = SubResource("76")
nodes/fragment/12/position = Vector2(160, 0)
nodes/fragment/connections = PackedInt32Array(5, 0, 0, 0, 3, 0, 12, 0, 8, 0, 12, 1, 9, 0, 12, 2, 10, 0, 12, 3, 11, 0, 12, 4, 7, 0, 12, 5, 12, 0, 5, 0, 5, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="81"]
shader = SubResource("80")

[sub_resource type="VisualShaderNodeVec3Constant" id="82"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShaderNodeCustom" id="83"]
default_input_values = [1, 0.5, 2, Vector3(0.5, 0.5, 0)]
initialized = true
script = ExtResource("17")

[sub_resource type="VisualShaderNodeFloatConstant" id="84"]
constant = 0.5

[sub_resource type="VisualShader" id="85"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_5;


// RotateUVAnimated
vec2 _rotateUVAnimatedFunc(vec2 _uv_rotate, vec2 _pivot_rotate, float _rotation_rotate, float _rotSpeed_rotate, float _time_rotate){
	_rotation_rotate += _time_rotate * _rotSpeed_rotate;
	//_rotation_rotate = radians(_rotationDeg_rotate);
	vec2 _rotAngle = vec2(cos(_rotation_rotate), sin(_rotation_rotate));
	_uv_rotate -= _pivot_rotate;
	_uv_rotate = vec2((_uv_rotate.x*_rotAngle.x-_uv_rotate.y*_rotAngle.y),(_uv_rotate.x*_rotAngle.y+_uv_rotate.y*_rotAngle.x));
	_uv_rotate += _pivot_rotate;
	return _uv_rotate;
}

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:9
	float n_out9p0 = 0.500000;


// Vector3Constant:10
	vec3 n_out10p0 = vec3(0.500000, 0.500000, 0.000000);


// Input:7
	float n_out7p0 = TIME;


	vec3 n_out8p0;
// RotateUVAnimated:8
	{
		n_out8p0 = vec3(_rotateUVAnimatedFunc(vec3(n_out3p0, 0.0).xy, n_out10p0.xy, 0.0, n_out9p0, n_out7p0), 0);
	}


// Texture2D:5
	vec4 n_out5p0 = texture(tex_frg_5, vec2(n_out8p0.xy));
	float n_out5p4 = n_out5p0.a;


// Output:0
	COLOR.rgb = vec3(n_out5p0.xyz);
	COLOR.a = n_out5p4;


}
"
graph_offset = Vector2(182, -41)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(580, 60)
nodes/fragment/3/node = SubResource("9")
nodes/fragment/3/position = Vector2(-260, -100)
nodes/fragment/5/node = SubResource("10")
nodes/fragment/5/position = Vector2(340, 0)
nodes/fragment/7/node = SubResource("77")
nodes/fragment/7/position = Vector2(-240, 160)
nodes/fragment/8/node = SubResource("83")
nodes/fragment/8/position = Vector2(100, 0)
nodes/fragment/9/node = SubResource("84")
nodes/fragment/9/position = Vector2(-120, -20)
nodes/fragment/10/node = SubResource("82")
nodes/fragment/10/position = Vector2(-260, 60)
nodes/fragment/connections = PackedInt32Array(5, 0, 0, 0, 3, 0, 8, 0, 7, 0, 8, 3, 9, 0, 8, 1, 10, 0, 8, 2, 8, 0, 5, 0, 5, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="86"]
shader = SubResource("85")

[sub_resource type="VisualShaderNodeFloatConstant" id="87"]
constant = 1.0

[sub_resource type="VisualShaderNodeCustom" id="88"]
default_input_values = [0, 1.0, 1, 1.0]
initialized = true
script = ExtResource("16")

[sub_resource type="VisualShaderNodeFloatConstant" id="89"]
constant = 10.0

[sub_resource type="VisualShaderNodeVec3Constant" id="90"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShaderNodeCustom" id="91"]
default_input_values = [1, Vector3(0.5, 0.5, 0), 2, 0.0, 3, 0.0]
initialized = true
script = ExtResource("19")

[sub_resource type="VisualShader" id="92"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_5;


// SwirlUV
vec2 _swirlUVFunc(vec2 _swirl_uv, float _swirl_time, vec2 _swirl_pivot, float _swirl_amount){
	float _swirl_rotation_index = _swirl_amount * length(_swirl_uv - _swirl_pivot) * _swirl_time;
	_swirl_uv -= _swirl_pivot;
	_swirl_uv *= mat2(vec2(cos(_swirl_rotation_index), - sin(_swirl_rotation_index)),
										vec2(sin(_swirl_rotation_index), cos(_swirl_rotation_index)));
	_swirl_uv += _swirl_pivot;
	return _swirl_uv;
}

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// Vector3Constant:13
	vec3 n_out13p0 = vec3(0.500000, 0.500000, 0.000000);


// FloatConstant:10
	float n_out10p0 = 1.000000;


// FloatConstant:12
	float n_out12p0 = 10.000000;


	float n_out11p0;
// SinTIME:11
	float n_in11p0 = 1.00000;
	{
		n_out11p0 = n_out12p0 * sin(n_in11p0 * TIME);
	}


	vec3 n_out9p0;
// SwirlUV:9
	{
		n_out9p0.xy = _swirlUVFunc(vec3(n_out3p0, 0.0).xy, n_out11p0, n_out13p0.xy, n_out10p0);
	}


// Texture2D:5
	vec4 n_out5p0 = texture(tex_frg_5, vec2(n_out9p0.xy));
	float n_out5p4 = n_out5p0.a;


// Output:0
	COLOR.rgb = vec3(n_out5p0.xyz);
	COLOR.a = n_out5p4;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(540, 0)
nodes/fragment/3/node = SubResource("9")
nodes/fragment/3/position = Vector2(-40, -120)
nodes/fragment/5/node = SubResource("10")
nodes/fragment/5/position = Vector2(340, 0)
nodes/fragment/9/node = SubResource("91")
nodes/fragment/9/position = Vector2(140, 0)
nodes/fragment/10/node = SubResource("87")
nodes/fragment/10/position = Vector2(-80, 60)
nodes/fragment/11/node = SubResource("88")
nodes/fragment/11/position = Vector2(-80, 140)
nodes/fragment/12/node = SubResource("89")
nodes/fragment/12/position = Vector2(-280, 180)
nodes/fragment/13/node = SubResource("90")
nodes/fragment/13/position = Vector2(-220, -40)
nodes/fragment/connections = PackedInt32Array(5, 0, 0, 0, 3, 0, 9, 0, 10, 0, 9, 2, 11, 0, 9, 3, 12, 0, 11, 1, 13, 0, 9, 1, 9, 0, 5, 0, 5, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="93"]
shader = SubResource("92")

[sub_resource type="VisualShaderNodeCustom" id="94"]
default_input_values = [1, Vector3(0, 0, 0), 2, 0.0]
initialized = true
script = ExtResource("15")

[sub_resource type="VisualShaderNodeInput" id="95"]
input_name = "time"

[sub_resource type="VisualShaderNodeFloatConstant" id="96"]
constant = 0.5

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_n3ifg"]
output_port_for_preview = 0
expanded_output_ports = [0]
source = 5
texture = ExtResource("1")
texture_type = 1

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_sghnd"]
input_name = "texture"

[sub_resource type="VisualShader" id="97"]
code = "shader_type canvas_item;
render_mode blend_mix;



// TilingAndOffsetUVAnimated
vec2 _tilingNoffsetAnimatedFunc(vec2 _tilingNoffset_uv, float _tilingNoffset_time, vec2 _tilingNoffset_offset_vect){
	return vec2(mod((_tilingNoffset_uv.x + _tilingNoffset_offset_vect.x * _tilingNoffset_time), 1.0),
				mod((_tilingNoffset_uv.y + _tilingNoffset_offset_vect.y * _tilingNoffset_time), 1.0));
}

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:15
	float n_out15p0 = 0.500000;


// Input:14
	float n_out14p0 = TIME;


	vec2 n_out13p0;
// TilingAndOffsetUVAnimated:13
	{
		n_out13p0.xy = _tilingNoffsetAnimatedFunc(vec3(n_out3p0, 0.0).xy, n_out14p0, vec3(n_out15p0).xy);
	}


	vec4 n_out16p0;
// Texture2D:16
	n_out16p0 = textureLod(TEXTURE, n_out13p0, n_out13p0.x);
	float n_out16p4 = n_out16p0.a;


// Output:0
	COLOR.rgb = vec3(n_out16p0.xyz);
	COLOR.a = n_out16p4;


}
"
graph_offset = Vector2(-172.177, -134.054)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(620, 60)
nodes/fragment/3/node = SubResource("9")
nodes/fragment/3/position = Vector2(-300, -60)
nodes/fragment/13/node = SubResource("94")
nodes/fragment/13/position = Vector2(60, 0)
nodes/fragment/14/node = SubResource("95")
nodes/fragment/14/position = Vector2(-280, 120)
nodes/fragment/15/node = SubResource("96")
nodes/fragment/15/position = Vector2(-160, 40)
nodes/fragment/16/node = SubResource("VisualShaderNodeTexture_n3ifg")
nodes/fragment/16/position = Vector2(360, 20)
nodes/fragment/17/node = SubResource("VisualShaderNodeInput_sghnd")
nodes/fragment/17/position = Vector2(40, 200)
nodes/fragment/connections = PackedInt32Array(15, 0, 13, 1, 14, 0, 13, 2, 16, 4, 0, 1, 17, 0, 16, 2, 16, 0, 0, 0, 3, 0, 13, 0, 13, 0, 16, 1, 13, 0, 16, 0)

[sub_resource type="ShaderMaterial" id="98"]
shader = SubResource("97")

[sub_resource type="VisualShaderNodeCustom" id="99"]
initialized = true
script = ExtResource("18")

[sub_resource type="VisualShader" id="100"]
code = "shader_type canvas_item;
render_mode blend_mix;




void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


	float n_out17p0;
// HashRandom1d:17
	{
		n_out17p0 = fract(sin(n_out3p0.x) * 1e4);
	}


// Output:0
	COLOR.rgb = vec3(n_out17p0);


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(560, 0)
nodes/fragment/3/node = SubResource("9")
nodes/fragment/3/position = Vector2(20, 0)
nodes/fragment/17/node = SubResource("99")
nodes/fragment/17/position = Vector2(360, 0)
nodes/fragment/connections = PackedInt32Array(3, 0, 17, 0, 17, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="101"]
shader = SubResource("100")

[sub_resource type="VisualShaderNodeCustom" id="102"]
initialized = true
script = ExtResource("20")

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_7v744"]
default_input_values = [0, 0.0, 1, 0.0, 2, 1.0]

[sub_resource type="VisualShader" id="103"]
code = "shader_type canvas_item;
render_mode blend_mix;




void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


	float n_out18p0;
// HashRandom2d:18
	{
		n_out18p0 = fract(1e4 * sin(17.0 * vec3(n_out3p0, 0.0).x + vec3(n_out3p0, 0.0).y * 0.1) * (0.1 + abs(sin(vec3(n_out3p0, 0.0).y * 13.0 + vec3(n_out3p0, 0.0).x))));
	}


// VectorCompose:20
	vec3 n_out20p0 = vec3(n_out18p0, n_out18p0, n_out18p0);


// Output:0
	COLOR.rgb = n_out20p0;


}
"
graph_offset = Vector2(250.823, -110.07)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(840, -20)
nodes/fragment/3/node = SubResource("9")
nodes/fragment/3/position = Vector2(-140, 0)
nodes/fragment/18/node = SubResource("102")
nodes/fragment/18/position = Vector2(240, 20)
nodes/fragment/20/node = SubResource("VisualShaderNodeVectorCompose_7v744")
nodes/fragment/20/position = Vector2(440, -20)
nodes/fragment/connections = PackedInt32Array(3, 0, 18, 0, 20, 0, 0, 0, 18, 0, 20, 0, 18, 0, 20, 1, 18, 0, 20, 2)

[sub_resource type="ShaderMaterial" id="104"]
shader = SubResource("103")

[sub_resource type="VisualShaderNodeCustom" id="105"]
initialized = true
script = ExtResource("21")

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_gortp"]
default_input_values = [0, Vector2(0, 0)]
op_type = 0

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_c6k4f"]
default_input_values = [0, 0.0, 1, 0.0, 2, 1.0]

[sub_resource type="VisualShader" id="106"]
code = "shader_type canvas_item;
render_mode blend_mix;



// HashRandom2dVec
vec2 _hash2v(vec2 co) {
	float _tmp_h = dot(co, vec2(12.9898, 78.233));
	return fract(vec2(sin(_tmp_h), cos(_tmp_h)) * 43758.5453) * 2.0 - 1.0;
}

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


	vec3 n_out19p0;
// HashRandom2dVec:19
	{
		n_out19p0.xy = _hash2v(vec3(n_out3p0, 0.0).xy);
	}


// VectorDecompose:20
	float n_out20p0 = vec2(n_out19p0.xy).x;
	float n_out20p1 = vec2(n_out19p0.xy).y;


// VectorCompose:21
	float n_in21p2 = 1.00000;
	vec3 n_out21p0 = vec3(n_out20p0, n_out20p1, n_in21p2);


// Output:0
	COLOR.rgb = n_out21p0;


}
"
graph_offset = Vector2(88.5064, -73.1068)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(900, 40)
nodes/fragment/3/node = SubResource("9")
nodes/fragment/3/position = Vector2(-140, 0)
nodes/fragment/19/node = SubResource("105")
nodes/fragment/19/position = Vector2(240, 0)
nodes/fragment/20/node = SubResource("VisualShaderNodeVectorDecompose_gortp")
nodes/fragment/20/position = Vector2(440, 0)
nodes/fragment/21/node = SubResource("VisualShaderNodeVectorCompose_c6k4f")
nodes/fragment/21/position = Vector2(660, 20)
nodes/fragment/connections = PackedInt32Array(3, 0, 19, 0, 19, 0, 20, 0, 21, 0, 0, 0, 20, 0, 21, 0, 20, 1, 21, 1)

[sub_resource type="ShaderMaterial" id="107"]
shader = SubResource("106")

[sub_resource type="VisualShaderNodeCustom" id="609"]
initialized = true
script = ExtResource("22")

[sub_resource type="VisualShader" id="109"]
code = "shader_type canvas_item;
render_mode blend_mix;




void fragment() {
	float n_out2p0;
// RandomFloat:2
	{
		n_out2p0 = fract(sin(dot(UV.xy, vec2(12.9898, 78.233))) * 43758.5453123);
	}


// Output:0
	COLOR.rgb = vec3(n_out2p0);


}
"
graph_offset = Vector2(-104, -62)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(400, 0)
nodes/fragment/2/node = SubResource("609")
nodes/fragment/2/position = Vector2(200, 0)
nodes/fragment/connections = PackedInt32Array(2, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="110"]
shader = SubResource("109")

[sub_resource type="VisualShaderNodeInput" id="111"]
input_name = "uv"

[sub_resource type="VisualShaderNodeVec3Constant" id="115"]

[sub_resource type="VisualShaderNodeFloatConstant" id="116"]

[sub_resource type="VisualShaderNodeCustom" id="117"]
output_port_for_preview = 0
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(0, 0, 0), 2, 0.0]
initialized = true
script = ExtResource("24")

[sub_resource type="VisualShader" id="118"]
code = "shader_type canvas_item;
render_mode blend_mix;



// RandomGoldRatio
float _randomGoldRatioFunc(vec2 _coord_gn, vec2 _scale_gn, float _seed_gn){
	float PHI = 1.6180339887; 
	float SQ2 = 1.4142135624;
	return fract(tan(distance((_coord_gn + _scale_gn) * (_seed_gn + PHI), vec2(PHI, PI))) * SQ2);
}

void fragment() {
// Input:21
	vec2 n_out21p0 = UV;


// Vector3Constant:24
	vec3 n_out24p0 = vec3(0.000000, 0.000000, 0.000000);


// FloatConstant:25
	float n_out25p0 = 0.000000;


	float n_out26p0;
// RandomGoldRatio:26
	{
		n_out26p0 = _randomGoldRatioFunc(vec3(n_out21p0, 0.0).xy, n_out24p0.xy, n_out25p0);
	}


// Output:0
	COLOR.rgb = vec3(n_out26p0);


}
"
graph_offset = Vector2(-68, -29)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(460, 0)
nodes/fragment/21/node = SubResource("111")
nodes/fragment/21/position = Vector2(-180, -100)
nodes/fragment/24/node = SubResource("115")
nodes/fragment/24/position = Vector2(-180, 0)
nodes/fragment/25/node = SubResource("116")
nodes/fragment/25/position = Vector2(-40, 120)
nodes/fragment/26/node = SubResource("117")
nodes/fragment/26/position = Vector2(200, 0)
nodes/fragment/connections = PackedInt32Array(21, 0, 26, 0, 24, 0, 26, 1, 25, 0, 26, 2, 26, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="119"]
shader = SubResource("118")

[sub_resource type="VisualShaderNodeCustom" id="120"]
default_input_values = [1, 0.0, 2, 1.0, 3, -1.0, 4, 1.0]
initialized = true
script = ExtResource("26")

[sub_resource type="VisualShaderNodeTexture" id="121"]
expanded_output_ports = [0]
source = 2

[sub_resource type="VisualShaderNodeFloatConstant" id="122"]

[sub_resource type="VisualShaderNodeFloatConstant" id="123"]
constant = 1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="124"]
constant = 1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="125"]
constant = -1.0

[sub_resource type="VisualShader" id="126"]
code = "shader_type canvas_item;
render_mode blend_mix;



// Remap
vec3 _remapFunc(vec3 _remap_input, vec2 _remap_from, vec2 _remap_to){
	return _remap_to.x + ((_remap_input - _remap_from.x) * (_remap_to.y - _remap_to.x)) / (_remap_from.y - _remap_from.x);
}

void fragment() {
// Input:21
	vec2 n_out21p0 = UV;


// FloatConstant:26
	float n_out26p0 = 0.000000;


// FloatConstant:27
	float n_out27p0 = 1.000000;


// FloatConstant:29
	float n_out29p0 = -1.000000;


// FloatConstant:28
	float n_out28p0 = 1.000000;


	vec3 n_out24p0;
// Remap:24
	{
		n_out24p0 = _remapFunc(vec3(n_out21p0, 0.0), vec2(n_out26p0, n_out27p0), vec2(n_out29p0, n_out28p0));
	}


	vec4 n_out25p0;
// Texture2D:25
	n_out25p0 = texture(TEXTURE, vec2(n_out24p0.xy));
	float n_out25p4 = n_out25p0.a;


// Output:0
	COLOR.rgb = vec3(n_out25p0.xyz);
	COLOR.a = n_out25p4;


}
"
graph_offset = Vector2(35.8955, -116.999)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(700, 20)
nodes/fragment/21/node = SubResource("111")
nodes/fragment/21/position = Vector2(-160, -100)
nodes/fragment/24/node = SubResource("120")
nodes/fragment/24/position = Vector2(200, 0)
nodes/fragment/25/node = SubResource("121")
nodes/fragment/25/position = Vector2(400, 0)
nodes/fragment/26/node = SubResource("122")
nodes/fragment/26/position = Vector2(-20, -20)
nodes/fragment/27/node = SubResource("123")
nodes/fragment/27/position = Vector2(-20, 60)
nodes/fragment/28/node = SubResource("124")
nodes/fragment/28/position = Vector2(-20, 220)
nodes/fragment/29/node = SubResource("125")
nodes/fragment/29/position = Vector2(-20, 140)
nodes/fragment/connections = PackedInt32Array(25, 0, 0, 0, 24, 0, 25, 0, 21, 0, 24, 0, 26, 0, 24, 1, 27, 0, 24, 2, 29, 0, 24, 3, 28, 0, 24, 4, 25, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="127"]
shader = SubResource("126")

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_wq77w"]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_gg36w"]

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_6oew3"]
default_input_values = [0, 1.0, 1, 1.0]
initialized = true
script = ExtResource("16")

[sub_resource type="VisualShader" id="VisualShader_gq6wd"]
code = "shader_type canvas_item;
render_mode blend_mix;




void fragment() {
// FloatConstant:2
	float n_out2p0 = 0.000000;


// FloatConstant:3
	float n_out3p0 = 0.000000;


	float n_out4p0;
// SinTIME:4
	{
		n_out4p0 = n_out3p0 * sin(n_out2p0 * TIME);
	}


// Output:0
	COLOR.rgb = vec3(n_out4p0);


}
"
graph_offset = Vector2(-65.6183, 45.7513)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 200)
nodes/fragment/2/node = SubResource("VisualShaderNodeFloatConstant_wq77w")
nodes/fragment/2/position = Vector2(0, 160)
nodes/fragment/3/node = SubResource("VisualShaderNodeFloatConstant_gg36w")
nodes/fragment/3/position = Vector2(0, 260)
nodes/fragment/4/node = SubResource("VisualShaderNodeCustom_6oew3")
nodes/fragment/4/position = Vector2(220, 200)
nodes/fragment/connections = PackedInt32Array(4, 0, 0, 0, 3, 0, 4, 1, 2, 0, 4, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_bvkyk"]
shader = SubResource("VisualShader_gq6wd")

[sub_resource type="VisualShaderNodeCustom" id="128"]
default_input_values = [0, 1.0, 1, 1.0]
initialized = true
script = ExtResource("16")

[sub_resource type="VisualShaderNodeFloatConstant" id="129"]
constant = 1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="130"]
constant = 1.0

[sub_resource type="VisualShader" id="131"]
code = "shader_type canvas_item;
render_mode blend_mix;




void fragment() {
// FloatConstant:27
	float n_out27p0 = 1.000000;


// FloatConstant:28
	float n_out28p0 = 1.000000;


	float n_out26p0;
// SinTIME:26
	{
		n_out26p0 = n_out28p0 * sin(n_out27p0 * TIME);
	}


// Output:0
	COLOR.rgb = vec3(n_out26p0);


}
"
graph_offset = Vector2(198, -64)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(600, 0)
nodes/fragment/26/node = SubResource("128")
nodes/fragment/26/position = Vector2(340, 0)
nodes/fragment/27/node = SubResource("129")
nodes/fragment/27/position = Vector2(100, -40)
nodes/fragment/28/node = SubResource("130")
nodes/fragment/28/position = Vector2(100, 60)
nodes/fragment/connections = PackedInt32Array(26, 0, 0, 0, 28, 0, 26, 1, 27, 0, 26, 0)

[sub_resource type="ShaderMaterial" id="132"]
shader = SubResource("131")

[sub_resource type="VisualShaderNodeCustom" id="133"]
output_port_for_preview = 0
default_input_values = [0, 1.0, 1, 0.0]
initialized = true
script = ExtResource("25")

[sub_resource type="VisualShaderNodeFloatConstant" id="134"]
constant = 1.0

[sub_resource type="VisualShaderNodeInput" id="135"]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_wkq5u"]
output_port_for_preview = 0
default_input_values = [0, 0.0, 1, 0.0, 2, 1.0]

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_b8o5j"]

[sub_resource type="VisualShader" id="136"]
code = "shader_type canvas_item;
render_mode blend_mix;



// vec2Compose
vec2 _vec2ComposeFunc(float _vec2_length, float _vec2_angl_rad){
	return vec2(cos(_vec2_angl_rad), sin(_vec2_angl_rad)) * _vec2_length;
}

void fragment() {
// FloatConstant:3
	float n_out3p0 = 1.000000;


// Input:4
	float n_out4p0 = TIME;


	vec3 n_out2p0;
// vec2Compose:2
	{
		n_out2p0.xy = _vec2ComposeFunc(n_out3p0, n_out4p0);
	}


// VectorDecompose:7
	float n_out7p0 = n_out2p0.x;
	float n_out7p1 = n_out2p0.y;
	float n_out7p2 = n_out2p0.z;


// VectorCompose:6
	float n_in6p2 = 1.00000;
	vec3 n_out6p0 = vec3(n_out7p0, n_out7p1, n_in6p2);


// Output:0
	COLOR.rgb = n_out6p0;


}
"
graph_offset = Vector2(503, -99)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1120, 140)
nodes/fragment/2/node = SubResource("133")
nodes/fragment/2/position = Vector2(340, 0)
nodes/fragment/3/node = SubResource("134")
nodes/fragment/3/position = Vector2(120, -40)
nodes/fragment/4/node = SubResource("135")
nodes/fragment/4/position = Vector2(40, 100)
nodes/fragment/6/node = SubResource("VisualShaderNodeVectorCompose_wkq5u")
nodes/fragment/6/position = Vector2(880, 100)
nodes/fragment/7/node = SubResource("VisualShaderNodeVectorDecompose_b8o5j")
nodes/fragment/7/position = Vector2(640, 100)
nodes/fragment/connections = PackedInt32Array(4, 0, 2, 1, 3, 0, 2, 0, 2, 0, 7, 0, 7, 0, 6, 0, 7, 1, 6, 1, 6, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="137"]
shader = SubResource("136")

[sub_resource type="VisualShaderNodeCustom" id="138"]
default_input_values = [2, -1.0, 3, 0.5]
initialized = true
script = ExtResource("27")

[sub_resource type="VisualShaderNodeInput" id="139"]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id="140"]
input_name = "texture"

[sub_resource type="VisualShaderNodeFloatConstant" id="141"]
constant = -1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="142"]
constant = 1.0

[sub_resource type="VisualShader" id="143"]
code = "shader_type canvas_item;
render_mode blend_mix;



// BlurBasic
vec4 _blur9sampleFunc(sampler2D _blur9sample_sample, vec2 _blur9sample_uv, float _blur9sample_lod, float _blur9sample_radius){
	vec4 _c01r_b1ur = vec4(0.0);
	if (_blur9sample_lod < 0.0){
		_c01r_b1ur = texture(_blur9sample_sample, _blur9sample_uv);
		_c01r_b1ur += texture(_blur9sample_sample, _blur9sample_uv + vec2(0, - _blur9sample_radius) * 0.01);
		_c01r_b1ur += texture(_blur9sample_sample, _blur9sample_uv + vec2(0, _blur9sample_radius) * 0.01);
		_c01r_b1ur += texture(_blur9sample_sample, _blur9sample_uv + vec2(- _blur9sample_radius, 0) * 0.01);
		_c01r_b1ur += texture(_blur9sample_sample, _blur9sample_uv + vec2(_blur9sample_radius, 0) * 0.01);
		_c01r_b1ur += texture(_blur9sample_sample, _blur9sample_uv + vec2(- _blur9sample_radius, - _blur9sample_radius) * 0.01);
		_c01r_b1ur += texture(_blur9sample_sample, _blur9sample_uv + vec2(- _blur9sample_radius, _blur9sample_radius) * 0.01);
		_c01r_b1ur += texture(_blur9sample_sample, _blur9sample_uv + vec2(_blur9sample_radius, _blur9sample_radius) * 0.01);
		_c01r_b1ur += texture(_blur9sample_sample, _blur9sample_uv + vec2(_blur9sample_radius, -_blur9sample_radius) * 0.01);
	}else{
		_c01r_b1ur = textureLod(_blur9sample_sample, _blur9sample_uv, _blur9sample_lod);
		_c01r_b1ur += textureLod(_blur9sample_sample, _blur9sample_uv + vec2(0, - _blur9sample_radius) * 0.01, _blur9sample_lod);
		_c01r_b1ur += textureLod(_blur9sample_sample, _blur9sample_uv + vec2(0, _blur9sample_radius) * 0.01, _blur9sample_lod);
		_c01r_b1ur += textureLod(_blur9sample_sample, _blur9sample_uv + vec2(- _blur9sample_radius, 0) * 0.01, _blur9sample_lod);
		_c01r_b1ur += textureLod(_blur9sample_sample, _blur9sample_uv + vec2(_blur9sample_radius, 0) * 0.01, _blur9sample_lod);
		_c01r_b1ur += textureLod(_blur9sample_sample, _blur9sample_uv + vec2(- _blur9sample_radius, - _blur9sample_radius) * 0.01, _blur9sample_lod);
		_c01r_b1ur += textureLod(_blur9sample_sample, _blur9sample_uv + vec2(- _blur9sample_radius, _blur9sample_radius) * 0.01, _blur9sample_lod);
		_c01r_b1ur += textureLod(_blur9sample_sample, _blur9sample_uv + vec2(_blur9sample_radius, _blur9sample_radius) * 0.01, _blur9sample_lod);
		_c01r_b1ur += textureLod(_blur9sample_sample, _blur9sample_uv + vec2(_blur9sample_radius, -_blur9sample_radius) * 0.01, _blur9sample_lod);
	}
	_c01r_b1ur /= 9.0;
	return _c01r_b1ur;
}

void fragment() {
// Input:6
	vec2 n_out6p0 = UV;


// FloatConstant:8
	float n_out8p0 = -1.000000;


// FloatConstant:9
	float n_out9p0 = 1.000000;


	vec3 n_out5p0;
	float n_out5p1;
// BlurBasic:5
	{
		vec4 n_out5p0n_out5p1 = _blur9sampleFunc(TEXTURE, vec3(n_out6p0, 0.0).xy, n_out8p0, n_out9p0);
		n_out5p0 = n_out5p0n_out5p1.rgb;
		n_out5p1 = n_out5p0n_out5p1.a;
	}


// Output:0
	COLOR.rgb = n_out5p0;
	COLOR.a = n_out5p1;


}
"
graph_offset = Vector2(-115, -78)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(260, 0)
nodes/fragment/5/node = SubResource("138")
nodes/fragment/5/position = Vector2(0, 0)
nodes/fragment/6/node = SubResource("139")
nodes/fragment/6/position = Vector2(-360, -40)
nodes/fragment/7/node = SubResource("140")
nodes/fragment/7/position = Vector2(-320, -120)
nodes/fragment/8/node = SubResource("141")
nodes/fragment/8/position = Vector2(-220, 40)
nodes/fragment/9/node = SubResource("142")
nodes/fragment/9/position = Vector2(-220, 120)
nodes/fragment/connections = PackedInt32Array(6, 0, 5, 1, 7, 0, 5, 0, 5, 1, 0, 1, 8, 0, 5, 2, 9, 0, 5, 3, 5, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="144"]
shader = SubResource("143")

[sub_resource type="VisualShaderNodeFloatConstant" id="145"]
constant = 5.0

[sub_resource type="VisualShaderNodeFloatConstant" id="146"]
constant = 0.003

[sub_resource type="VisualShaderNodeFloatConstant" id="147"]
constant = -1.0

[sub_resource type="VisualShaderNodeCustom" id="148"]
default_input_values = [2, -1.0, 3, 5, 4, 0.001]
initialized = true
script = ExtResource("28")

[sub_resource type="VisualShader" id="149"]
code = "shader_type canvas_item;
render_mode blend_mix;



// BlurCustom
vec4 _blurWithAmountFunc(sampler2D _tex_blur_cst, vec2 _uv_blur_cst, float _l0d_blur_cst, int _amnt_blur_cst, float _0ffst_blur_cst) {
	vec4 _c0l_blur_cst = vec4(0, 0, 0, 0);
	
	for(int x = -_amnt_blur_cst; x <= _amnt_blur_cst; x++) {
		for(int y = -_amnt_blur_cst; y <= _amnt_blur_cst; y++) {
			vec2 _c00rd_blur_cst = _uv_blur_cst + vec2(float(x), float(y)) * _0ffst_blur_cst;
			if (_l0d_blur_cst < 0.0){
				_c0l_blur_cst += texture(_tex_blur_cst, _c00rd_blur_cst);
			}else{
				_c0l_blur_cst += textureLod(_tex_blur_cst, _c00rd_blur_cst, _l0d_blur_cst);
			}
		}
	}
	int _nmb_ne1ghb0urs_blur_cst = (_amnt_blur_cst * 2 + 1) * (_amnt_blur_cst * 2 + 1);
	_c0l_blur_cst /= float(_nmb_ne1ghb0urs_blur_cst);
	return _c0l_blur_cst;
}

void fragment() {
// Input:6
	vec2 n_out6p0 = UV;


// FloatConstant:12
	float n_out12p0 = -1.000000;


// FloatConstant:10
	float n_out10p0 = 5.000000;


// FloatConstant:11
	float n_out11p0 = 0.003000;


	vec3 n_out8p0;
	float n_out8p1;
// BlurCustom:8
	{
		vec4 n_out8p0n_out8p1 = _blurWithAmountFunc(TEXTURE, vec3(n_out6p0, 0.0).xy, n_out12p0, int(n_out10p0), n_out11p0);
		n_out8p0 = n_out8p0n_out8p1.rgb;
		n_out8p1 = n_out8p0n_out8p1.a;
	}


// Output:0
	COLOR.rgb = n_out8p0;
	COLOR.a = n_out8p1;


}
"
graph_offset = Vector2(-299.913, -345)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(240, -200)
nodes/fragment/6/node = SubResource("139")
nodes/fragment/6/position = Vector2(-380, -260)
nodes/fragment/7/node = SubResource("140")
nodes/fragment/7/position = Vector2(-340, -340)
nodes/fragment/8/node = SubResource("148")
nodes/fragment/8/position = Vector2(0, -200)
nodes/fragment/10/node = SubResource("145")
nodes/fragment/10/position = Vector2(-240, -100)
nodes/fragment/11/node = SubResource("146")
nodes/fragment/11/position = Vector2(-240, -20)
nodes/fragment/12/node = SubResource("147")
nodes/fragment/12/position = Vector2(-240, -180)
nodes/fragment/connections = PackedInt32Array(8, 1, 0, 1, 7, 0, 8, 0, 6, 0, 8, 1, 12, 0, 8, 2, 10, 0, 8, 3, 11, 0, 8, 4, 8, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="150"]
shader = SubResource("149")

[sub_resource type="VisualShaderNodeCustom" id="151"]
default_input_values = [2, -1.0, 3, Vector3(0.5, 0.5, 0), 4, 20.0, 5, 0.005]
initialized = true
script = ExtResource("29")

[sub_resource type="VisualShaderNodeFloatConstant" id="152"]
constant = 0.1

[sub_resource type="VisualShaderNodeFloatConstant" id="153"]
constant = -1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="154"]
constant = 20.0

[sub_resource type="VisualShaderNodeVec3Constant" id="155"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShaderNodeCustom" id="156"]
default_input_values = [0, 1.0, 1, 1.0]
initialized = true
script = ExtResource("16")

[sub_resource type="VisualShader" id="157"]
code = "shader_type canvas_item;
render_mode blend_mix;



// ZoomBlur
vec4 _zoomBlurFunc(sampler2D _tex_zoom_blur, vec2 _uv_zoom_blur, int _amount_zoom_blur, vec2 _center_zoom, float _lgt_zoom_blur, float _lod_zoom_blur){
	vec4 _col_zoom_blur;
	if (_lod_zoom_blur < 0.0){
		_col_zoom_blur = texture(_tex_zoom_blur, _uv_zoom_blur);
		for (int i = 1; i <= _amount_zoom_blur; i++){
			float _temp_d_zoom_blur = _lgt_zoom_blur * float(i);
			vec2 px = _uv_zoom_blur * (1.0 - _temp_d_zoom_blur) + _center_zoom * _temp_d_zoom_blur;
			_col_zoom_blur += texture(_tex_zoom_blur, px);
		}
	}else{
		_col_zoom_blur = textureLod(_tex_zoom_blur, _uv_zoom_blur, _lod_zoom_blur);
		for (int i = 1; i <= _amount_zoom_blur; i++){
			float _temp_d_zoom_blur = _lgt_zoom_blur * float(i);
			vec2 px = _uv_zoom_blur * (1.0 - _temp_d_zoom_blur) + _center_zoom * _temp_d_zoom_blur;
			_col_zoom_blur += textureLod(_tex_zoom_blur, px, _lod_zoom_blur);
		}
	}
	_col_zoom_blur = _col_zoom_blur / float(_amount_zoom_blur + 1);
	return _col_zoom_blur;
}

void fragment() {
// Input:6
	vec2 n_out6p0 = UV;


// FloatConstant:13
	float n_out13p0 = -1.000000;


// Vector3Constant:15
	vec3 n_out15p0 = vec3(0.500000, 0.500000, 0.000000);


// FloatConstant:14
	float n_out14p0 = 20.000000;


// FloatConstant:12
	float n_out12p0 = 0.100000;


	float n_out9p0;
// SinTIME:9
	float n_in9p0 = 1.00000;
	{
		n_out9p0 = n_out12p0 * sin(n_in9p0 * TIME);
	}


	vec3 n_out11p0;
	float n_out11p1;
// ZoomBlur:11
	{
		vec4 n_out11p0n_out11p1 = _zoomBlurFunc(TEXTURE, vec3(n_out6p0, 0.0).xy, int(n_out14p0), n_out15p0.xy, n_out9p0, n_out13p0);
		n_out11p0 = n_out11p0n_out11p1.rgb;
		n_out11p1 = n_out11p0n_out11p1.a;
	}


// Output:0
	COLOR.rgb = n_out11p0;
	COLOR.a = n_out11p1;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(260, 0)
nodes/fragment/6/node = SubResource("139")
nodes/fragment/6/position = Vector2(-400, -100)
nodes/fragment/7/node = SubResource("140")
nodes/fragment/7/position = Vector2(-360, -180)
nodes/fragment/9/node = SubResource("156")
nodes/fragment/9/position = Vector2(-260, 240)
nodes/fragment/11/node = SubResource("151")
nodes/fragment/11/position = Vector2(0, 0)
nodes/fragment/12/node = SubResource("152")
nodes/fragment/12/position = Vector2(-520, 340)
nodes/fragment/13/node = SubResource("153")
nodes/fragment/13/position = Vector2(-260, -20)
nodes/fragment/14/node = SubResource("154")
nodes/fragment/14/position = Vector2(-260, 160)
nodes/fragment/15/node = SubResource("155")
nodes/fragment/15/position = Vector2(-400, 60)
nodes/fragment/connections = PackedInt32Array(6, 0, 11, 1, 12, 0, 9, 1, 9, 0, 11, 5, 13, 0, 11, 2, 14, 0, 11, 4, 7, 0, 11, 0, 11, 1, 0, 1, 15, 0, 11, 3, 11, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="158"]
shader = SubResource("157")

[sub_resource type="VisualShaderNodeCustom" id="159"]
default_input_values = [2, -1.0, 3, 1.0, 4, 1.0, 5, 1.0, 6, Vector3(1, 1, 1), 7, 1.0]
initialized = true
script = ExtResource("31")

[sub_resource type="VisualShaderNodeColorConstant" id="160"]
constant = Color(1, 0, 0, 1)

[sub_resource type="VisualShaderNodeFloatConstant" id="161"]
constant = -1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="162"]
constant = 1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="163"]
constant = 1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="164"]
constant = 1.0

[sub_resource type="VisualShader" id="165"]
code = "shader_type canvas_item;
render_mode blend_mix;



// GlowEmpty
vec4 _inoutGlowEmptyFunc(sampler2D _samp_inglowEmpt, vec2 _uv_inglowEmpt, float _lod_glowEmpt, float _rad_inout_Empty,
						float _intens_inner_glowEmpt, float _intens_outer_glowEmpt, vec4 _col_inglowEmpt){
	_rad_inout_Empty = abs(_rad_inout_Empty);
	
	vec4 _color_orig_glow = vec4(0.0);
	float _alpha_glow_inv = 0.0;
	float _alpha_glow_blured = 0.0;
	int glow_amount = 3;
	
	if (_lod_glowEmpt < 0.0)
		_color_orig_glow = texture(_samp_inglowEmpt, _uv_inglowEmpt);
	else
		_color_orig_glow = textureLod(_samp_inglowEmpt, _uv_inglowEmpt, _lod_glowEmpt);
	
	glow_amount = int(min(_rad_inout_Empty + 7.0, 14.0));
	for(int x = - glow_amount; x <= glow_amount; x++) {
		for(int y = - glow_amount; y <= glow_amount; y++) {
			vec2 _coord_blur_cst = _uv_inglowEmpt + vec2(float(x), float(y)) * _rad_inout_Empty * 0.01;
			_alpha_glow_blured += textureLod(_samp_inglowEmpt, _coord_blur_cst, 0.0).a;
		}
	}
	int _nmb_neighbours_blur_cst = (glow_amount * 2 + 1) * (glow_amount * 2 + 1);
	_alpha_glow_blured /= float(_nmb_neighbours_blur_cst);
	
	_alpha_glow_inv = _alpha_glow_blured;
	_alpha_glow_inv *= (1.0 - _color_orig_glow.a);
	
	float in_alpha_glow_inv = 1.0 - _alpha_glow_blured;
	in_alpha_glow_inv *= _color_orig_glow.a;
	
	if (_alpha_glow_inv > 0.0)
		_alpha_glow_inv *= (_intens_outer_glowEmpt + 1.0);
	
	if (in_alpha_glow_inv > 0.0)
		in_alpha_glow_inv *= (_intens_inner_glowEmpt + 1.0);
	
	return vec4(_col_inglowEmpt.rgb, (_alpha_glow_inv + in_alpha_glow_inv) * _col_inglowEmpt.a);
}

void fragment() {
// Input:6
	vec2 n_out6p0 = UV;


// FloatConstant:15
	float n_out15p0 = -1.000000;


// FloatConstant:16
	float n_out16p0 = 1.000000;


// FloatConstant:17
	float n_out17p0 = 1.000000;


// FloatConstant:18
	float n_out18p0 = 1.000000;


// ColorConstant:14
	vec4 n_out14p0 = vec4(1.000000, 0.000000, 0.000000, 1.000000);


	vec3 n_out13p0;
	float n_out13p1;
// GlowEmpty:13
	float n_in13p7 = 1.00000;
	{
		vec4 n_out13p0n_out13p1 = _inoutGlowEmptyFunc(TEXTURE, vec3(n_out6p0, 0.0).xy, n_out15p0, n_out16p0, n_out17p0, n_out18p0, vec4(vec3(n_out14p0.xyz), n_in13p7));
		n_out13p0 = n_out13p0n_out13p1.rgb;
		n_out13p1 = n_out13p0n_out13p1.a;
	}


// Output:0
	COLOR.rgb = n_out13p0;
	COLOR.a = n_out13p1;


}
"
graph_offset = Vector2(-575.563, -162.379)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(200, 0)
nodes/fragment/6/node = SubResource("139")
nodes/fragment/6/position = Vector2(-420, -100)
nodes/fragment/7/node = SubResource("140")
nodes/fragment/7/position = Vector2(-380, -180)
nodes/fragment/13/node = SubResource("159")
nodes/fragment/13/position = Vector2(-40, 0)
nodes/fragment/14/node = SubResource("160")
nodes/fragment/14/position = Vector2(-240, 300)
nodes/fragment/15/node = SubResource("161")
nodes/fragment/15/position = Vector2(-280, -20)
nodes/fragment/16/node = SubResource("162")
nodes/fragment/16/position = Vector2(-280, 60)
nodes/fragment/17/node = SubResource("163")
nodes/fragment/17/position = Vector2(-280, 140)
nodes/fragment/18/node = SubResource("164")
nodes/fragment/18/position = Vector2(-280, 220)
nodes/fragment/connections = PackedInt32Array(13, 1, 0, 1, 7, 0, 13, 0, 6, 0, 13, 1, 14, 0, 13, 6, 15, 0, 13, 2, 16, 0, 13, 3, 17, 0, 13, 4, 18, 0, 13, 5, 13, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="166"]
shader = SubResource("165")

[sub_resource type="VisualShaderNodeCustom" id="167"]
default_input_values = [2, -1.0, 3, 1.0, 4, 1.0, 5, Vector3(1, 1, 1), 6, 1.0]
initialized = true
script = ExtResource("30")

[sub_resource type="VisualShaderNodeFloatConstant" id="168"]
constant = -1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="169"]
constant = 1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="170"]
constant = 1.0

[sub_resource type="VisualShader" id="171"]
code = "shader_type canvas_item;
render_mode blend_mix;



// InnerGlow
vec4 _innerGlowFunc(sampler2D _samp_inglow, vec2 _uv_inglow, float _l0d_inglow, float _rad_inglow, float _intns_inglow, vec4 _col_inglow){
	_rad_inglow = abs(_rad_inglow);
	
	vec4 _color_inglow = vec4(0.0);
	float _alpha_inv = 0.0;
	float _alpha_inglow_b1 = 0.0;
	int _amount_inglow = 3;
	
	if (_l0d_inglow < 0.0)
		_color_inglow = texture(_samp_inglow, _uv_inglow);
	else
		_color_inglow = textureLod(_samp_inglow, _uv_inglow, _l0d_inglow);
	
	_amount_inglow = int(min(_rad_inglow + 7.0, 14.0));
	for(int x = - _amount_inglow; x <= _amount_inglow; x++) {
		for(int y = - _amount_inglow; y <= _amount_inglow; y++) {
			vec2 _coord_blur_cst = _uv_inglow + vec2(float(x), float(y)) * _rad_inglow * 0.01;
			_alpha_inglow_b1 += textureLod(_samp_inglow, _coord_blur_cst, 0.0).a;
		}
	}
	int _nmb_neighbours_blur_cst = (_amount_inglow * 2 + 1) * (_amount_inglow * 2 + 1);
	_alpha_inglow_b1 /= float(_nmb_neighbours_blur_cst);
	
	_alpha_inv = 1.0 - _alpha_inglow_b1; // inversion
	_alpha_inv *= _color_inglow.a; // masking
	
	if (_alpha_inv > 0.0)
		_alpha_inv *= (_intns_inglow + 1.0);
	
	return mix(_color_inglow, _col_inglow, _alpha_inv * _col_inglow.a);
}

void fragment() {
// Input:6
	vec2 n_out6p0 = UV;


// FloatConstant:16
	float n_out16p0 = -1.000000;


// FloatConstant:17
	float n_out17p0 = 1.000000;


// FloatConstant:18
	float n_out18p0 = 1.000000;


// ColorConstant:14
	vec4 n_out14p0 = vec4(1.000000, 0.000000, 0.000000, 1.000000);


	vec3 n_out15p0;
	float n_out15p1;
// InnerGlow:15
	float n_in15p6 = 1.00000;
	{
		vec4 n_out15p0n_out15p1 = _innerGlowFunc(TEXTURE, vec3(n_out6p0, 0.0).xy, n_out16p0, n_out17p0, n_out18p0, vec4(vec3(n_out14p0.xyz), n_in15p6));
		n_out15p0 = n_out15p0n_out15p1.rgb;
		n_out15p1 = n_out15p0n_out15p1.a;
	}


// Output:0
	COLOR.rgb = n_out15p0;
	COLOR.a = n_out15p1;


}
"
graph_offset = Vector2(-56, -47)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(200, 0)
nodes/fragment/6/node = SubResource("139")
nodes/fragment/6/position = Vector2(-420, -80)
nodes/fragment/7/node = SubResource("140")
nodes/fragment/7/position = Vector2(-380, -160)
nodes/fragment/14/node = SubResource("160")
nodes/fragment/14/position = Vector2(-220, 240)
nodes/fragment/15/node = SubResource("167")
nodes/fragment/15/position = Vector2(-40, 0)
nodes/fragment/16/node = SubResource("168")
nodes/fragment/16/position = Vector2(-280, 0)
nodes/fragment/17/node = SubResource("169")
nodes/fragment/17/position = Vector2(-280, 80)
nodes/fragment/18/node = SubResource("170")
nodes/fragment/18/position = Vector2(-280, 160)
nodes/fragment/connections = PackedInt32Array(7, 0, 15, 0, 6, 0, 15, 1, 14, 0, 15, 5, 16, 0, 15, 2, 17, 0, 15, 3, 18, 0, 15, 4, 15, 0, 0, 0, 15, 1, 0, 1)

[sub_resource type="ShaderMaterial" id="172"]
shader = SubResource("171")

[sub_resource type="VisualShaderNodeCustom" id="173"]
default_input_values = [2, -1.0, 3, 1.0, 4, 1.0, 5, Vector3(1, 1, 1), 6, 1.0]
initialized = true
script = ExtResource("32")

[sub_resource type="VisualShaderNodeInput" id="174"]
input_name = "texture"

[sub_resource type="VisualShaderNodeInput" id="175"]
input_name = "uv"

[sub_resource type="VisualShaderNodeColorConstant" id="176"]
constant = Color(1, 0, 0, 1)

[sub_resource type="VisualShaderNodeFloatConstant" id="177"]
constant = -1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="178"]
constant = 1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="179"]
constant = 1.0

[sub_resource type="VisualShader" id="180"]
code = "shader_type canvas_item;
render_mode blend_mix;



// InnerGlowEmpty
vec4 _innerGlowEmptyFunc(sampler2D _samp_inglowEmpt, vec2 _uv_inglowEmpt, float _lod_inglowEmpt, float _rad_inglowEmpt, float _intns_inglowEmpt, vec4 _col_inglowEmpt){
	_rad_inglowEmpt = abs(_rad_inglowEmpt);
	
	vec4 _color_inglow = vec4(0.0);
	float _alpha_inglow_inv = 0.0;
	float _alpha_inglow_b1 = 0.0;
	int _amount_inglow = 3;
	
	if (_lod_inglowEmpt < 0.0)
		_color_inglow = texture(_samp_inglowEmpt, _uv_inglowEmpt);
	else
		_color_inglow = textureLod(_samp_inglowEmpt, _uv_inglowEmpt, _lod_inglowEmpt);
	
	_amount_inglow = int(min(_rad_inglowEmpt + 7.0, 14.0));
	for(int x = - _amount_inglow; x <= _amount_inglow; x++) {
		for(int y = - _amount_inglow; y <= _amount_inglow; y++) {
			vec2 _coord_blur_cst = _uv_inglowEmpt + vec2(float(x), float(y)) * _rad_inglowEmpt * 0.01;
			_alpha_inglow_b1 += textureLod(_samp_inglowEmpt, _coord_blur_cst, 0.0).a;
		}
	}
	int _nmb_neighbours_blur_cst = (_amount_inglow * 2 + 1) * (_amount_inglow * 2 + 1);
	_alpha_inglow_b1 /= float(_nmb_neighbours_blur_cst);
	
	_alpha_inglow_inv = 1.0 - _alpha_inglow_b1; // inversion
	_alpha_inglow_inv *= _color_inglow.a; // masking
	
	if (_alpha_inglow_inv > 0.0)
		_alpha_inglow_inv *= (_intns_inglowEmpt + 1.0);
	
	return vec4(_col_inglowEmpt.rgb, _alpha_inglow_inv * _col_inglowEmpt.a);
}

void fragment() {
// Input:4
	vec2 n_out4p0 = UV;


// FloatConstant:6
	float n_out6p0 = -1.000000;


// FloatConstant:7
	float n_out7p0 = 1.000000;


// FloatConstant:8
	float n_out8p0 = 1.000000;


// ColorConstant:5
	vec4 n_out5p0 = vec4(1.000000, 0.000000, 0.000000, 1.000000);


	vec3 n_out2p0;
	float n_out2p1;
// InnerGlowEmpty:2
	float n_in2p6 = 1.00000;
	{
		vec4 n_out2p0n_out2p1 = _innerGlowEmptyFunc(TEXTURE, vec3(n_out4p0, 0.0).xy, n_out6p0, n_out7p0, n_out8p0, vec4(vec3(n_out5p0.xyz), n_in2p6));
		n_out2p0 = n_out2p0n_out2p1.rgb;
		n_out2p1 = n_out2p0n_out2p1.a;
	}


// Output:0
	COLOR.rgb = n_out2p0;
	COLOR.a = n_out2p1;


}
"
graph_offset = Vector2(-54, 27)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(400, 200)
nodes/fragment/2/node = SubResource("173")
nodes/fragment/2/position = Vector2(160, 200)
nodes/fragment/3/node = SubResource("174")
nodes/fragment/3/position = Vector2(-160, 60)
nodes/fragment/4/node = SubResource("175")
nodes/fragment/4/position = Vector2(-200, 140)
nodes/fragment/5/node = SubResource("176")
nodes/fragment/5/position = Vector2(-20, 460)
nodes/fragment/6/node = SubResource("177")
nodes/fragment/6/position = Vector2(-60, 220)
nodes/fragment/7/node = SubResource("178")
nodes/fragment/7/position = Vector2(-60, 300)
nodes/fragment/8/node = SubResource("179")
nodes/fragment/8/position = Vector2(-60, 380)
nodes/fragment/connections = PackedInt32Array(2, 1, 0, 1, 4, 0, 2, 1, 3, 0, 2, 0, 5, 0, 2, 5, 6, 0, 2, 2, 8, 0, 2, 4, 7, 0, 2, 3, 2, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="181"]
shader = SubResource("180")

[sub_resource type="VisualShaderNodeFloatConstant" id="182"]
constant = 1.0

[sub_resource type="VisualShaderNodeCustom" id="183"]
default_input_values = [2, -1.0, 3, 1.0, 4, 1.0, 5, Vector3(1, 1, 1), 6, 1.0]
initialized = true
script = ExtResource("33")

[sub_resource type="VisualShaderNodeColorConstant" id="184"]
constant = Color(1, 0, 0, 1)

[sub_resource type="VisualShaderNodeFloatConstant" id="185"]
constant = -1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="186"]
constant = 1.0

[sub_resource type="VisualShader" id="187"]
code = "shader_type canvas_item;
render_mode blend_mix;



// OuterGlow
vec4 _outerGlowFunc(sampler2D _samp_inglow, vec2 _uv_inglow, float _lod_inglow, float _rad_inglow, float _intns_inglow, vec4 _col_inglow){
	_rad_inglow = abs(_rad_inglow);
	
	vec4 _color_inglow = vec4(0.0);
	float _alpha_inv = 0.0;
	float _alpha_inglow_b1 = 0.0;
	int _amount_inglow = 3;
	
	if (_lod_inglow < 0.0)
		_color_inglow = texture(_samp_inglow, _uv_inglow);
	else
		_color_inglow = textureLod(_samp_inglow, _uv_inglow, _lod_inglow);
	
	_amount_inglow = int(min(_rad_inglow + 7.0, 14.0));
	for(int x = - _amount_inglow; x <= _amount_inglow; x++) {
		for(int y = - _amount_inglow; y <= _amount_inglow; y++) {
			vec2 _coord_blur_cst = _uv_inglow + vec2(float(x), float(y)) * _rad_inglow * 0.01;
			_alpha_inglow_b1 += textureLod(_samp_inglow, _coord_blur_cst, 0.0).a;
		}
	}
	int _nmb_neighbours_blur_cst = (_amount_inglow * 2 + 1) * (_amount_inglow * 2 + 1);
	_alpha_inglow_b1 /= float(_nmb_neighbours_blur_cst);
	
	_alpha_inv = _alpha_inglow_b1; // inversion
	_alpha_inv *= (1.0 - _color_inglow.a); // masking
	
	if (_alpha_inv > 0.0)
		_alpha_inv *= (_intns_inglow + 1.0);
	
	vec4 _glow_col_result = vec4(_col_inglow.rgb, _alpha_inv * _col_inglow.a);
	return mix(_glow_col_result, _color_inglow, _color_inglow.a);
}

void fragment() {
// Input:4
	vec2 n_out4p0 = UV;


// FloatConstant:8
	float n_out8p0 = -1.000000;


// FloatConstant:9
	float n_out9p0 = 1.000000;


// FloatConstant:10
	float n_out10p0 = 1.000000;


// ColorConstant:7
	vec4 n_out7p0 = vec4(1.000000, 0.000000, 0.000000, 1.000000);


	vec3 n_out6p0;
	float n_out6p1;
// OuterGlow:6
	float n_in6p6 = 1.00000;
	{
		vec4 n_out6p0n_out6p1 = _outerGlowFunc(TEXTURE, vec3(n_out4p0, 0.0).xy, n_out8p0, n_out9p0, n_out10p0, vec4(vec3(n_out7p0.xyz), n_in6p6));
		n_out6p0 = n_out6p0n_out6p1.rgb;
		n_out6p1 = n_out6p0n_out6p1.a;
	}


// Output:0
	COLOR.rgb = n_out6p0;
	COLOR.a = n_out6p1;


}
"
graph_offset = Vector2(-422, 18)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(400, 200)
nodes/fragment/3/node = SubResource("174")
nodes/fragment/3/position = Vector2(-180, 60)
nodes/fragment/4/node = SubResource("175")
nodes/fragment/4/position = Vector2(-220, 140)
nodes/fragment/6/node = SubResource("183")
nodes/fragment/6/position = Vector2(160, 200)
nodes/fragment/7/node = SubResource("184")
nodes/fragment/7/position = Vector2(-80, 460)
nodes/fragment/8/node = SubResource("185")
nodes/fragment/8/position = Vector2(-80, 220)
nodes/fragment/9/node = SubResource("186")
nodes/fragment/9/position = Vector2(-80, 300)
nodes/fragment/10/node = SubResource("182")
nodes/fragment/10/position = Vector2(-80, 380)
nodes/fragment/connections = PackedInt32Array(6, 1, 0, 1, 3, 0, 6, 0, 4, 0, 6, 1, 7, 0, 6, 5, 8, 0, 6, 2, 9, 0, 6, 3, 10, 0, 6, 4, 6, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="188"]
shader = SubResource("187")

[sub_resource type="VisualShaderNodeFloatConstant" id="189"]
constant = -1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="190"]
constant = 1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="191"]
constant = 1.0

[sub_resource type="VisualShaderNodeCustom" id="192"]
default_input_values = [2, -1.0, 3, 1.0, 4, 1.0, 5, Vector3(1, 1, 1), 6, 1.0]
initialized = true
script = ExtResource("34")

[sub_resource type="VisualShaderNodeColorConstant" id="193"]
constant = Color(1, 0, 0, 1)

[sub_resource type="VisualShader" id="194"]
code = "shader_type canvas_item;
render_mode blend_mix;



// OuterGlowEmpty
vec4 _outerGlowEmptyFunc(sampler2D _samp_inglowEmpt, vec2 _uv_inglowEmpt, float _lod_inglowEmpt, float _rad_inglowEmpt, float _intns_inglowEmpt, vec4 _col_inglowEmpt){
	_rad_inglowEmpt = abs(_rad_inglowEmpt);
	
	vec4 _color_inglow = vec4(0.0);
	float _alpha_inglow_inv = 0.0;
	float _alpha_inglow_b1 = 0.0;
	int _amount_inglow = 3;
	
	if (_lod_inglowEmpt < 0.0)
		_color_inglow = texture(_samp_inglowEmpt, _uv_inglowEmpt);
	else
		_color_inglow = textureLod(_samp_inglowEmpt, _uv_inglowEmpt, _lod_inglowEmpt);
	
	_amount_inglow = int(min(_rad_inglowEmpt + 7.0, 14.0));
	for(int x = - _amount_inglow; x <= _amount_inglow; x++) {
		for(int y = - _amount_inglow; y <= _amount_inglow; y++) {
			vec2 _coord_blur_cst = _uv_inglowEmpt + vec2(float(x), float(y)) * _rad_inglowEmpt * 0.01;
			_alpha_inglow_b1 += textureLod(_samp_inglowEmpt, _coord_blur_cst, 0.0).a;
		}
	}
	int _nmb_neighbours_blur_cst = (_amount_inglow * 2 + 1) * (_amount_inglow * 2 + 1);
	_alpha_inglow_b1 /= float(_nmb_neighbours_blur_cst);
	
	_alpha_inglow_inv = _alpha_inglow_b1; // inversion
	_alpha_inglow_inv *= (1.0 - _color_inglow.a); // masking
	
	if (_alpha_inglow_inv > 0.0)
		_alpha_inglow_inv *= (_intns_inglowEmpt + 1.0);
	
	return vec4(_col_inglowEmpt.rgb, _alpha_inglow_inv * _col_inglowEmpt.a);
}

void fragment() {
// Input:4
	vec2 n_out4p0 = UV;


// FloatConstant:10
	float n_out10p0 = -1.000000;


// FloatConstant:11
	float n_out11p0 = 1.000000;


// FloatConstant:12
	float n_out12p0 = 1.000000;


// ColorConstant:9
	vec4 n_out9p0 = vec4(1.000000, 0.000000, 0.000000, 1.000000);


	vec3 n_out7p0;
	float n_out7p1;
// OuterGlowEmpty:7
	float n_in7p6 = 1.00000;
	{
		vec4 n_out7p0n_out7p1 = _outerGlowEmptyFunc(TEXTURE, vec3(n_out4p0, 0.0).xy, n_out10p0, n_out11p0, n_out12p0, vec4(vec3(n_out9p0.xyz), n_in7p6));
		n_out7p0 = n_out7p0n_out7p1.rgb;
		n_out7p1 = n_out7p0n_out7p1.a;
	}


// Output:0
	COLOR.rgb = n_out7p0;
	COLOR.a = n_out7p1;


}
"
graph_offset = Vector2(-220.103, 147.328)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(400, 200)
nodes/fragment/3/node = SubResource("174")
nodes/fragment/3/position = Vector2(-160, 40)
nodes/fragment/4/node = SubResource("175")
nodes/fragment/4/position = Vector2(-200, 120)
nodes/fragment/7/node = SubResource("192")
nodes/fragment/7/position = Vector2(180, 200)
nodes/fragment/9/node = SubResource("193")
nodes/fragment/9/position = Vector2(-60, 440)
nodes/fragment/10/node = SubResource("189")
nodes/fragment/10/position = Vector2(-60, 200)
nodes/fragment/11/node = SubResource("190")
nodes/fragment/11/position = Vector2(-60, 280)
nodes/fragment/12/node = SubResource("191")
nodes/fragment/12/position = Vector2(-60, 360)
nodes/fragment/connections = PackedInt32Array(7, 1, 0, 1, 3, 0, 7, 0, 4, 0, 7, 1, 9, 0, 7, 5, 10, 0, 7, 2, 11, 0, 7, 3, 12, 0, 7, 4, 7, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="195"]
shader = SubResource("194")

[sub_resource type="VisualShaderNodeVec3Constant" id="196"]
constant = Vector3(8, 8, 0)

[sub_resource type="VisualShaderNodeColorConstant" id="197"]
expanded_output_ports = [0]
constant = Color(0, 1, 0.5, 1)

[sub_resource type="VisualShaderNodeCustom" id="198"]
default_input_values = [1, Vector3(8, 8, 0), 2, Vector3(1, 1, 1), 3, 1]
initialized = true
script = ExtResource("35")

[sub_resource type="VisualShader" id="199"]
code = "shader_type canvas_item;
render_mode blend_mix;



// CheckerboardShape
float _checkerboardPatternFunc(vec2 uv, vec2 _checker_size){
	float fmodRes = mod(floor(_checker_size.x * uv.x) + floor(_checker_size.y * uv.y), 2.0);
	return max(sign(fmodRes), 0.0);
}

void fragment() {
// Input:4
	vec2 n_out4p0 = UV;


// Vector3Constant:10
	vec3 n_out10p0 = vec3(8.000000, 8.000000, 0.000000);


// ColorConstant:8
	vec4 n_out8p0 = vec4(0.000000, 1.000000, 0.500000, 1.000000);
	float n_out8p4 = n_out8p0.a;


	vec3 n_out9p0;
	float n_out9p1;
// CheckerboardShape:9
	{
		n_out9p0 = vec3(n_out8p0.xyz);
		n_out9p1 = _checkerboardPatternFunc(vec3(n_out4p0, 0.0).xy, n_out10p0.xy) * n_out8p4;
	}


// Output:0
	COLOR.rgb = n_out9p0;
	COLOR.a = n_out9p1;


}
"
graph_offset = Vector2(-151, 179)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 220)
nodes/fragment/4/node = SubResource("175")
nodes/fragment/4/position = Vector2(-220, 120)
nodes/fragment/8/node = SubResource("197")
nodes/fragment/8/position = Vector2(-60, 320)
nodes/fragment/9/node = SubResource("198")
nodes/fragment/9/position = Vector2(180, 220)
nodes/fragment/10/node = SubResource("196")
nodes/fragment/10/position = Vector2(-220, 220)
nodes/fragment/connections = PackedInt32Array(9, 0, 0, 0, 9, 1, 0, 1, 8, 0, 9, 2, 10, 0, 9, 1, 4, 0, 9, 0, 8, 4, 9, 3)

[sub_resource type="ShaderMaterial" id="200"]
shader = SubResource("199")

[sub_resource type="VisualShaderNodeCustom" id="210"]
default_input_values = [1, Vector3(0.5, 0.5, 0), 2, Vector3(1, 1, 0), 3, -0.5, 4, 0.5, 5, 1.0, 6, Vector3(1, 1, 1), 7, 1.0]
initialized = true
script = ExtResource("37")

[sub_resource type="VisualShaderNodeFloatConstant" id="211"]
constant = -0.5

[sub_resource type="VisualShaderNodeFloatConstant" id="212"]
constant = 0.5

[sub_resource type="VisualShaderNodeFloatConstant" id="213"]
constant = 1.0

[sub_resource type="VisualShaderNodeColorConstant" id="214"]
constant = Color(1, 0, 0, 1)

[sub_resource type="VisualShaderNodeVec3Constant" id="215"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShaderNodeVec3Constant" id="216"]
constant = Vector3(1, 1, 0)

[sub_resource type="VisualShader" id="217"]
code = "shader_type canvas_item;
render_mode blend_mix;



// CircleShape
vec4 _generateCircleFunc(vec2 _uv_circle, vec2 _center_circle, vec2 _scale_factor_circle, float _innerRad_circle, float _outRad_circle, float _hard_circle) {
	float _innerRadiusCheck0 = min(_innerRad_circle, _outRad_circle);
	float _outerRadiusCheck0 = max(_innerRad_circle, _outRad_circle);
	
	float currentPositionCircle = length((_uv_circle - _center_circle) * _scale_factor_circle);
	float maxIntencityCenterCircle = (_outerRadiusCheck0 + _innerRadiusCheck0) * 0.5;
	float rd0 = _outerRadiusCheck0 - maxIntencityCenterCircle;
	float circleDistribution = min(max(abs(currentPositionCircle - maxIntencityCenterCircle) / rd0, 0.0), 1.0);
	vec4 _outputColor0 = vec4(1.0);
	_outputColor0.a = 1.0 - pow(circleDistribution, _hard_circle);
	return _outputColor0;
}

void fragment() {
// Input:4
	vec2 n_out4p0 = UV;


// Vector3Constant:23
	vec3 n_out23p0 = vec3(0.500000, 0.500000, 0.000000);


// Vector3Constant:24
	vec3 n_out24p0 = vec3(1.000000, 1.000000, 0.000000);


// FloatConstant:19
	float n_out19p0 = -0.500000;


// FloatConstant:20
	float n_out20p0 = 0.500000;


// FloatConstant:21
	float n_out21p0 = 1.000000;


// ColorConstant:22
	vec4 n_out22p0 = vec4(1.000000, 0.000000, 0.000000, 1.000000);


	vec3 n_out18p0;
	float n_out18p1;
// CircleShape:18
	float n_in18p7 = 1.00000;
	{
		n_out18p0 = vec3(n_out22p0.xyz);
		n_out18p1 = _generateCircleFunc(vec3(n_out4p0, 0.0).xy, n_out23p0.xy, n_out24p0.xy, n_out19p0, n_out20p0, n_out21p0).a * n_in18p7;
	}


// Output:0
	COLOR.rgb = n_out18p0;
	COLOR.a = n_out18p1;


}
"
graph_offset = Vector2(-157, 124)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(540, 180)
nodes/fragment/4/node = SubResource("175")
nodes/fragment/4/position = Vector2(-120, 0)
nodes/fragment/18/node = SubResource("210")
nodes/fragment/18/position = Vector2(320, 180)
nodes/fragment/19/node = SubResource("211")
nodes/fragment/19/position = Vector2(20, 280)
nodes/fragment/20/node = SubResource("212")
nodes/fragment/20/position = Vector2(20, 360)
nodes/fragment/21/node = SubResource("213")
nodes/fragment/21/position = Vector2(20, 440)
nodes/fragment/22/node = SubResource("214")
nodes/fragment/22/position = Vector2(20, 520)
nodes/fragment/23/node = SubResource("215")
nodes/fragment/23/position = Vector2(-120, 80)
nodes/fragment/24/node = SubResource("216")
nodes/fragment/24/position = Vector2(-120, 180)
nodes/fragment/connections = PackedInt32Array(4, 0, 18, 0, 19, 0, 18, 3, 20, 0, 18, 4, 21, 0, 18, 5, 22, 0, 18, 6, 23, 0, 18, 1, 24, 0, 18, 2, 18, 1, 0, 1, 18, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="218"]
shader = SubResource("217")

[sub_resource type="VisualShaderNodeCustom" id="201"]
default_input_values = [1, Vector3(0.5, 0.5, 0), 2, Vector3(1, 1, 0), 3, 0.0, 4, 0.5, 5, 0.5, 6, Vector3(1, 1, 1), 7, 1.0]
initialized = true
script = ExtResource("36")

[sub_resource type="VisualShaderNodeColorConstant" id="202"]
constant = Color(0.59375, 0, 1, 1)

[sub_resource type="VisualShaderNodeVec3Constant" id="203"]
constant = Vector3(1, 1, 0)

[sub_resource type="VisualShaderNodeFloatConstant" id="204"]

[sub_resource type="VisualShaderNodeFloatConstant" id="205"]
constant = 0.5

[sub_resource type="VisualShaderNodeFloatConstant" id="206"]
constant = 0.5

[sub_resource type="VisualShaderNodeVec3Constant" id="207"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShader" id="208"]
code = "shader_type canvas_item;
render_mode blend_mix;



// CircleShape2
vec4 _generateCircle2Func(vec2 _uv_gc2, vec2 _pos_gc2, vec2 _scale_gc2, float _rad_gc2,
						 float _bordIn_gc2, float _bordOut_gc2, vec4 _col_gc2){
	float _dst_gc2 = length((_uv_gc2 - _pos_gc2) * _scale_gc2);
	_col_gc2.a *= smoothstep(_rad_gc2 - _bordIn_gc2, _rad_gc2, _dst_gc2) 
				 - smoothstep(_rad_gc2, _rad_gc2 + _bordOut_gc2, _dst_gc2);
	return _col_gc2;
}

void fragment() {
// Input:4
	vec2 n_out4p0 = UV;


// Vector3Constant:18
	vec3 n_out18p0 = vec3(0.500000, 0.500000, 0.000000);


// Vector3Constant:14
	vec3 n_out14p0 = vec3(1.000000, 1.000000, 0.000000);


// FloatConstant:15
	float n_out15p0 = 0.000000;


// FloatConstant:16
	float n_out16p0 = 0.500000;


// FloatConstant:17
	float n_out17p0 = 0.500000;


// ColorConstant:12
	vec4 n_out12p0 = vec4(0.593750, 0.000000, 1.000000, 1.000000);


	vec3 n_out11p0;
	float n_out11p1;
// CircleShape2:11
	float n_in11p7 = 1.00000;
	{
		vec4 n_out11p0n_out11p1 = _generateCircle2Func(vec3(n_out4p0, 0.0).xy, n_out18p0.xy, n_out14p0.xy, n_out15p0, n_out16p0, n_out17p0, vec4(vec3(n_out12p0.xyz), n_in11p7));
		n_out11p0 = n_out11p0n_out11p1.rgb;
		n_out11p1 = n_out11p0n_out11p1.a;
	}


// Output:0
	COLOR.rgb = n_out11p0;
	COLOR.a = n_out11p1;


}
"
graph_offset = Vector2(-94.2341, 77.3223)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(540, 200)
nodes/fragment/4/node = SubResource("175")
nodes/fragment/4/position = Vector2(-120, -20)
nodes/fragment/11/node = SubResource("201")
nodes/fragment/11/position = Vector2(320, 200)
nodes/fragment/12/node = SubResource("202")
nodes/fragment/12/position = Vector2(60, 520)
nodes/fragment/14/node = SubResource("203")
nodes/fragment/14/position = Vector2(-120, 180)
nodes/fragment/15/node = SubResource("204")
nodes/fragment/15/position = Vector2(40, 280)
nodes/fragment/16/node = SubResource("205")
nodes/fragment/16/position = Vector2(40, 360)
nodes/fragment/17/node = SubResource("206")
nodes/fragment/17/position = Vector2(40, 440)
nodes/fragment/18/node = SubResource("207")
nodes/fragment/18/position = Vector2(-120, 80)
nodes/fragment/connections = PackedInt32Array(11, 1, 0, 1, 12, 0, 11, 6, 4, 0, 11, 0, 16, 0, 11, 4, 17, 0, 11, 5, 14, 0, 11, 2, 18, 0, 11, 1, 15, 0, 11, 3, 11, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="209"]
shader = SubResource("208")

[sub_resource type="VisualShaderNodeColorConstant" id="225"]
constant = Color(1, 0.867188, 0, 1)

[sub_resource type="VisualShaderNodeCustom" id="226"]
default_input_values = [1, Vector3(0.5, 0.5, 0), 2, 3, 3, Vector3(1, 1, 0), 4, 0.0, 5, 0.0, 6, Vector3(1, 1, 1), 7, 1.0]
initialized = true
script = ExtResource("39")

[sub_resource type="VisualShaderNodeVec3Constant" id="227"]
constant = Vector3(0.5, 0.6, 0)

[sub_resource type="VisualShaderNodeVec3Constant" id="228"]
constant = Vector3(1, 1, 0)

[sub_resource type="VisualShaderNodeFloatConstant" id="229"]
constant = 3.0

[sub_resource type="VisualShaderNodeFloatConstant" id="230"]
constant = 0.064

[sub_resource type="VisualShaderNodeFloatConstant" id="231"]
constant = 0.05

[sub_resource type="VisualShader" id="232"]
code = "shader_type canvas_item;
render_mode blend_mix;



// RegularPolygonShape
float _polygonFunc(vec2 _uv_polygon, vec2 _pos_polygon, vec2 _size_polygon, float _sides_polygon, float _angle_polygon, float _smooth_polygon){
	_uv_polygon = (_uv_polygon - _pos_polygon) / (_size_polygon * 2.0);
	float a_polygon = atan(_uv_polygon.x, _uv_polygon.y) + _angle_polygon;
	float r_polygon = 6.28318530718 / float(int(max(_sides_polygon, 3.0)));
	float d_polygon = cos(floor(0.5 + a_polygon / r_polygon) * r_polygon - a_polygon) * length(_uv_polygon);
	return (max(sign(_smooth_polygon - 0.0), 0.0) * ( 1.0 - smoothstep(0.1 - 0.0001, 0.1 + _smooth_polygon, d_polygon) ) +
			(max(sign(-_smooth_polygon + 0.0), 0.0)) * ( 1.0 - smoothstep(0.1 + _smooth_polygon - 0.0001, 0.1, d_polygon) ) +
			(1.0 - abs(sign(_smooth_polygon - 0.0))) * ( 1.0 - step(0.1, d_polygon)) );
}

void fragment() {
// Input:4
	vec2 n_out4p0 = UV;


// Vector3Constant:28
	vec3 n_out28p0 = vec3(0.500000, 0.600000, 0.000000);


// FloatConstant:31
	float n_out31p0 = 3.000000;


// Vector3Constant:29
	vec3 n_out29p0 = vec3(1.000000, 1.000000, 0.000000);


// FloatConstant:32
	float n_out32p0 = 0.064000;


// FloatConstant:33
	float n_out33p0 = 0.050000;


// ColorConstant:26
	vec4 n_out26p0 = vec4(1.000000, 0.867188, 0.000000, 1.000000);


	vec3 n_out27p0;
	float n_out27p1;
// RegularPolygonShape:27
	float n_in27p7 = 1.00000;
	{
		n_out27p0 = vec3(n_out26p0.xyz);
		n_out27p1 = _polygonFunc(vec3(n_out4p0, 0.0).xy, n_out28p0.xy, n_out29p0.xy, n_out31p0, n_out32p0, n_out33p0) * n_in27p7;
	}


// Output:0
	COLOR.rgb = n_out27p0;
	COLOR.a = n_out27p1;


}
"
graph_offset = Vector2(-310.568, -28.3627)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(540, 160)
nodes/fragment/4/node = SubResource("175")
nodes/fragment/4/position = Vector2(-140, -80)
nodes/fragment/26/node = SubResource("225")
nodes/fragment/26/position = Vector2(0, 440)
nodes/fragment/27/node = SubResource("226")
nodes/fragment/27/position = Vector2(260, 160)
nodes/fragment/28/node = SubResource("227")
nodes/fragment/28/position = Vector2(-140, 0)
nodes/fragment/29/node = SubResource("228")
nodes/fragment/29/position = Vector2(-140, 180)
nodes/fragment/31/node = SubResource("229")
nodes/fragment/31/position = Vector2(0, 100)
nodes/fragment/32/node = SubResource("230")
nodes/fragment/32/position = Vector2(0, 280)
nodes/fragment/33/node = SubResource("231")
nodes/fragment/33/position = Vector2(0, 360)
nodes/fragment/connections = PackedInt32Array(27, 1, 0, 1, 4, 0, 27, 0, 28, 0, 27, 1, 31, 0, 27, 2, 29, 0, 27, 3, 32, 0, 27, 4, 33, 0, 27, 5, 26, 0, 27, 6, 27, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="233"]
shader = SubResource("232")

[sub_resource type="VisualShaderNodeColorConstant" id="234"]
constant = Color(0, 0.552138, 1, 1)

[sub_resource type="VisualShaderNodeVec3Constant" id="235"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShaderNodeCustom" id="236"]
default_input_values = [1, Vector3(0.5, 0.5, 0), 2, 70.0, 3, 1.0, 4, 1.0, 5, 0.0, 6, 0.0, 7, Vector3(1, 1, 1), 8, 1.0]
initialized = true
script = ExtResource("40")

[sub_resource type="VisualShaderNodeFloatConstant" id="237"]
constant = 70.0

[sub_resource type="VisualShaderNodeFloatConstant" id="238"]
constant = 10.0

[sub_resource type="VisualShaderNodeFloatConstant" id="239"]
constant = 1.2

[sub_resource type="VisualShaderNodeFloatConstant" id="240"]
constant = -2.0

[sub_resource type="VisualShaderNodeInput" id="241"]
input_name = "time"

[sub_resource type="VisualShader" id="242"]
code = "shader_type canvas_item;
render_mode blend_mix;



// SpiralShape
vec4 _generateSpiralFunc(vec2 _uv_genSpir, vec2 _pivot_genSpir, float _size_genSpir, float _lineAmnt_genSpir,
						float _spd_genSpir, float _soft_genSpir, float _t1me_genSpir, vec4 _col_genSpir){
	_uv_genSpir -= _pivot_genSpir;
	float _va1ue_genSpir = 1.0 - sin(length(_uv_genSpir) * _size_genSpir +
					floor(_lineAmnt_genSpir) * atan(_uv_genSpir.x, _uv_genSpir.y) +
					_t1me_genSpir * _spd_genSpir ) / _soft_genSpir;
	return vec4(_col_genSpir.rgb, _col_genSpir.a * _va1ue_genSpir);
}

void fragment() {
// Input:4
	vec2 n_out4p0 = UV;


// Vector3Constant:38
	vec3 n_out38p0 = vec3(0.500000, 0.500000, 0.000000);


// FloatConstant:41
	float n_out41p0 = 70.000000;


// FloatConstant:42
	float n_out42p0 = 10.000000;


// FloatConstant:43
	float n_out43p0 = 1.200000;


// FloatConstant:44
	float n_out44p0 = -2.000000;


// Input:45
	float n_out45p0 = TIME;


// ColorConstant:37
	vec4 n_out37p0 = vec4(0.000000, 0.552138, 1.000000, 1.000000);


	vec3 n_out40p0;
	float n_out40p1;
// SpiralShape:40
	float n_in40p8 = 1.00000;
	{
		vec4 n_out40p0n_out40p1 = _generateSpiralFunc(vec3(n_out4p0, 0.0).xy, n_out38p0.xy, n_out41p0, n_out42p0, n_out44p0, n_out43p0, n_out45p0, vec4(vec3(n_out37p0.xyz), n_in40p8));
		n_out40p0 = n_out40p0n_out40p1.rgb;
		n_out40p1 = n_out40p0n_out40p1.a;
	}


// Output:0
	COLOR.rgb = n_out40p0;
	COLOR.a = n_out40p1;


}
"
graph_offset = Vector2(-271.496, -54.4786)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(580, 200)
nodes/fragment/4/node = SubResource("175")
nodes/fragment/4/position = Vector2(-140, -40)
nodes/fragment/37/node = SubResource("234")
nodes/fragment/37/position = Vector2(0, 540)
nodes/fragment/38/node = SubResource("235")
nodes/fragment/38/position = Vector2(-140, 40)
nodes/fragment/40/node = SubResource("236")
nodes/fragment/40/position = Vector2(340, 200)
nodes/fragment/41/node = SubResource("237")
nodes/fragment/41/position = Vector2(0, 140)
nodes/fragment/42/node = SubResource("238")
nodes/fragment/42/position = Vector2(0, 220)
nodes/fragment/43/node = SubResource("239")
nodes/fragment/43/position = Vector2(0, 300)
nodes/fragment/44/node = SubResource("240")
nodes/fragment/44/position = Vector2(0, 380)
nodes/fragment/45/node = SubResource("241")
nodes/fragment/45/position = Vector2(-120, 460)
nodes/fragment/connections = PackedInt32Array(4, 0, 40, 0, 38, 0, 40, 1, 41, 0, 40, 2, 42, 0, 40, 3, 43, 0, 40, 4, 44, 0, 40, 5, 45, 0, 40, 6, 37, 0, 40, 7, 40, 1, 0, 1, 40, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="243"]
shader = SubResource("242")

[sub_resource type="VisualShaderNodeInput" id="245"]
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatConstant" id="246"]
constant = 21.0

[sub_resource type="VisualShaderNodeFloatConstant" id="247"]
constant = 0.3

[sub_resource type="VisualShaderNodeFloatConstant" id="248"]
constant = 0.2

[sub_resource type="VisualShaderNodeInput" id="249"]
input_name = "time"

[sub_resource type="VisualShaderNodeColorConstant" id="250"]
constant = Color(0, 1, 0.557237, 1)

[sub_resource type="VisualShaderNodeCustom" id="611"]
default_input_values = [1, 21, 2, 0.5, 3, 1, 4, 0, 5, Vector3(1, 1, 1), 6, 1.0]
initialized = true
script = ExtResource("41")

[sub_resource type="VisualShader" id="251"]
code = "shader_type canvas_item;
render_mode blend_mix;



// ScanLinesSharpShape
float _scanLinesSharpFunc(vec2 _uv_scLiShrp, float _amount_scLiShrp, float _fill_scLiShrp, float _spd_scLiShrp, float _time_scLiShrp) {
	return step(fract(_uv_scLiShrp.y * _amount_scLiShrp + _time_scLiShrp * _spd_scLiShrp), _fill_scLiShrp);
}

void fragment() {
// Input:47
	vec2 n_out47p0 = UV;


// FloatConstant:48
	float n_out48p0 = 21.000000;


// FloatConstant:49
	float n_out49p0 = 0.300000;


// FloatConstant:50
	float n_out50p0 = 0.200000;


// Input:51
	float n_out51p0 = TIME;


// ColorConstant:52
	vec4 n_out52p0 = vec4(0.000000, 1.000000, 0.557237, 1.000000);


	vec3 n_out53p0;
	float n_out53p1;
// ScanLinesSharpShape:53
	float n_in53p6 = 1.00000;
	{
		n_out53p0 = vec3(n_out52p0.xyz);
		n_out53p1 = _scanLinesSharpFunc(vec3(n_out47p0, 0.0).xy, n_out48p0, n_out49p0, n_out50p0, n_out51p0) * float(n_in53p6);
	}


// Output:0
	COLOR.rgb = n_out53p0;
	COLOR.a = n_out53p1;


}
"
graph_offset = Vector2(-251.265, -85.4703)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(660, 220)
nodes/fragment/47/node = SubResource("245")
nodes/fragment/47/position = Vector2(-40, 0)
nodes/fragment/48/node = SubResource("246")
nodes/fragment/48/position = Vector2(100, 80)
nodes/fragment/49/node = SubResource("247")
nodes/fragment/49/position = Vector2(100, 160)
nodes/fragment/50/node = SubResource("248")
nodes/fragment/50/position = Vector2(100, 240)
nodes/fragment/51/node = SubResource("249")
nodes/fragment/51/position = Vector2(-20, 320)
nodes/fragment/52/node = SubResource("250")
nodes/fragment/52/position = Vector2(100, 400)
nodes/fragment/53/node = SubResource("611")
nodes/fragment/53/position = Vector2(380, 220)
nodes/fragment/connections = PackedInt32Array(53, 1, 0, 1, 47, 0, 53, 0, 48, 0, 53, 1, 49, 0, 53, 2, 50, 0, 53, 3, 51, 0, 53, 4, 52, 0, 53, 5, 53, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="252"]
shader = SubResource("251")

[sub_resource type="VisualShaderNodeColorConstant" id="253"]
constant = Color(0.623529, 0.439216, 1, 1)

[sub_resource type="VisualShaderNodeCustom" id="254"]
default_input_values = [1, 0.5, 2, 20.0, 3, Vector3(1, 1, 1), 4, 1.0]
initialized = true
script = ExtResource("42")

[sub_resource type="VisualShaderNodeFloatConstant" id="255"]
constant = 0.3

[sub_resource type="VisualShaderNodeFloatConstant" id="256"]
constant = 15.0

[sub_resource type="VisualShader" id="257"]
code = "shader_type canvas_item;
render_mode blend_mix;



// RandomStripesShape
float _generateRandomStripesFunc(vec2 _uv_stripes, float _fill_stripes, float _amount_stripes){
	return 1.0 - step(_fill_stripes, fract(sin(dot(floor(vec2(_uv_stripes.y) * _amount_stripes), vec2(12.9898, 78.233))) * 43758.5453123));
}

void fragment() {
// Input:47
	vec2 n_out47p0 = UV;


// FloatConstant:55
	float n_out55p0 = 0.300000;


// FloatConstant:56
	float n_out56p0 = 15.000000;


// ColorConstant:53
	vec4 n_out53p0 = vec4(0.623529, 0.439216, 1.000000, 1.000000);


	vec3 n_out54p0;
	float n_out54p1;
// RandomStripesShape:54
	float n_in54p4 = 1.00000;
	{
		n_out54p0 = vec3(n_out53p0.xyz);
		n_out54p1 = _generateRandomStripesFunc(vec3(n_out47p0, 0.0).xy, n_out55p0, n_out56p0) * float(n_in54p4);
	}


// Output:0
	COLOR.rgb = n_out54p0;
	COLOR.a = n_out54p1;


}
"
graph_offset = Vector2(237.627, 299.737)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(660, 220)
nodes/fragment/47/node = SubResource("245")
nodes/fragment/47/position = Vector2(0, 140)
nodes/fragment/53/node = SubResource("253")
nodes/fragment/53/position = Vector2(140, 380)
nodes/fragment/54/node = SubResource("254")
nodes/fragment/54/position = Vector2(420, 220)
nodes/fragment/55/node = SubResource("255")
nodes/fragment/55/position = Vector2(140, 220)
nodes/fragment/56/node = SubResource("256")
nodes/fragment/56/position = Vector2(140, 300)
nodes/fragment/connections = PackedInt32Array(47, 0, 54, 0, 53, 0, 54, 3, 55, 0, 54, 1, 56, 0, 54, 2, 54, 0, 0, 0, 54, 1, 0, 1)

[sub_resource type="ShaderMaterial" id="258"]
shader = SubResource("257")

[sub_resource type="VisualShaderNodeCustom" id="259"]
output_port_for_preview = 0
default_input_values = [1, Vector3(0, 0, 0), 2, 5]
initialized = true
script = ExtResource("43")

[sub_resource type="VisualShaderNodeVec3Constant" id="260"]

[sub_resource type="VisualShaderNodeFloatConstant" id="261"]
constant = 10.0

[sub_resource type="VisualShader" id="262"]
code = "shader_type canvas_item;
render_mode blend_mix;



// GenericNoise2D
float _hash2_generic2D(vec2 _p_hash2_generic) {
	return (fract(1e4 * sin(17.0 * _p_hash2_generic.x + _p_hash2_generic.y * 0.1) *
					(0.1 + abs(sin(_p_hash2_generic.y * 13.0 + _p_hash2_generic.x)))));
}

float _genericNoise2D(vec2 _x_generic2D) {
	vec2 _temp_i_generic2D = floor(_x_generic2D);
	vec2 _temp_f_generic2D = fract(_x_generic2D);

	float _a_g1n2 = _hash2_generic2D(_temp_i_generic2D);
	float _b_g1n2 = _hash2_generic2D(_temp_i_generic2D + vec2(1.0, 0.0));
	float _c_g1n2 = _hash2_generic2D(_temp_i_generic2D + vec2(0.0, 1.0));
	float _d_g1n2 = _hash2_generic2D(_temp_i_generic2D + vec2(1.0, 1.0));
	
	vec2 _u_g1n2 = _temp_f_generic2D * _temp_f_generic2D * (3.0 - 2.0 * _temp_f_generic2D);
	return (mix(_a_g1n2, _b_g1n2, _u_g1n2.x) + (_c_g1n2 - _a_g1n2) *
				_u_g1n2.y * (1.0 - _u_g1n2.x) + (_d_g1n2 - _b_g1n2) * _u_g1n2.x * _u_g1n2.y);
}

void fragment() {
// Input:47
	vec2 n_out47p0 = UV;


// Vector3Constant:56
	vec3 n_out56p0 = vec3(0.000000, 0.000000, 0.000000);


// FloatConstant:57
	float n_out57p0 = 10.000000;


	float n_out55p0;
// GenericNoise2D:55
	{
		n_out55p0 = _genericNoise2D((vec3(n_out47p0, 0.0).xy + n_out56p0.xy) * n_out57p0);
	}


// Output:0
	COLOR.rgb = vec3(n_out55p0);


}
"
graph_offset = Vector2(41.1867, 31.5944)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(660, 220)
nodes/fragment/47/node = SubResource("245")
nodes/fragment/47/position = Vector2(60, 140)
nodes/fragment/55/node = SubResource("259")
nodes/fragment/55/position = Vector2(440, 220)
nodes/fragment/56/node = SubResource("260")
nodes/fragment/56/position = Vector2(60, 220)
nodes/fragment/57/node = SubResource("261")
nodes/fragment/57/position = Vector2(200, 320)
nodes/fragment/connections = PackedInt32Array(47, 0, 55, 0, 56, 0, 55, 1, 57, 0, 55, 2, 55, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="263"]
shader = SubResource("262")

[sub_resource type="VisualShaderNodeCustom" id="264"]
default_input_values = [1, Vector3(0, 0, 0), 2, 5, 3, Vector3(0, 0, 0)]
initialized = true
script = ExtResource("44")

[sub_resource type="VisualShaderNodeFloatConstant" id="265"]
constant = 10.0

[sub_resource type="VisualShaderNodeVec3Constant" id="266"]

[sub_resource type="VisualShaderNodeVec3Constant" id="267"]

[sub_resource type="VisualShader" id="268"]
code = "shader_type canvas_item;
render_mode blend_mix;



// PerlinNoise2D
float _perlin2dNoiseFunc(vec2 P, vec2 _period_perl2) {
	vec4 Pi = floor(vec4(P, P)) + vec4(0.0, 0.0, 1.0, 1.0);
	vec4 Pf = fract(vec4(P, P)) - vec4(0.0, 0.0, 1.0, 1.0);
	
	if (_period_perl2.x != 0.0 && _period_perl2.y != 0.0)
		Pi = mod(Pi, vec4(_period_perl2, _period_perl2));
	
	Pi = Pi - floor(Pi * (1.0 / 289.0)) * 289.0;
	vec4 ix = Pi.xzxz;
	vec4 iy = Pi.yyww;
	vec4 fx = Pf.xzxz;
	vec4 fy = Pf.yyww;
	
	vec4 i = (((((((ix*34.0)+1.0)*ix)-floor((((ix*34.0)+1.0)*ix)*(1.0/289.0))*289.0 + iy)*34.0)+1.0)*
		((((ix*34.0)+1.0)*ix)-floor((((ix*34.0)+1.0)*ix)*(1.0/289.0))*289.0 + iy))-
		floor((((((((ix*34.0)+1.0)*ix)-floor((((ix*34.0)+1.0)*ix)*(1.0/289.0))*289.0 + iy)*34.0)+1.0)*
		((((ix*34.0)+1.0)*ix)-floor((((ix*34.0)+1.0)*ix)*(1.0/289.0))*289.0 + iy))*(1.0/289.0))*289.0;
	
	vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;
	vec4 gy = abs(gx) - 0.5 ;
	vec4 tx = floor(gx + 0.5);
	gx = gx - tx;
	
	vec2 g00 = vec2(gx.x,gy.x);
	vec2 g10 = vec2(gx.y,gy.y);
	vec2 g01 = vec2(gx.z,gy.z);
	vec2 g11 = vec2(gx.w,gy.w);
	
	vec4 norm = 1.79284291400159 - 0.85373472095314 * vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));
	g00 *= norm.x;
	g01 *= norm.y;
	g10 *= norm.z;
	g11 *= norm.w;
	
	float n00 = dot(g00, vec2(fx.x, fy.x));
	float n10 = dot(g10, vec2(fx.y, fy.y));
	float n01 = dot(g01, vec2(fx.z, fy.z));
	float n11 = dot(g11, vec2(fx.w, fy.w));
	
	vec2 fade_xy = Pf.xy * Pf.xy * Pf.xy * (Pf.xy * (Pf.xy * 6.0 - 15.0) + 10.0);
	vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);
	float n_xy = mix(n_x.x, n_x.y, fade_xy.y);
	return 2.3 * n_xy;
}

void fragment() {
// Input:47
	vec2 n_out47p0 = UV;


// Vector3Constant:68
	vec3 n_out68p0 = vec3(0.000000, 0.000000, 0.000000);


// FloatConstant:67
	float n_out67p0 = 10.000000;


// Vector3Constant:69
	vec3 n_out69p0 = vec3(0.000000, 0.000000, 0.000000);


	float n_out66p0;
// PerlinNoise2D:66
	{
		n_out66p0 = _perlin2dNoiseFunc((vec3(n_out47p0, 0.0).xy+n_out68p0.xy)*n_out67p0, n_out69p0.xy);
	}


// Output:0
	COLOR.rgb = vec3(n_out66p0);


}
"
graph_offset = Vector2(237, 169)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(700, 220)
nodes/fragment/47/node = SubResource("245")
nodes/fragment/47/position = Vector2(60, 120)
nodes/fragment/66/node = SubResource("264")
nodes/fragment/66/position = Vector2(480, 220)
nodes/fragment/67/node = SubResource("265")
nodes/fragment/67/position = Vector2(200, 300)
nodes/fragment/68/node = SubResource("266")
nodes/fragment/68/position = Vector2(60, 200)
nodes/fragment/69/node = SubResource("267")
nodes/fragment/69/position = Vector2(60, 380)
nodes/fragment/connections = PackedInt32Array(47, 0, 66, 0, 67, 0, 66, 2, 69, 0, 66, 3, 68, 0, 66, 1, 66, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="269"]
shader = SubResource("268")

[sub_resource type="VisualShaderNodeCustom" id="270"]
default_input_values = [1, Vector3(0, 0, 0), 2, 5, 3, 0]
initialized = true
script = ExtResource("45")

[sub_resource type="VisualShaderNodeFloatConstant" id="271"]
constant = 10.0

[sub_resource type="VisualShaderNodeVec3Constant" id="272"]

[sub_resource type="VisualShaderNodeInput" id="273"]
input_name = "time"

[sub_resource type="VisualShader" id="274"]
code = "shader_type canvas_item;
render_mode blend_mix;



// PerlinNoise3D
float _perlin3dNoiseFunc(vec3 P) {
	vec3 Pi0 = floor(P);
	vec3 Pi1 = Pi0 + vec3(1.0);
	Pi0 = Pi0 - floor(Pi0 * (1.0 / 289.0)) * 289.0;
	Pi1 = Pi1 - floor(Pi1 * (1.0 / 289.0)) * 289.0;
	vec3 Pf0 = fract(P);
	vec3 Pf1 = Pf0 - vec3(1.0);
	vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
	vec4 iy = vec4(Pi0.yy, Pi1.yy);
	vec4 iz0 = vec4(Pi0.z);
	vec4 iz1 = vec4(Pi1.z);
	
	vec4 ixy = (((((((ix*34.0)+1.0)*ix)-floor(((ix*34.0)+1.0)*ix*(1.0/289.0))*289.0 + iy)*34.0)+1.0)*
		((((ix*34.0)+1.0)*ix)-floor(((ix*34.0)+1.0)*ix*(1.0/289.0))*289.0 + iy))-
		floor(((((((ix*34.0)+1.0)*ix)-floor(((ix*34.0)+1.0)*ix*(1.0/289.0))*289.0 + iy)*34.0)+1.0)*
		((((ix*34.0)+1.0)*ix)-floor(((ix*34.0)+1.0)*ix*(1.0/289.0))*289.0 + iy)*(1.0/289.0))*289.0;
	vec4 ixy0 = ((((ixy + iz0)*34.0)+1.0)*(ixy + iz0))-floor((((ixy + iz0)*34.0)+1.0)*(ixy + iz0)*(1.0/289.0))*289.0;
	vec4 ixy1 = ((((ixy + iz1)*34.0)+1.0)*(ixy + iz1))-floor((((ixy + iz1)*34.0)+1.0)*(ixy + iz1)*(1.0/289.0))*289.0;
	
	vec4 gx0 = ixy0 * (1.0 / 7.0);
	vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
	gx0 = fract(gx0);
	vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
	vec4 sz0 = step(gz0, vec4(0.0));
	gx0 -= sz0 * (step(0.0, gx0) - 0.5);
	gy0 -= sz0 * (step(0.0, gy0) - 0.5);
	
	vec4 gx1 = ixy1 * (1.0 / 7.0);
	vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
	gx1 = fract(gx1);
	vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
	vec4 sz1 = step(gz1, vec4(0.0));
	gx1 -= sz1 * (step(0.0, gx1) - 0.5);
	gy1 -= sz1 * (step(0.0, gy1) - 0.5);
	
	vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
	vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
	vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
	vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
	vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
	vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
	vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
	vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);
	
	vec4 norm0 = 1.79284291400159 - 0.85373472095314 * vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110));
	g000 *= norm0.x;
	g010 *= norm0.y;
	g100 *= norm0.z;
	g110 *= norm0.w;
	vec4 norm1 = 1.79284291400159 - 0.85373472095314 * vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111));
	g001 *= norm1.x;
	g011 *= norm1.y;
	g101 *= norm1.z;
	g111 *= norm1.w;
	
	float n000 = dot(g000, Pf0);
	float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
	float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
	float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
	float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
	float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
	float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
	float n111 = dot(g111, Pf1);
	
	vec3 fade_xyz = Pf0 * Pf0 * Pf0 * (Pf0 * (Pf0 * 6.0 - 15.0) + 10.0);
	vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
	vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
	float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); 
	return 2.2 * n_xyz;
}

void fragment() {
// Input:47
	vec2 n_out47p0 = UV;


// Vector3Constant:64
	vec3 n_out64p0 = vec3(0.000000, 0.000000, 0.000000);


// FloatConstant:63
	float n_out63p0 = 10.000000;


// Input:65
	float n_out65p0 = TIME;


	float n_out62p0;
// PerlinNoise3D:62
	{
		n_out62p0 = _perlin3dNoiseFunc(vec3((vec3(n_out47p0, 0.0).xy+n_out64p0.xy) * n_out63p0, n_out65p0));
	}


// Output:0
	COLOR.rgb = vec3(n_out62p0);


}
"
graph_offset = Vector2(-674.783, -300)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(680, 280)
nodes/fragment/47/node = SubResource("245")
nodes/fragment/47/position = Vector2(100, 180)
nodes/fragment/62/node = SubResource("270")
nodes/fragment/62/position = Vector2(480, 280)
nodes/fragment/63/node = SubResource("271")
nodes/fragment/63/position = Vector2(220, 360)
nodes/fragment/64/node = SubResource("272")
nodes/fragment/64/position = Vector2(80, 260)
nodes/fragment/65/node = SubResource("273")
nodes/fragment/65/position = Vector2(100, 440)
nodes/fragment/connections = PackedInt32Array(47, 0, 62, 0, 63, 0, 62, 2, 64, 0, 62, 1, 65, 0, 62, 3, 62, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="275"]
shader = SubResource("274")

[sub_resource type="VisualShaderNodeCustom" id="276"]
default_input_values = [1, Vector3(0, 0, 0), 2, 5, 3, Vector3(0, 0, 0), 4, 0]
initialized = true
script = ExtResource("46")

[sub_resource type="VisualShaderNodeFloatConstant" id="277"]
constant = 10.0

[sub_resource type="VisualShaderNodeVec3Constant" id="278"]

[sub_resource type="VisualShaderNodeVec3Constant" id="279"]
constant = Vector3(1, 10, 0)

[sub_resource type="VisualShader" id="280"]
code = "shader_type canvas_item;
render_mode blend_mix;



// PerlinPeriodicNoise3D
float _perlin3dPeriodicNoiseFunc(vec3 P, vec3 rep) {
	vec3 Pi0 = mod(floor(P), rep);
	vec3 Pi1 = mod(Pi0 + vec3(1.0), rep);
	Pi0 = Pi0 - floor(Pi0 * (1.0 / 289.0)) * 289.0;
	Pi1 = Pi1 - floor(Pi1 * (1.0 / 289.0)) * 289.0;
	vec3 Pf0 = fract(P);
	vec3 Pf1 = Pf0 - vec3(1.0);
	vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
	vec4 iy = vec4(Pi0.yy, Pi1.yy);
	vec4 iz0 = vec4(Pi0.z);
	vec4 iz1 = vec4(Pi1.z);
	
	vec4 ixy = (((((((ix*34.0)+1.0)*ix)-floor(((ix*34.0)+1.0)*ix*(1.0/289.0))*289.0 + iy)*34.0)+1.0)*
		((((ix*34.0)+1.0)*ix)-floor(((ix*34.0)+1.0)*ix*(1.0/289.0))*289.0 + iy))-
		floor(((((((ix*34.0)+1.0)*ix)-floor(((ix*34.0)+1.0)*ix*(1.0/289.0))*289.0 + iy)*34.0)+1.0)*
		((((ix*34.0)+1.0)*ix)-floor(((ix*34.0)+1.0)*ix*(1.0/289.0))*289.0 + iy)*(1.0/289.0))*289.0;
	vec4 ixy0 = ((((ixy + iz0)*34.0)+1.0)*(ixy + iz0))-floor((((ixy + iz0)*34.0)+1.0)*(ixy + iz0)*(1.0/289.0))*289.0;
	vec4 ixy1 = ((((ixy + iz1)*34.0)+1.0)*(ixy + iz1))-floor((((ixy + iz1)*34.0)+1.0)*(ixy + iz1)*(1.0/289.0))*289.0;
	
	vec4 gx0 = ixy0 * (1.0 / 7.0);
	vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
	gx0 = fract(gx0);
	vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
	vec4 sz0 = step(gz0, vec4(0.0));
	gx0 -= sz0 * (step(0.0, gx0) - 0.5);
	gy0 -= sz0 * (step(0.0, gy0) - 0.5);
	
	vec4 gx1 = ixy1 * (1.0 / 7.0);
	vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
	gx1 = fract(gx1);
	vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
	vec4 sz1 = step(gz1, vec4(0.0));
	gx1 -= sz1 * (step(0.0, gx1) - 0.5);
	gy1 -= sz1 * (step(0.0, gy1) - 0.5);
	
	vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
	vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
	vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
	vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
	vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
	vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
	vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
	vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);
	
	vec4 norm0 = 1.79284291400159 - 0.85373472095314 * vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110));
	g000 *= norm0.x;
	g010 *= norm0.y;
	g100 *= norm0.z;
	g110 *= norm0.w;
	vec4 norm1 = 1.79284291400159 - 0.85373472095314 * vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111));
	g001 *= norm1.x;
	g011 *= norm1.y;
	g101 *= norm1.z;
	g111 *= norm1.w;
	
	float n000 = dot(g000, Pf0);
	float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
	float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
	float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
	float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
	float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
	float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
	float n111 = dot(g111, Pf1);
	
	vec3 fade_xyz = Pf0 * Pf0 * Pf0 * (Pf0 * (Pf0 * 6.0 - 15.0) + 10.0);
	vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
	vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
	float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); 
	return 2.2 * n_xyz;
}

void fragment() {
// Input:47
	vec2 n_out47p0 = UV;


// Vector3Constant:68
	vec3 n_out68p0 = vec3(0.000000, 0.000000, 0.000000);


// FloatConstant:67
	float n_out67p0 = 10.000000;


// Vector3Constant:69
	vec3 n_out69p0 = vec3(1.000000, 10.000000, 0.000000);


// Input:65
	float n_out65p0 = TIME;


	float n_out66p0;
// PerlinPeriodicNoise3D:66
	{
		n_out66p0 = _perlin3dPeriodicNoiseFunc(vec3((vec3(n_out47p0, 0.0).xy + n_out68p0.xy) * n_out67p0, n_out65p0), n_out69p0);
	}


// Output:0
	COLOR.rgb = vec3(n_out66p0);


}
"
graph_offset = Vector2(278, 221)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(720, 280)
nodes/fragment/47/node = SubResource("245")
nodes/fragment/47/position = Vector2(80, 160)
nodes/fragment/65/node = SubResource("273")
nodes/fragment/65/position = Vector2(100, 540)
nodes/fragment/66/node = SubResource("276")
nodes/fragment/66/position = Vector2(460, 280)
nodes/fragment/67/node = SubResource("277")
nodes/fragment/67/position = Vector2(220, 340)
nodes/fragment/68/node = SubResource("278")
nodes/fragment/68/position = Vector2(80, 240)
nodes/fragment/69/node = SubResource("279")
nodes/fragment/69/position = Vector2(80, 420)
nodes/fragment/connections = PackedInt32Array(47, 0, 66, 0, 67, 0, 66, 2, 68, 0, 66, 1, 69, 0, 66, 3, 65, 0, 66, 4, 66, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="281"]
shader = SubResource("280")

[sub_resource type="VisualShaderNodeCustom" id="282"]
default_input_values = [1, Vector3(0, 0, 0), 2, 5, 3, 1.0, 4, 0]
initialized = true
script = ExtResource("47")

[sub_resource type="VisualShaderNodeFloatConstant" id="283"]
constant = 10.0

[sub_resource type="VisualShaderNodeVec3Constant" id="284"]

[sub_resource type="VisualShaderNodeFloatConstant" id="285"]
constant = 1.0

[sub_resource type="VisualShader" id="286"]
code = "shader_type canvas_item;
render_mode blend_mix;



// PerlinNoise4D
vec4 _permute_perlin4d_noise_func(vec4 x) {
	return ((x*34.0)+1.0)*x - floor(((x*34.0)+1.0)*x * (1.0 / 289.0)) * 289.0;
}
float _perlin4dNoiseFunc(vec4 P) {
	vec4 Pi0 = floor(P);
	vec4 Pi1 = Pi0 + 1.0;
	Pi0 = Pi0 - floor(Pi0 * (1.0 / 289.0)) * 289.0;
	Pi1 = Pi1 - floor(Pi1 * (1.0 / 289.0)) * 289.0;
	vec4 Pf0 = fract(P);
	vec4 Pf1 = Pf0 - 1.0;
	vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
	vec4 iy = vec4(Pi0.yy, Pi1.yy);
	vec4 iz0 = vec4(Pi0.zzzz);
	vec4 iz1 = vec4(Pi1.zzzz);
	vec4 iw0 = vec4(Pi0.wwww);
	vec4 iw1 = vec4(Pi1.wwww);
	
	vec4 ixy = _permute_perlin4d_noise_func(_permute_perlin4d_noise_func(ix) + iy);
	vec4 ixy0 = _permute_perlin4d_noise_func(ixy + iz0);
	vec4 ixy1 = _permute_perlin4d_noise_func(ixy + iz1);
	vec4 ixy00 = _permute_perlin4d_noise_func(ixy0 + iw0);
	vec4 ixy01 = _permute_perlin4d_noise_func(ixy0 + iw1);
	vec4 ixy10 = _permute_perlin4d_noise_func(ixy1 + iw0);
	vec4 ixy11 = _permute_perlin4d_noise_func(ixy1 + iw1);
	
	vec4 gx00 = ixy00 * (1.0 / 7.0);
	vec4 gy00 = floor(gx00) * (1.0 / 7.0);
	vec4 gz00 = floor(gy00) * (1.0 / 6.0);
	gx00 = fract(gx00) - 0.5;
	gy00 = fract(gy00) - 0.5;
	gz00 = fract(gz00) - 0.5;
	vec4 gw00 = vec4(0.75) - abs(gx00) - abs(gy00) - abs(gz00);
	vec4 sw00 = step(gw00, vec4(0.0));
	gx00 -= sw00 * (step(0.0, gx00) - 0.5);
	gy00 -= sw00 * (step(0.0, gy00) - 0.5);
	
	vec4 gx01 = ixy01 * (1.0 / 7.0);
	vec4 gy01 = floor(gx01) * (1.0 / 7.0);
	vec4 gz01 = floor(gy01) * (1.0 / 6.0);
	gx01 = fract(gx01) - 0.5;
	gy01 = fract(gy01) - 0.5;
	gz01 = fract(gz01) - 0.5;
	vec4 gw01 = vec4(0.75) - abs(gx01) - abs(gy01) - abs(gz01);
	vec4 sw01 = step(gw01, vec4(0.0));
	gx01 -= sw01 * (step(0.0, gx01) - 0.5);
	gy01 -= sw01 * (step(0.0, gy01) - 0.5);
	
	vec4 gx10 = ixy10 * (1.0 / 7.0);
	vec4 gy10 = floor(gx10) * (1.0 / 7.0);
	vec4 gz10 = floor(gy10) * (1.0 / 6.0);
	gx10 = fract(gx10) - 0.5;
	gy10 = fract(gy10) - 0.5;
	gz10 = fract(gz10) - 0.5;
	vec4 gw10 = vec4(0.75) - abs(gx10) - abs(gy10) - abs(gz10);
	vec4 sw10 = step(gw10, vec4(0.0));
	gx10 -= sw10 * (step(0.0, gx10) - 0.5);
	gy10 -= sw10 * (step(0.0, gy10) - 0.5);
	
	vec4 gx11 = ixy11 * (1.0 / 7.0);
	vec4 gy11 = floor(gx11) * (1.0 / 7.0);
	vec4 gz11 = floor(gy11) * (1.0 / 6.0);
	gx11 = fract(gx11) - 0.5;
	gy11 = fract(gy11) - 0.5;
	gz11 = fract(gz11) - 0.5;
	vec4 gw11 = vec4(0.75) - abs(gx11) - abs(gy11) - abs(gz11);
	vec4 sw11 = step(gw11, vec4(0.0));
	gx11 -= sw11 * (step(0.0, gx11) - 0.5);
	gy11 -= sw11 * (step(0.0, gy11) - 0.5);
	
	vec4 g0000 = vec4(gx00.x,gy00.x,gz00.x,gw00.x);
	vec4 g1000 = vec4(gx00.y,gy00.y,gz00.y,gw00.y);
	vec4 g0100 = vec4(gx00.z,gy00.z,gz00.z,gw00.z);
	vec4 g1100 = vec4(gx00.w,gy00.w,gz00.w,gw00.w);
	vec4 g0010 = vec4(gx10.x,gy10.x,gz10.x,gw10.x);
	vec4 g1010 = vec4(gx10.y,gy10.y,gz10.y,gw10.y);
	vec4 g0110 = vec4(gx10.z,gy10.z,gz10.z,gw10.z);
	vec4 g1110 = vec4(gx10.w,gy10.w,gz10.w,gw10.w);
	vec4 g0001 = vec4(gx01.x,gy01.x,gz01.x,gw01.x);
	vec4 g1001 = vec4(gx01.y,gy01.y,gz01.y,gw01.y);
	vec4 g0101 = vec4(gx01.z,gy01.z,gz01.z,gw01.z);
	vec4 g1101 = vec4(gx01.w,gy01.w,gz01.w,gw01.w);
	vec4 g0011 = vec4(gx11.x,gy11.x,gz11.x,gw11.x);
	vec4 g1011 = vec4(gx11.y,gy11.y,gz11.y,gw11.y);
	vec4 g0111 = vec4(gx11.z,gy11.z,gz11.z,gw11.z);
	vec4 g1111 = vec4(gx11.w,gy11.w,gz11.w,gw11.w);
	
	vec4 norm00 = 1.79284291400159 - 0.85373472095314 * vec4(dot(g0000, g0000), dot(g0100, g0100), dot(g1000, g1000), dot(g1100, g1100));
	g0000 *= norm00.x;
	g0100 *= norm00.y;
	g1000 *= norm00.z;
	g1100 *= norm00.w;
	
	vec4 norm01 = 1.79284291400159 - 0.85373472095314 * vec4(dot(g0001, g0001), dot(g0101, g0101), dot(g1001, g1001), dot(g1101, g1101));
	g0001 *= norm01.x;
	g0101 *= norm01.y;
	g1001 *= norm01.z;
	g1101 *= norm01.w;
	
	vec4 norm10 = 1.79284291400159 - 0.85373472095314 * vec4(dot(g0010, g0010), dot(g0110, g0110), dot(g1010, g1010), dot(g1110, g1110));
	g0010 *= norm10.x;
	g0110 *= norm10.y;
	g1010 *= norm10.z;
	g1110 *= norm10.w;
	
	vec4 norm11 = 1.79284291400159 - 0.85373472095314 * vec4(dot(g0011, g0011), dot(g0111, g0111), dot(g1011, g1011), dot(g1111, g1111));
	g0011 *= norm11.x;
	g0111 *= norm11.y;
	g1011 *= norm11.z;
	g1111 *= norm11.w;
	
	float n0000 = dot(g0000, Pf0);
	float n1000 = dot(g1000, vec4(Pf1.x, Pf0.yzw));
	float n0100 = dot(g0100, vec4(Pf0.x, Pf1.y, Pf0.zw));
	float n1100 = dot(g1100, vec4(Pf1.xy, Pf0.zw));
	float n0010 = dot(g0010, vec4(Pf0.xy, Pf1.z, Pf0.w));
	float n1010 = dot(g1010, vec4(Pf1.x, Pf0.y, Pf1.z, Pf0.w));
	float n0110 = dot(g0110, vec4(Pf0.x, Pf1.yz, Pf0.w));
	float n1110 = dot(g1110, vec4(Pf1.xyz, Pf0.w));
	float n0001 = dot(g0001, vec4(Pf0.xyz, Pf1.w));
	float n1001 = dot(g1001, vec4(Pf1.x, Pf0.yz, Pf1.w));
	float n0101 = dot(g0101, vec4(Pf0.x, Pf1.y, Pf0.z, Pf1.w));
	float n1101 = dot(g1101, vec4(Pf1.xy, Pf0.z, Pf1.w));
	float n0011 = dot(g0011, vec4(Pf0.xy, Pf1.zw));
	float n1011 = dot(g1011, vec4(Pf1.x, Pf0.y, Pf1.zw));
	float n0111 = dot(g0111, vec4(Pf0.x, Pf1.yzw));
	float n1111 = dot(g1111, Pf1);
	
	vec4 fade_xyzw = Pf0 * Pf0 * Pf0 * (Pf0 * (Pf0 * 6.0 - 15.0) + 10.0);
	vec4 n_0w = mix(vec4(n0000, n1000, n0100, n1100), vec4(n0001, n1001, n0101, n1101), fade_xyzw.w);
	vec4 n_1w = mix(vec4(n0010, n1010, n0110, n1110), vec4(n0011, n1011, n0111, n1111), fade_xyzw.w);
	vec4 n_zw = mix(n_0w, n_1w, fade_xyzw.z);
	vec2 n_yzw = mix(n_zw.xy, n_zw.zw, fade_xyzw.y);
	float n_xyzw = mix(n_yzw.x, n_yzw.y, fade_xyzw.x);
	return 2.2 * n_xyzw;
}

void fragment() {
// Input:47
	vec2 n_out47p0 = UV;


// Vector3Constant:72
	vec3 n_out72p0 = vec3(0.000000, 0.000000, 0.000000);


// FloatConstant:71
	float n_out71p0 = 10.000000;


// FloatConstant:73
	float n_out73p0 = 1.000000;


// Input:65
	float n_out65p0 = TIME;


	float n_out70p0;
// PerlinNoise4D:70
	{
		n_out70p0 = _perlin4dNoiseFunc(vec4((vec3(n_out47p0, 0.0).xy + n_out72p0.xy) * n_out71p0, n_out73p0, n_out65p0));
	}


// Output:0
	COLOR.rgb = vec3(n_out70p0);


}
"
graph_offset = Vector2(-42.9457, 76.4218)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(720, 280)
nodes/fragment/47/node = SubResource("245")
nodes/fragment/47/position = Vector2(80, 180)
nodes/fragment/65/node = SubResource("273")
nodes/fragment/65/position = Vector2(100, 520)
nodes/fragment/70/node = SubResource("282")
nodes/fragment/70/position = Vector2(500, 280)
nodes/fragment/71/node = SubResource("283")
nodes/fragment/71/position = Vector2(220, 360)
nodes/fragment/72/node = SubResource("284")
nodes/fragment/72/position = Vector2(80, 260)
nodes/fragment/73/node = SubResource("285")
nodes/fragment/73/position = Vector2(220, 440)
nodes/fragment/connections = PackedInt32Array(47, 0, 70, 0, 71, 0, 70, 2, 65, 0, 70, 4, 73, 0, 70, 3, 70, 0, 0, 0, 72, 0, 70, 1)

[sub_resource type="ShaderMaterial" id="287"]
shader = SubResource("286")

[sub_resource type="VisualShaderNodeInput" id="288"]
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatConstant" id="289"]
constant = 10.0

[sub_resource type="VisualShaderNodeVec3Constant" id="290"]

[sub_resource type="VisualShaderNodeCustom" id="291"]
default_input_values = [1, Vector3(0, 0, 0), 2, 5]
initialized = true
script = ExtResource("48")

[sub_resource type="VisualShader" id="292"]
code = "shader_type canvas_item;
render_mode blend_mix;



// SimplexNoise2D
vec3 _permute_simplex2_noise(vec3 x) {
	return ((x*34.0)+1.0)*x-floor(((x*34.0)+1.0)*x*(1.0/289.0))*289.0;
}

float _simplex2dNoiseFunc(vec2 v) {
	vec4 C = vec4(0.211324865405187,
				0.366025403784439,
				-0.577350269189626,
				0.024390243902439);
	
	vec2 i  = floor(v + dot(v, C.yy) );
	vec2 x0 = v -   i + dot(i, C.xx);
	
	vec2 i1;
	i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
	vec4 x12 = vec4(x0.xy, x0.xy) + C.xxzz;
	x12.xy -= i1;
	
	i = i - floor(i * (1.0 / 289.0)) * 289.0;
	vec3 p = _permute_simplex2_noise(_permute_simplex2_noise(i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0));
	
	vec3 m = max(0.5 - vec3(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)), vec3(0.0));
	m = m * m;
	m = m * m;
	
	vec3 x = 2.0 * fract(p * C.www) - 1.0;
	vec3 h = abs(x) - 0.5;
	vec3 ox = floor(x + 0.5);
	vec3 a0 = x - ox;
	
	m *= 1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h);
	
	vec3 g;
	g.x  = a0.x  * x0.x  + h.x  * x0.y;
	g.yz = a0.yz * x12.xz + h.yz * x12.yw;
	return 130.0 * dot(m, g);
}

void fragment() {
// Input:47
	vec2 n_out47p0 = UV;


// Vector3Constant:72
	vec3 n_out72p0 = vec3(0.000000, 0.000000, 0.000000);


// FloatConstant:71
	float n_out71p0 = 10.000000;


	float n_out74p0;
// SimplexNoise2D:74
	{
		n_out74p0 = _simplex2dNoiseFunc((vec3(n_out47p0, 0.0).xy+n_out72p0.xy)*n_out71p0);
	}


// Output:0
	COLOR.rgb = vec3(n_out74p0);


}
"
graph_offset = Vector2(304, 210)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(720, 280)
nodes/fragment/47/node = SubResource("288")
nodes/fragment/47/position = Vector2(100, 200)
nodes/fragment/71/node = SubResource("289")
nodes/fragment/71/position = Vector2(240, 380)
nodes/fragment/72/node = SubResource("290")
nodes/fragment/72/position = Vector2(100, 280)
nodes/fragment/74/node = SubResource("291")
nodes/fragment/74/position = Vector2(500, 280)
nodes/fragment/connections = PackedInt32Array(47, 0, 74, 0, 72, 0, 74, 1, 71, 0, 74, 2, 74, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="293"]
shader = SubResource("292")

[sub_resource type="VisualShaderNodeFloatConstant" id="294"]
constant = 10.0

[sub_resource type="VisualShaderNodeVec3Constant" id="295"]

[sub_resource type="VisualShaderNodeCustom" id="296"]
default_input_values = [1, Vector3(0, 0, 0), 2, 5, 3, 0]
initialized = true
script = ExtResource("49")

[sub_resource type="VisualShaderNodeInput" id="297"]
input_name = "time"

[sub_resource type="VisualShader" id="298"]
code = "shader_type canvas_item;
render_mode blend_mix;



// SimplexNoise3D
vec4 _permute_simplex3_noise(vec4 x) {
	return ((x * 34.0) + 1.0) * x - floor(((x * 34.0) + 1.0) * x * (1.0 / 289.0)) * 289.0;
}
float _simplex3dNoiseFunc(vec3 v) { 
	vec2 C = vec2(1.0/6.0, 1.0/3.0) ;
	vec4 D = vec4(0.0, 0.5, 1.0, 2.0);
	
	vec3 i  = floor(v + dot(v, vec3(C.y)));
	vec3 x0 = v - i + dot(i, vec3(C.x)) ;
	
	vec3 g = step(x0.yzx, x0.xyz);
	vec3 l = 1.0 - g;
	vec3 i1 = min( g.xyz, l.zxy );
	vec3 i2 = max( g.xyz, l.zxy );
	
	vec3 x1 = x0 - i1 + vec3(C.x);
	vec3 x2 = x0 - i2 + vec3(C.y);
	vec3 x3 = x0 - D.yyy;
	
	i = i - floor(i * (1.0 / 289.0)) * 289.0;
	vec4 p = _permute_simplex3_noise(_permute_simplex3_noise(_permute_simplex3_noise(
	 		i.z + vec4(0.0, i1.z, i2.z, 1.0))
		+   i.y + vec4(0.0, i1.y, i2.y, 1.0))
		+   i.x + vec4(0.0, i1.x, i2.x, 1.0));
	
	float n_ = 0.142857142857;
	vec3  ns = n_ * D.wyz - D.xzx;
	
	vec4 j = p - 49.0 * floor(p * ns.z * ns.z);
	
	vec4 x_ = floor(j * ns.z);
	vec4 y_ = floor(j - 7.0 * x_ );
	
	vec4 x = x_ *ns.x + vec4(ns.y);
	vec4 y = y_ *ns.x + vec4(ns.y);
	vec4 h = 1.0 - abs(x) - abs(y);
	
	vec4 b0 = vec4( x.xy, y.xy );
	vec4 b1 = vec4( x.zw, y.zw );
	
	vec4 s0 = floor(b0)*2.0 + 1.0;
	vec4 s1 = floor(b1)*2.0 + 1.0;
	vec4 sh = -step(h, vec4(0.0));
	
	vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
	vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;
	
	vec3 p0 = vec3(a0.xy,h.x);
	vec3 p1 = vec3(a0.zw,h.y);
	vec3 p2 = vec3(a1.xy,h.z);
	vec3 p3 = vec3(a1.zw,h.w);
	
	vec4 norm = 2.79284291400159 - 0.85373472095314 * vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3));
	p0 *= norm.x;
	p1 *= norm.y;
	p2 *= norm.z;
	p3 *= norm.w;
	
	vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), vec4(0.0));
	m = m * m;
	return 22.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );
}

void fragment() {
// Input:47
	vec2 n_out47p0 = UV;


// Vector3Constant:76
	vec3 n_out76p0 = vec3(0.000000, 0.000000, 0.000000);


// FloatConstant:75
	float n_out75p0 = 10.000000;


// Input:78
	float n_out78p0 = TIME;


	float n_out77p0;
// SimplexNoise3D:77
	{
		n_out77p0 = _simplex3dNoiseFunc(vec3((vec3(n_out47p0, 0.0).xy + n_out76p0.xy) * n_out75p0, n_out78p0));
	}


// Output:0
	COLOR.rgb = vec3(n_out77p0);


}
"
graph_offset = Vector2(244, 228)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(720, 280)
nodes/fragment/47/node = SubResource("288")
nodes/fragment/47/position = Vector2(80, 180)
nodes/fragment/75/node = SubResource("294")
nodes/fragment/75/position = Vector2(220, 360)
nodes/fragment/76/node = SubResource("295")
nodes/fragment/76/position = Vector2(80, 260)
nodes/fragment/77/node = SubResource("296")
nodes/fragment/77/position = Vector2(500, 280)
nodes/fragment/78/node = SubResource("297")
nodes/fragment/78/position = Vector2(100, 440)
nodes/fragment/connections = PackedInt32Array(47, 0, 77, 0, 76, 0, 77, 1, 75, 0, 77, 2, 78, 0, 77, 3, 77, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="299"]
shader = SubResource("298")

[sub_resource type="VisualShaderNodeVec3Constant" id="300"]

[sub_resource type="VisualShaderNodeCustom" id="301"]
default_input_values = [1, Vector3(0, 0, 0), 2, 5, 3, 1, 4, 0]
initialized = true
script = ExtResource("50")

[sub_resource type="VisualShaderNodeFloatConstant" id="302"]
constant = 10.0

[sub_resource type="VisualShaderNodeFloatConstant" id="303"]
constant = 1.0

[sub_resource type="VisualShader" id="304"]
code = "shader_type canvas_item;
render_mode blend_mix;



// SimplexNoise4D
vec4 _permute_4_s4_noise(vec4 x) {
	return ((x * 34.0) + 1.0) * x - floor(((x * 34.0) + 1.0) * x * (1.0 / 289.0)) * 289.0;
}
float _permute_s4_noise(float x) {
	return ((x * 34.0) + 1.0) * x - floor(((x * 34.0) + 1.0) * x * (1.0 / 289.0)) * 289.0;
}
vec4 _grad4_s4_noise(float j, vec4 ip) {
	vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);
	vec4 p, s;
	p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;
	p.w = 1.5 - dot(abs(p.xyz), ones.xyz);
	s = vec4(lessThan(p, vec4(0.0)));
	p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www; 
	return p;
}
float _simplex4dNoiseFunc(vec4 v) {
	vec4 C = vec4( 0.138196601125011,
				0.276393202250021,
				0.414589803375032,
				-0.447213595499958);
	
	vec4 i  = floor(v + dot(v, vec4(0.309016994374947451)) );
	vec4 x0 = v -   i + dot(i, C.xxxx);
	
	vec4 i0;
	vec3 isX = step( x0.yzw, x0.xxx );
	vec3 isYZ = step( x0.zww, x0.yyz );
	i0.x = isX.x + isX.y + isX.z;
	i0.yzw = 1.0 - isX;
	i0.y += isYZ.x + isYZ.y;
	i0.zw += 1.0 - isYZ.xy;
	i0.z += isYZ.z;
	i0.w += 1.0 - isYZ.z;
	
	vec4 i3 = clamp( i0, 0.0, 1.0 );
	vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );
	vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );
	
	vec4 x1 = x0 - i1 + C.xxxx;
	vec4 x2 = x0 - i2 + C.yyyy;
	vec4 x3 = x0 - i3 + C.zzzz;
	vec4 x4 = x0 + C.wwww;
	
	i = i - floor(i * (1.0 / 289.0)) * 289.0;
	float j0 = _permute_s4_noise( _permute_s4_noise( _permute_s4_noise( _permute_s4_noise(i.w) + i.z) + i.y) + i.x);
	vec4 j1 = _permute_4_s4_noise( _permute_4_s4_noise( _permute_4_s4_noise( _permute_4_s4_noise (
				i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))
				+ i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))
				+ i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))
				+ i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));
	
	vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;
	
	vec4 p0 = _grad4_s4_noise(j0,   ip);
	vec4 p1 = _grad4_s4_noise(j1.x, ip);
	vec4 p2 = _grad4_s4_noise(j1.y, ip);
	vec4 p3 = _grad4_s4_noise(j1.z, ip);
	vec4 p4 = _grad4_s4_noise(j1.w, ip);
	
	vec4 norm = 2.79284291400159 - 1.85373472095314 * vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3));
	p0 *= norm.x;
	p1 *= norm.y;
	p2 *= norm.z;
	p3 *= norm.w;
	p4 *= 2.79284291400159 - 1.85373472095314 * dot(p4,p4);
	
	vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), vec3(0.0));
	vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)), vec2(0.0));
	m0 = m0 * m0;
	m1 = m1 * m1;
	return 33.0 *(dot(m0*m0, vec3(dot(p0, x0), dot(p1, x1), dot(p2, x2)))
				+ dot(m1*m1, vec2(dot(p3, x3), dot(p4, x4))));
}

void fragment() {
// Input:47
	vec2 n_out47p0 = UV;


// Vector3Constant:80
	vec3 n_out80p0 = vec3(0.000000, 0.000000, 0.000000);


// FloatConstant:82
	float n_out82p0 = 10.000000;


// FloatConstant:83
	float n_out83p0 = 1.000000;


// Input:78
	float n_out78p0 = TIME;


	float n_out81p0;
// SimplexNoise4D:81
	{
		n_out81p0 = _simplex4dNoiseFunc(vec4((vec3(n_out47p0, 0.0).xy + n_out80p0.xy) * n_out82p0, n_out83p0, n_out78p0));
	}


// Output:0
	COLOR.rgb = vec3(n_out81p0);


}
"
graph_offset = Vector2(394, 329)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(840, 400)
nodes/fragment/47/node = SubResource("288")
nodes/fragment/47/position = Vector2(160, 260)
nodes/fragment/78/node = SubResource("297")
nodes/fragment/78/position = Vector2(180, 600)
nodes/fragment/80/node = SubResource("300")
nodes/fragment/80/position = Vector2(160, 340)
nodes/fragment/81/node = SubResource("301")
nodes/fragment/81/position = Vector2(600, 400)
nodes/fragment/82/node = SubResource("302")
nodes/fragment/82/position = Vector2(300, 440)
nodes/fragment/83/node = SubResource("303")
nodes/fragment/83/position = Vector2(300, 520)
nodes/fragment/connections = PackedInt32Array(47, 0, 81, 0, 80, 0, 81, 1, 82, 0, 81, 2, 83, 0, 81, 3, 78, 0, 81, 4, 81, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="305"]
shader = SubResource("304")

[sub_resource type="VisualShaderNodeCustom" id="306"]
default_input_values = [1, Vector3(0, 0, 0), 2, 5, 3, 1]
initialized = true
script = ExtResource("51")

[sub_resource type="VisualShaderNodeVec3Constant" id="307"]

[sub_resource type="VisualShaderNodeFloatConstant" id="308"]
constant = 10.0

[sub_resource type="VisualShaderNodeFloatConstant" id="309"]
constant = 1.0

[sub_resource type="VisualShader" id="310"]
code = "shader_type canvas_item;
render_mode blend_mix;



// WorleyNoise2D
vec2 _cellular2dNoiseFunc(vec2 P, float _jitter_w2d) {
	float K = 0.142857142857; // 1/7
	float Ko = 0.428571428571; // 3/7
	
	vec2 Pi = floor(P) - floor(floor(P) * (1.0 / 289.0)) * 289.0;
	vec2 Pf = fract(P);
	vec3 oi = vec3(-1.0, 0.0, 1.0);
	vec3 of = vec3(-0.5, 0.5, 1.5);
	vec3 px = (34.0*(Pi.x+oi)+1.0)*(Pi.x+oi)-floor((34.0*(Pi.x+oi)+1.0)*(Pi.x+oi)*(1.0/289.0))* 289.0;
	vec3 p = (34.0*(px.x+Pi.y+ oi)+1.0)*(px.x+Pi.y+ oi)-floor((34.0*(px.x+Pi.y+oi)+1.0)*(px.x+Pi.y+ oi)*(1.0/289.0))*289.0;
	vec3 ox = fract(p*K) - Ko;
	vec3 oy = (floor(p*K) - floor(floor(p*K) * (1.0 / 7.0)) * 7.0) * K - Ko;
	vec3 dx = Pf.x + 0.5 + _jitter_w2d*ox;
	vec3 dy = Pf.y - of + _jitter_w2d*oy;
	vec3 d1 = dx * dx + dy * dy;
	p = (34.0*(px.y+Pi.y+oi)+1.0)*(px.y+Pi.y+oi)-floor((34.0*(px.y+Pi.y+oi)+1.0)*(px.y+Pi.y+oi)*(1.0/289.0))*289.0;
	ox = fract(p*K) - Ko;
	oy = (floor(p*K) - floor(floor(p*K) * (1.0 / 7.0)) * 7.0) * K - Ko;
	dx = Pf.x - 0.5 + _jitter_w2d*ox;
	dy = Pf.y - of + _jitter_w2d*oy;
	vec3 d2 = dx * dx + dy * dy;
	p = (34.0*(px.z+Pi.y+oi)+1.0)*(px.z+Pi.y+oi)-floor((34.0*(px.z+Pi.y+oi)+1.0)*(px.z+Pi.y+oi)*(1.0/289.0))*289.0;
	ox = fract(p*K) - Ko;
	oy = (floor(p*K) - floor(floor(p*K) * (1.0 / 7.0)) * 7.0) * K - Ko;
	dx = Pf.x - 1.5 + _jitter_w2d*ox;
	dy = Pf.y - of + _jitter_w2d*oy;
	vec3 d3 = dx * dx + dy * dy;
	vec3 d1a = min(d1, d2);
	d2 = max(d1, d2);
	d2 = min(d2, d3);
	d1 = min(d1a, d2);
	d2 = max(d1a, d2);
	d1.xy = (d1.x < d1.y) ? d1.xy : d1.yx;
	d1.xz = (d1.x < d1.z) ? d1.xz : d1.zx;
	d1.yz = min(d1.yz, d2.yz);
	d1.y = min(d1.y, d1.z);
	d1.y = min(d1.y, d2.x);
	return sqrt(d1.xy);
}

void fragment() {
// Input:47
	vec2 n_out47p0 = UV;


// Vector3Constant:85
	vec3 n_out85p0 = vec3(0.000000, 0.000000, 0.000000);


// FloatConstant:86
	float n_out86p0 = 10.000000;


// FloatConstant:87
	float n_out87p0 = 1.000000;


	float n_out84p0;
	float n_out84p1;
// WorleyNoise2D:84
	{
		vec2 n_out84p0n_out84p1 = _cellular2dNoiseFunc((vec3(n_out47p0, 0.0).xy+n_out85p0.xy)*n_out86p0, min(max(n_out87p0, 0.0), 1.0));
		n_out84p0 = n_out84p0n_out84p1.x;
		n_out84p1 = n_out84p0n_out84p1.y;
	}


// Output:0
	COLOR.rgb = vec3(n_out84p0);


}
"
graph_offset = Vector2(3.74271, 11.8198)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(740, 280)
nodes/fragment/47/node = SubResource("288")
nodes/fragment/47/position = Vector2(100, 140)
nodes/fragment/84/node = SubResource("306")
nodes/fragment/84/position = Vector2(500, 280)
nodes/fragment/85/node = SubResource("307")
nodes/fragment/85/position = Vector2(90, 230)
nodes/fragment/86/node = SubResource("308")
nodes/fragment/86/position = Vector2(230, 330)
nodes/fragment/87/node = SubResource("309")
nodes/fragment/87/position = Vector2(230, 410)
nodes/fragment/connections = PackedInt32Array(85, 0, 84, 1, 86, 0, 84, 2, 87, 0, 84, 3, 47, 0, 84, 0, 84, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="311"]
shader = SubResource("310")

[sub_resource type="VisualShaderNodeCustom" id="312"]
default_input_values = [1, Vector3(0, 0, 0), 2, 5, 3, 1]
initialized = true
script = ExtResource("52")

[sub_resource type="VisualShaderNodeVec3Constant" id="313"]

[sub_resource type="VisualShaderNodeFloatConstant" id="314"]
constant = 10.0

[sub_resource type="VisualShaderNodeFloatConstant" id="315"]
constant = 1.0

[sub_resource type="VisualShader" id="316"]
code = "shader_type canvas_item;
render_mode blend_mix;



// WorleyNoise2x2
float _cellular2x2NoiseFunc(vec2 P, float _jitter_w2x2) {
	float K = 0.142857142857; // 1/7
	float K2 = 0.0714285714285; // K/2
	
	vec2 Pi = floor(P) - floor(floor(P) * (1.0 / 289.0)) * 289.0;
	vec2 Pf = fract(P);
	vec4 Pfx = Pf.x + vec4(-0.5, -1.5, -0.5, -1.5);
	vec4 Pfy = Pf.y + vec4(-0.5, -0.5, -1.5, -1.5);
	vec4 p = ((34.0*(Pi.x + vec4(0.0, 1.0, 0.0, 1.0))+1.0)*(Pi.x + vec4(0.0, 1.0, 0.0, 1.0)))-floor(((34.0*(Pi.x + vec4(0.0, 1.0, 0.0, 1.0))+1.0)*(Pi.x + vec4(0.0, 1.0, 0.0, 1.0)))*(1.0/289.0))*289.0;
	p = ((34.0*(p + Pi.y + vec4(0.0, 0.0, 1.0, 1.0))+1.0)*(p + Pi.y + vec4(0.0, 0.0, 1.0, 1.0)))-floor(((34.0*(p + Pi.y + vec4(0.0, 0.0, 1.0, 1.0))+1.0)*(p + Pi.y + vec4(0.0, 0.0, 1.0, 1.0)))*(1.0/289.0))*289.0;
	vec4 ox = (p - floor(p * (1.0 / 7.0)) * 7.0)*K+K2;
	vec4 oy = (floor(p*K) - floor(floor(p*K) * (1.0 / 7.0)) * 7.0)*K+K2;
	vec4 dx = Pfx + _jitter_w2x2*ox;
	vec4 dy = Pfy + _jitter_w2x2*oy;
	vec4 d = dx * dx + dy * dy;
	d.xy = min(d.xy, d.zw);
	d.x = min(d.x, d.y);
	return sqrt(d.x);
}

void fragment() {
// Input:47
	vec2 n_out47p0 = UV;


// Vector3Constant:89
	vec3 n_out89p0 = vec3(0.000000, 0.000000, 0.000000);


// FloatConstant:90
	float n_out90p0 = 10.000000;


// FloatConstant:91
	float n_out91p0 = 1.000000;


	float n_out88p0;
// WorleyNoise2x2:88
	{
		n_out88p0 = _cellular2x2NoiseFunc((vec3(n_out47p0, 0.0).xy+n_out89p0.xy)*n_out90p0, min(max(n_out91p0, 0.0), 1.0));
	}


// Output:0
	COLOR.rgb = vec3(n_out88p0);


}
"
graph_offset = Vector2(240, 220)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(740, 280)
nodes/fragment/47/node = SubResource("288")
nodes/fragment/47/position = Vector2(100, 140)
nodes/fragment/88/node = SubResource("312")
nodes/fragment/88/position = Vector2(520, 280)
nodes/fragment/89/node = SubResource("313")
nodes/fragment/89/position = Vector2(100, 240)
nodes/fragment/90/node = SubResource("314")
nodes/fragment/90/position = Vector2(240, 340)
nodes/fragment/91/node = SubResource("315")
nodes/fragment/91/position = Vector2(240, 420)
nodes/fragment/connections = PackedInt32Array(47, 0, 88, 0, 89, 0, 88, 1, 90, 0, 88, 2, 91, 0, 88, 3, 88, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="317"]
shader = SubResource("316")

[sub_resource type="VisualShaderNodeCustom" id="318"]
default_input_values = [1, Vector3(0, 0, 0), 2, 5, 3, 1, 4, 0]
initialized = true
script = ExtResource("53")

[sub_resource type="VisualShaderNodeVec3Constant" id="319"]

[sub_resource type="VisualShaderNodeFloatConstant" id="320"]
constant = 10.0

[sub_resource type="VisualShaderNodeFloatConstant" id="321"]
constant = 1.0

[sub_resource type="VisualShaderNodeInput" id="322"]
input_name = "time"

[sub_resource type="VisualShader" id="323"]
code = "shader_type canvas_item;
render_mode blend_mix;



// WorleyNoise2x2x2
float _cellular2x2x2NoiseFunc(vec3 P, float _jitter_w2x2x2) {
	float K = 0.142857142857;
	float Ko = 0.428571428571;
	float K2 = 0.020408163265306;
	float Kz = 0.166666666667;
	float Kzo = 0.416666666667;
	
	vec3 Pi = floor(P)- floor(floor(P) * (1.0 / 289.0)) * 289.0;
	vec3 Pf = fract(P);
	vec4 Pfx = Pf.x + vec4(0.0, -1.0, 0.0, -1.0);
	vec4 Pfy = Pf.y + vec4(0.0, 0.0, -1.0, -1.0);
	vec4 p = (34.0*(Pi.x+vec4(0.0,1.0,0.0,1.0))+1.0)*(Pi.x+vec4(0.0,1.0,0.0,1.0))-floor((34.0*(Pi.x+vec4(0.0,1.0,0.0,1.0))+1.0)*(Pi.x+vec4(0.0,1.0,0.0,1.0))*(1.0/289.0))*289.0;
	p = (34.0*(p+Pi.y+vec4(0.0,0.0,1.0,1.0))+1.0)*(p+Pi.y+vec4(0.0,0.0,1.0,1.0))-floor((34.0*(p+Pi.y+vec4(0.0,0.0,1.0,1.0))+1.0)*(p+Pi.y+vec4(0.0,0.0,1.0,1.0))*(1.0/289.0))*289.0;
	vec4 p1 = (34.0*(p+Pi.z)+1.0)*(p+Pi.z)-floor((34.0*(p+Pi.z)+1.0)*(p+Pi.z)*(1.0/289.0))*289.0;
	vec4 p2 = (34.0*(p+Pi.z+vec4(1.0))+1.0)*(p+Pi.z+vec4(1.0))-floor((34.0*(p+Pi.z+vec4(1.0))+1.0)*(p+Pi.z+vec4(1.0))*(1.0/289.0))*289.0;
	vec4 ox1 = fract(p1*K) - Ko;
	vec4 oy1 = (floor(p1*K) - floor(floor(p1*K) * (1.0 / 7.0)) * 7.0)*K - Ko;
	vec4 oz1 = floor(p1*K2)*Kz - Kzo;
	vec4 ox2 = fract(p2*K) - Ko;
	vec4 oy2 = (floor(p2*K) - floor(floor(p2*K) * (1.0 / 7.0)) * 7.0)*K - Ko;
	vec4 oz2 = floor(p2*K2)*Kz - Kzo;
	vec4 dx1 = Pfx + _jitter_w2x2x2*ox1;
	vec4 dy1 = Pfy + _jitter_w2x2x2*oy1;
	vec4 dz1 = Pf.z + _jitter_w2x2x2*oz1;
	vec4 dx2 = Pfx + _jitter_w2x2x2*ox2;
	vec4 dy2 = Pfy + _jitter_w2x2x2*oy2;
	vec4 dz2 = Pf.z - 1.0 + _jitter_w2x2x2*oz2;
	vec4 d1 = dx1 * dx1 + dy1 * dy1 + dz1 * dz1;
	vec4 d2 = dx2 * dx2 + dy2 * dy2 + dz2 * dz2;
	d1 = min(d1, d2);
	d1.xy = min(d1.xy, d1.wz);
	d1.x = min(d1.x, d1.y);
	return sqrt(d1.x);
}

void fragment() {
// Input:47
	vec2 n_out47p0 = UV;


// Vector3Constant:93
	vec3 n_out93p0 = vec3(0.000000, 0.000000, 0.000000);


// FloatConstant:94
	float n_out94p0 = 10.000000;


// FloatConstant:95
	float n_out95p0 = 1.000000;


// Input:96
	float n_out96p0 = TIME;


	float n_out92p0;
// WorleyNoise2x2x2:92
	{
		n_out92p0 = _cellular2x2x2NoiseFunc(vec3((vec3(n_out47p0, 0.0).xy + n_out93p0.xy) * n_out94p0, n_out96p0), min(max(n_out95p0, 0.0), 1.0));
	}


// Output:0
	COLOR.rgb = vec3(n_out92p0);


}
"
graph_offset = Vector2(-10.3489, 46.022)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(760, 280)
nodes/fragment/47/node = SubResource("288")
nodes/fragment/47/position = Vector2(120, 140)
nodes/fragment/92/node = SubResource("318")
nodes/fragment/92/position = Vector2(520, 280)
nodes/fragment/93/node = SubResource("319")
nodes/fragment/93/position = Vector2(120, 220)
nodes/fragment/94/node = SubResource("320")
nodes/fragment/94/position = Vector2(260, 320)
nodes/fragment/95/node = SubResource("321")
nodes/fragment/95/position = Vector2(260, 400)
nodes/fragment/96/node = SubResource("322")
nodes/fragment/96/position = Vector2(140, 480)
nodes/fragment/connections = PackedInt32Array(47, 0, 92, 0, 93, 0, 92, 1, 94, 0, 92, 2, 95, 0, 92, 3, 96, 0, 92, 4, 92, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="324"]
shader = SubResource("323")

[sub_resource type="VisualShaderNodeFloatConstant" id="325"]
constant = 1.0

[sub_resource type="VisualShaderNodeCustom" id="326"]
default_input_values = [1, Vector3(0, 0, 0), 2, 5, 3, 1, 4, 0]
initialized = true
script = ExtResource("54")

[sub_resource type="VisualShaderNodeVec3Constant" id="327"]

[sub_resource type="VisualShaderNodeFloatConstant" id="328"]
constant = 10.0

[sub_resource type="VisualShader" id="329"]
code = "shader_type canvas_item;
render_mode blend_mix;



// WorleyNoise3D
vec2 _cellular3dNoiseFunc(vec3 P, float _jitter_w3d) {
	float K = 0.142857142857;
	float Ko = 0.428571428571;
	float K2 = 0.020408163265306;
	float Kz = 0.166666666667;
	float Kzo = 0.416666666667;
	
	vec3 Pi = floor(P) - floor(floor(P) * (1.0 / 289.0)) * 289.0;
	vec3 Pf = fract(P) - 0.5;
	
	vec3 Pfx = Pf.x + vec3(1.0, 0.0, -1.0);
	vec3 Pfy = Pf.y + vec3(1.0, 0.0, -1.0);
	vec3 Pfz = Pf.z + vec3(1.0, 0.0, -1.0);
	
	vec3 p = ((34.0*(Pi.x+vec3(-1.0,0.0,1.0))+1.0)*(Pi.x+vec3(-1.0,0.0,1.0)))-floor(((34.0*(Pi.x+vec3(-1.0,0.0,1.0))+1.0)
				*(Pi.x+vec3(-1.0,0.0,1.0)))*(1.0/289.0))*289.0;
	vec3 p1 = ((34.0*(p+Pi.y-1.0)+1.0)*(p+Pi.y-1.0))-floor(((34.0*(p+Pi.y-1.0)+1.0)*(p+Pi.y-1.0))*(1.0/289.0))*289.0;
	vec3 p2 = ((34.0*(p+Pi.y)+1.0)*(p+Pi.y))-floor(((34.0*(p+Pi.y)+1.0)*(p+Pi.y))*(1.0/289.0))*289.0;
	vec3 p3 = ((34.0*(p+Pi.y+1.0)+1.0)*(p+Pi.y+1.0))-floor(((34.0*(p+Pi.y+1.0)+1.0)*(p+Pi.y+1.0))*(1.0/289.0))*289.0;
	
	vec3 p11 = ((34.0*(p1+Pi.z-1.0)+1.0)*(p1+Pi.z-1.0))-floor(((34.0*(p1+Pi.z-1.0)+1.0)*(p1+Pi.z-1.0))*(1.0/289.0))*289.0;
	vec3 p12 = ((34.0*(p1+Pi.z)+1.0)*(p1+Pi.z))-floor(((34.0*(p1+Pi.z)+1.0)*(p1+Pi.z))*(1.0/289.0))*289.0;
	vec3 p13 = ((34.0*(p1+Pi.z+1.0)+1.0)*(p1+Pi.z+1.0))-floor(((34.0*(p1+Pi.z+1.0)+1.0)*(p1+Pi.z+1.0))*(1.0/289.0))*289.0;
	
	vec3 p21 = ((34.0*(p2+Pi.z-1.0)+1.0)*(p2+Pi.z-1.0))-floor(((34.0*(p2+Pi.z-1.0)+1.0)*(p2+Pi.z-1.0))*(1.0/289.0))*289.0;
	vec3 p22 = ((34.0*(p2+Pi.z)+1.0)*(p2+Pi.z))-floor(((34.0*(p2+Pi.z)+1.0)*(p2+Pi.z))*(1.0/289.0))*289.0;
	vec3 p23 = ((34.0*(p2+Pi.z+1.0)+1.0)*(p2+Pi.z+1.0))-floor(((34.0*(p2+Pi.z+1.0)+1.0)*(p2+Pi.z+1.0))*(1.0/289.0))*289.0;
	
	vec3 p31 = ((34.0*(p3+Pi.z-1.0)+1.0)*(p3+Pi.z-1.0))-floor(((34.0*(p3+Pi.z-1.0)+1.0)*(p3+Pi.z-1.0))*(1.0/289.0))*289.0;
	vec3 p32 = ((34.0*(p3+Pi.z)+1.0)*(p3+Pi.z))-floor(((34.0*(p3+Pi.z)+1.0)*(p3+Pi.z))*(1.0/289.0))*289.0;
	vec3 p33 = ((34.0*(p3+Pi.z+1.0)+1.0)*(p3+Pi.z+1.0))-floor(((34.0*(p3+Pi.z+1.0)+1.0)*(p3+Pi.z+1.0))*(1.0/289.0))*289.0;
	
	vec3 ox11 = fract(p11*K) - Ko;
	vec3 oy11 = ((floor(p11*K))-floor((floor(p11*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz11 = floor(p11*K2)*Kz - Kzo;
	
	vec3 ox12 = fract(p12*K) - Ko;
	vec3 oy12 = ((floor(p12*K))-floor((floor(p12*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz12 = floor(p12*K2)*Kz - Kzo;
	
	vec3 ox13 = fract(p13*K) - Ko;
	vec3 oy13 = ((floor(p13*K))-floor((floor(p13*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz13 = floor(p13*K2)*Kz - Kzo;
	
	vec3 ox21 = fract(p21*K) - Ko;
	vec3 oy21 = ((floor(p21*K))-floor((floor(p21*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz21 = floor(p21*K2)*Kz - Kzo;
	
	vec3 ox22 = fract(p22*K) - Ko;
	vec3 oy22 = ((floor(p22*K))-floor((floor(p22*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz22 = floor(p22*K2)*Kz - Kzo;
	
	vec3 ox23 = fract(p23*K) - Ko;
	vec3 oy23 = ((floor(p23*K))-floor((floor(p23*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz23 = floor(p23*K2)*Kz - Kzo;
	
	vec3 ox31 = fract(p31*K) - Ko;
	vec3 oy31 = ((floor(p31*K))-floor((floor(p31*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz31 = floor(p31*K2)*Kz - Kzo;
	
	vec3 ox32 = fract(p32*K) - Ko;
	vec3 oy32 = ((floor(p32*K))-floor((floor(p32*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz32 = floor(p32*K2)*Kz - Kzo;
	
	vec3 ox33 = fract(p33*K) - Ko;
	vec3 oy33 = ((floor(p33*K))-floor((floor(p33*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz33 = floor(p33*K2)*Kz - Kzo;
	
	vec3 dx11 = Pfx + _jitter_w3d*ox11;
	vec3 dy11 = Pfy.x + _jitter_w3d*oy11;
	vec3 dz11 = Pfz.x + _jitter_w3d*oz11;
	
	vec3 dx12 = Pfx + _jitter_w3d*ox12;
	vec3 dy12 = Pfy.x + _jitter_w3d*oy12;
	vec3 dz12 = Pfz.y + _jitter_w3d*oz12;
	
	vec3 dx13 = Pfx + _jitter_w3d*ox13;
	vec3 dy13 = Pfy.x + _jitter_w3d*oy13;
	vec3 dz13 = Pfz.z + _jitter_w3d*oz13;
	
	vec3 dx21 = Pfx + _jitter_w3d*ox21;
	vec3 dy21 = Pfy.y + _jitter_w3d*oy21;
	vec3 dz21 = Pfz.x + _jitter_w3d*oz21;
	
	vec3 dx22 = Pfx + _jitter_w3d*ox22;
	vec3 dy22 = Pfy.y + _jitter_w3d*oy22;
	vec3 dz22 = Pfz.y + _jitter_w3d*oz22;
	
	vec3 dx23 = Pfx + _jitter_w3d*ox23;
	vec3 dy23 = Pfy.y + _jitter_w3d*oy23;
	vec3 dz23 = Pfz.z + _jitter_w3d*oz23;
	
	vec3 dx31 = Pfx + _jitter_w3d*ox31;
	vec3 dy31 = Pfy.z + _jitter_w3d*oy31;
	vec3 dz31 = Pfz.x + _jitter_w3d*oz31;
	
	vec3 dx32 = Pfx + _jitter_w3d*ox32;
	vec3 dy32 = Pfy.z + _jitter_w3d*oy32;
	vec3 dz32 = Pfz.y + _jitter_w3d*oz32;
	
	vec3 dx33 = Pfx + _jitter_w3d*ox33;
	vec3 dy33 = Pfy.z + _jitter_w3d*oy33;
	vec3 dz33 = Pfz.z + _jitter_w3d*oz33;
	
	vec3 d11 = dx11 * dx11 + dy11 * dy11 + dz11 * dz11;
	vec3 d12 = dx12 * dx12 + dy12 * dy12 + dz12 * dz12;
	vec3 d13 = dx13 * dx13 + dy13 * dy13 + dz13 * dz13;
	vec3 d21 = dx21 * dx21 + dy21 * dy21 + dz21 * dz21;
	vec3 d22 = dx22 * dx22 + dy22 * dy22 + dz22 * dz22;
	vec3 d23 = dx23 * dx23 + dy23 * dy23 + dz23 * dz23;
	vec3 d31 = dx31 * dx31 + dy31 * dy31 + dz31 * dz31;
	vec3 d32 = dx32 * dx32 + dy32 * dy32 + dz32 * dz32;
	vec3 d33 = dx33 * dx33 + dy33 * dy33 + dz33 * dz33;

	vec3 d1a = min(d11, d12);
	d12 = max(d11, d12);
	d11 = min(d1a, d13);
	d13 = max(d1a, d13);
	d12 = min(d12, d13);
	vec3 d2a = min(d21, d22);
	d22 = max(d21, d22);
	d21 = min(d2a, d23);
	d23 = max(d2a, d23);
	d22 = min(d22, d23);
	vec3 d3a = min(d31, d32);
	d32 = max(d31, d32);
	d31 = min(d3a, d33);
	d33 = max(d3a, d33);
	d32 = min(d32, d33);
	vec3 da = min(d11, d21);
	d21 = max(d11, d21);
	d11 = min(da, d31);
	d31 = max(da, d31);
	d11.xy = (d11.x < d11.y) ? d11.xy : d11.yx;
	d11.xz = (d11.x < d11.z) ? d11.xz : d11.zx;
	d12 = min(d12, d21);
	d12 = min(d12, d22);
	d12 = min(d12, d31);
	d12 = min(d12, d32);
	d11.yz = min(d11.yz,d12.xy);
	d11.y = min(d11.y,d12.z);
	d11.y = min(d11.y,d11.z);
	return sqrt(d11.xy);
}

void fragment() {
// Input:47
	vec2 n_out47p0 = UV;


// Vector3Constant:98
	vec3 n_out98p0 = vec3(0.000000, 0.000000, 0.000000);


// FloatConstant:99
	float n_out99p0 = 10.000000;


// FloatConstant:100
	float n_out100p0 = 1.000000;


// Input:96
	float n_out96p0 = TIME;


	float n_out97p0;
	float n_out97p1;
// WorleyNoise3D:97
	{
		vec2 n_out97p0n_out97p1 = _cellular3dNoiseFunc(vec3((vec3(n_out47p0, 0.0).xy+n_out98p0.xy)*n_out99p0, n_out96p0), min(max(n_out100p0, 0.0), 1.0));
		n_out97p0 = n_out97p0n_out97p1.x;
		n_out97p1 = n_out97p0n_out97p1.y;
	}


// Output:0
	COLOR.rgb = vec3(n_out97p0);


}
"
graph_offset = Vector2(285, 205)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(760, 280)
nodes/fragment/47/node = SubResource("288")
nodes/fragment/47/position = Vector2(120, 140)
nodes/fragment/96/node = SubResource("322")
nodes/fragment/96/position = Vector2(140, 500)
nodes/fragment/97/node = SubResource("326")
nodes/fragment/97/position = Vector2(540, 280)
nodes/fragment/98/node = SubResource("327")
nodes/fragment/98/position = Vector2(120, 220)
nodes/fragment/99/node = SubResource("328")
nodes/fragment/99/position = Vector2(260, 320)
nodes/fragment/100/node = SubResource("325")
nodes/fragment/100/position = Vector2(260, 400)
nodes/fragment/connections = PackedInt32Array(47, 0, 97, 0, 98, 0, 97, 1, 99, 0, 97, 2, 100, 0, 97, 3, 96, 0, 97, 4, 97, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="330"]
shader = SubResource("329")

[sub_resource type="VisualShaderNodeTexture" id="332"]
expanded_output_ports = [0]
source = 2

[sub_resource type="VisualShaderNodeFloatConstant" id="333"]
constant = 0.5

[sub_resource type="VisualShaderNodeFloatConstant" id="334"]
constant = 2.0

[sub_resource type="VisualShaderNodeFloatConstant" id="335"]
constant = 10.0

[sub_resource type="VisualShaderNodeCustom" id="610"]
default_input_values = [1, 1.0, 2, 1.0, 3, 1.0]
initialized = true
script = ExtResource("23")

[sub_resource type="VisualShader" id="336"]
code = "shader_type canvas_item;
render_mode blend_mix;



// BCSAdjustment
vec3 _applyBCS(vec3 _input_rgb_color, vec3 _brighntess_contrast_saturation_vec) {
	_input_rgb_color = mix(vec3(0.0), _input_rgb_color, _brighntess_contrast_saturation_vec.x);
	_input_rgb_color = mix(vec3(0.5), _input_rgb_color, _brighntess_contrast_saturation_vec.y);
	_input_rgb_color = mix(vec3(dot(vec3(1.0), _input_rgb_color) * 0.33333), _input_rgb_color, _brighntess_contrast_saturation_vec.z);
	return _input_rgb_color;
}

void fragment() {
	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TEXTURE, UV);
	float n_out3p4 = n_out3p0.a;


// FloatConstant:4
	float n_out4p0 = 0.500000;


// FloatConstant:5
	float n_out5p0 = 2.000000;


// FloatConstant:6
	float n_out6p0 = 10.000000;


	vec3 n_out7p0;
// BCSAdjustment:7
	{
		n_out7p0 = _applyBCS(vec3(n_out3p0.xyz), vec3(n_out4p0, n_out5p0, n_out6p0));
	}


// Output:0
	COLOR.rgb = n_out7p0;
	COLOR.a = n_out3p4;


}
"
graph_offset = Vector2(-208.508, -133.703)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(400, -60)
nodes/fragment/3/node = SubResource("332")
nodes/fragment/3/position = Vector2(-200, 140)
nodes/fragment/4/node = SubResource("333")
nodes/fragment/4/position = Vector2(-140, -60)
nodes/fragment/5/node = SubResource("334")
nodes/fragment/5/position = Vector2(-140, 0)
nodes/fragment/6/node = SubResource("335")
nodes/fragment/6/position = Vector2(-140, 60)
nodes/fragment/7/node = SubResource("610")
nodes/fragment/7/position = Vector2(140, -60)
nodes/fragment/connections = PackedInt32Array(3, 0, 7, 0, 4, 0, 7, 1, 5, 0, 7, 2, 6, 0, 7, 3, 7, 0, 0, 0, 3, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="337"]
shader = SubResource("336")

[sub_resource type="VisualShaderNodeCustom" id="338"]
default_input_values = [1, 0.5]
initialized = true
script = ExtResource("56")

[sub_resource type="VisualShaderNodeFloatConstant" id="339"]
constant = 0.5

[sub_resource type="VisualShader" id="340"]
code = "shader_type canvas_item;
render_mode blend_mix;



// BlackAndWhite
vec3 blackNwhite(vec3 _input_rgb_color, float _threshold_color){
	return vec3( ( (0.21 * _input_rgb_color.r + 0.71 * _input_rgb_color.g + 0.07 * _input_rgb_color.b) < _threshold_color) ? 0.0 : 1.0);
}

void fragment() {
	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TEXTURE, UV);
	float n_out3p4 = n_out3p0.a;


// FloatConstant:8
	float n_out8p0 = 0.500000;


	vec3 n_out7p0;
// BlackAndWhite:7
	{
		n_out7p0 = blackNwhite(vec3(n_out3p0.xyz), n_out8p0);
	}


// Output:0
	COLOR.rgb = n_out7p0;
	COLOR.a = n_out3p4;


}
"
graph_offset = Vector2(-98.9422, -5.88431)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(400, 200)
nodes/fragment/3/node = SubResource("332")
nodes/fragment/3/position = Vector2(-160, 200)
nodes/fragment/7/node = SubResource("338")
nodes/fragment/7/position = Vector2(140, 60)
nodes/fragment/8/node = SubResource("339")
nodes/fragment/8/position = Vector2(-160, 80)
nodes/fragment/connections = PackedInt32Array(3, 0, 7, 0, 8, 0, 7, 1, 7, 0, 0, 0, 3, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="341"]
shader = SubResource("340")

[sub_resource type="VisualShaderNodeTexture" id="342"]
texture = ExtResource("57")

[sub_resource type="VisualShaderNodeFloatConstant" id="343"]
constant = 0.7

[sub_resource type="VisualShaderNodeCustom" id="344"]
default_input_values = [1, 1.0, 3, 1.0, 4, 1.0]
initialized = true
script = ExtResource("58")

[sub_resource type="VisualShader" id="345"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_10;


// BlendAwithB
vec4 _blendAwithBFunc(vec4 _color_blendA_rgba, vec4 _color_blendB_rgba, float _fade_blend_color){
	return mix(_color_blendA_rgba, _color_blendB_rgba, _color_blendB_rgba.a * _fade_blend_color);
}

void fragment() {
	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TEXTURE, UV);
	float n_out3p4 = n_out3p0.a;


// Texture2D:10
	vec4 n_out10p0 = texture(tex_frg_10, UV);


// FloatConstant:11
	float n_out11p0 = 0.700000;


	vec3 n_out9p0;
	float n_out9p1;
// BlendAwithB:9
	float n_in9p1 = 1.00000;
	float n_in9p3 = 1.00000;
	{
		vec4 n_out9p0n_out9p1 = _blendAwithBFunc(vec4(vec3(n_out3p0.xyz), n_in9p1), vec4(vec3(n_out10p0.xyz), n_in9p3), n_out11p0);
		n_out9p0 = n_out9p0n_out9p1.rgb;
		n_out9p1 = n_out9p0n_out9p1.a;
	}


// Output:0
	COLOR.rgb = n_out9p0;
	COLOR.a = n_out9p1;


}
"
graph_offset = Vector2(-204.802, -46.8099)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(360, 60)
nodes/fragment/3/node = SubResource("332")
nodes/fragment/3/position = Vector2(-180, 0)
nodes/fragment/9/node = SubResource("344")
nodes/fragment/9/position = Vector2(100, 60)
nodes/fragment/10/node = SubResource("342")
nodes/fragment/10/position = Vector2(-440, 0)
nodes/fragment/11/node = SubResource("343")
nodes/fragment/11/position = Vector2(-120, 200)
nodes/fragment/connections = PackedInt32Array(3, 0, 9, 0, 9, 1, 0, 1, 10, 0, 9, 2, 11, 0, 9, 4, 9, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="346"]
shader = SubResource("345")

[sub_resource type="VisualShaderNodeCustom" id="347"]
default_input_values = [2, 1.0]
initialized = true
script = ExtResource("59")

[sub_resource type="VisualShaderNodeFloatConstant" id="348"]
constant = 0.5

[sub_resource type="VisualShader" id="349"]
code = "shader_type canvas_item;
render_mode blend_mix;



// Bloom
vec4 _bloomFunc(vec4 _col_bloom, float _strength_bloom){
	float _gamma_bloom = 1.0 - pow(_col_bloom.r, _strength_bloom);
	_col_bloom.rgb += (_col_bloom.rgb * _col_bloom.a) * _strength_bloom;
	return _col_bloom;
}

void fragment() {
	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TEXTURE, UV);
	float n_out3p4 = n_out3p0.a;


// FloatConstant:13
	float n_out13p0 = 0.500000;


	vec3 n_out12p0;
	float n_out12p1;
// Bloom:12
	{
		vec4 n_out12p0n_out12p1 = _bloomFunc(vec4(vec3(n_out3p0.xyz), n_out3p4), n_out13p0);
		n_out12p0 = n_out12p0n_out12p1.rgb;
		n_out12p1 = n_out12p0n_out12p1.a;
	}


// Output:0
	COLOR.rgb = n_out12p0;
	COLOR.a = n_out12p1;


}
"
graph_offset = Vector2(-256.704, -93.2689)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(400, 0)
nodes/fragment/3/node = SubResource("332")
nodes/fragment/3/position = Vector2(-60, -60)
nodes/fragment/12/node = SubResource("347")
nodes/fragment/12/position = Vector2(200, 0)
nodes/fragment/13/node = SubResource("348")
nodes/fragment/13/position = Vector2(0, 160)
nodes/fragment/connections = PackedInt32Array(12, 1, 0, 1, 3, 0, 12, 0, 13, 0, 12, 2, 12, 0, 0, 0, 3, 4, 12, 1)

[sub_resource type="ShaderMaterial" id="350"]
shader = SubResource("349")

[sub_resource type="VisualShaderNodeCustom" id="351"]
default_input_values = [2, -1.0, 3, 0.05, 4, 0.0]
initialized = true
script = ExtResource("60")

[sub_resource type="VisualShaderNodeFloatConstant" id="352"]
constant = 0.02

[sub_resource type="VisualShaderNodeInput" id="353"]
input_name = "texture"

[sub_resource type="VisualShaderNodeInput" id="354"]
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatConstant" id="355"]
constant = -1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="356"]

[sub_resource type="VisualShader" id="357"]
code = "shader_type canvas_item;
render_mode blend_mix;



// ChromaticAberration
vec4 _chromaticAberrationFunc(sampler2D _texture_chr_aberration, vec2 _uv_chr_aberration, vec3 _values_chr_aberration){
	vec4 _col_chr_aberration = vec4(0.0);
	if (_values_chr_aberration.z < 0.0){
		_col_chr_aberration.r = texture(_texture_chr_aberration, _uv_chr_aberration + _values_chr_aberration.xy).r;
		_col_chr_aberration.g = texture(_texture_chr_aberration, _uv_chr_aberration).g;
		_col_chr_aberration.b = texture(_texture_chr_aberration, _uv_chr_aberration - _values_chr_aberration.xy).b;
		_col_chr_aberration.a = texture(_texture_chr_aberration, _uv_chr_aberration).a;
	}else{
		_col_chr_aberration.r = textureLod(_texture_chr_aberration, _uv_chr_aberration +
											_values_chr_aberration.xy, _values_chr_aberration.z).r;
		_col_chr_aberration.g = textureLod(_texture_chr_aberration, _uv_chr_aberration, _values_chr_aberration.z).g;
		_col_chr_aberration.b = textureLod(_texture_chr_aberration, _uv_chr_aberration -
											_values_chr_aberration.xy, _values_chr_aberration.z).b;
		_col_chr_aberration.a = textureLod(_texture_chr_aberration, _uv_chr_aberration, _values_chr_aberration.z).a;
	}
	return _col_chr_aberration;
}

void fragment() {
// Input:18
	vec2 n_out18p0 = UV;


// FloatConstant:19
	float n_out19p0 = -1.000000;


// FloatConstant:15
	float n_out15p0 = 0.020000;


// FloatConstant:20
	float n_out20p0 = 0.000000;


	vec3 n_out14p0;
	float n_out14p1;
// ChromaticAberration:14
	{
		vec4 n_out14p0n_out14p1 = _chromaticAberrationFunc(TEXTURE, vec3(n_out18p0, 0.0).xy, vec3(n_out15p0, n_out20p0, n_out19p0));
		n_out14p0 = n_out14p0n_out14p1.rgb;
		n_out14p1 = n_out14p0n_out14p1.a;
	}


// Output:0
	COLOR.rgb = n_out14p0;
	COLOR.a = n_out14p1;


}
"
graph_offset = Vector2(-244, -169)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(460, 0)
nodes/fragment/14/node = SubResource("351")
nodes/fragment/14/position = Vector2(200, 0)
nodes/fragment/15/node = SubResource("352")
nodes/fragment/15/position = Vector2(-60, 140)
nodes/fragment/17/node = SubResource("353")
nodes/fragment/17/position = Vector2(-160, -100)
nodes/fragment/18/node = SubResource("354")
nodes/fragment/18/position = Vector2(-200, -20)
nodes/fragment/19/node = SubResource("355")
nodes/fragment/19/position = Vector2(-60, 60)
nodes/fragment/20/node = SubResource("356")
nodes/fragment/20/position = Vector2(-60, 220)
nodes/fragment/connections = PackedInt32Array(14, 1, 0, 1, 15, 0, 14, 3, 17, 0, 14, 0, 18, 0, 14, 1, 20, 0, 14, 4, 19, 0, 14, 2, 14, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="358"]
shader = SubResource("357")

[sub_resource type="VisualShaderNodeCustom" id="359"]
initialized = true
script = ExtResource("61")

[sub_resource type="VisualShaderNodeFloatConstant" id="360"]
constant = 2.0

[sub_resource type="VisualShaderNodeTexture" id="361"]
expanded_output_ports = [0]
source = 2

[sub_resource type="VisualShaderNodeCustom" id="362"]
default_input_values = [1, Vector3(1, 1, 0), 2, Vector3(0.5, 0.5, 0)]
initialized = true
script = ExtResource("7")

[sub_resource type="VisualShaderNodeInput" id="363"]
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatConstant" id="364"]
constant = 2.0

[sub_resource type="VisualShaderNodeExpression" id="365"]
size = Vector2(627, 196)
expression = "Sometimes texture may show out of its true borders
(for example, when using lod).
To fix it, use ClampAlphaBorder node.
Set 'alpha' port from \"Texture2D\" node to 'Alpha' port of \"Output\"
node to see the difference."

[sub_resource type="VisualShader" id="366"]
code = "shader_type canvas_item;
render_mode blend_mix;



// ScaleUV
vec2 _scaleUV(vec2 _scale_uv, vec2 _scale_vect, vec2 _pivot_vect) {
	return (_scale_uv - _pivot_vect) * _scale_vect + _pivot_vect;
}
// ClampAlphaBorder
float _clampAlphaBorderFunc(float _color_alpha_clamp, vec2 _uv_clamp){
	_color_alpha_clamp = mix(0.0, _color_alpha_clamp, max(sign(_uv_clamp.x), 0.0));
	_color_alpha_clamp = mix(0.0, _color_alpha_clamp, max(sign(1.0 - _uv_clamp.x), 0.0));
	_color_alpha_clamp = mix(0.0, _color_alpha_clamp, max(sign(_uv_clamp.y), 0.0));
	_color_alpha_clamp = mix(0.0, _color_alpha_clamp, max(sign(1.0 - _uv_clamp.y), 0.0));
	return _color_alpha_clamp;
}

void fragment() {
// Input:25
	vec2 n_out25p0 = UV;


// FloatConstant:26
	float n_out26p0 = 2.000000;


	vec3 n_out24p0;
// ScaleUV:24
	vec3 n_in24p2 = vec3(0.50000, 0.50000, 0.00000);
	{
		n_out24p0.xy = _scaleUV(vec3(n_out25p0, 0.0).xy, vec3(n_out26p0).xy, n_in24p2.xy);
	}


// FloatConstant:22
	float n_out22p0 = 2.000000;


	vec4 n_out23p0;
// Texture2D:23
	n_out23p0 = textureLod(TEXTURE, vec2(n_out24p0.xy), n_out22p0);
	float n_out23p4 = n_out23p0.a;


	float n_out21p0;
// ClampAlphaBorder:21
	{
		n_out21p0 = _clampAlphaBorderFunc(n_out23p4, (n_out24p0).xy);
	}


// Output:0
	COLOR.rgb = vec3(n_out23p0.xyz);
	COLOR.a = n_out21p0;


}
"
graph_offset = Vector2(-284.537, -146.443)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(700, -80)
nodes/fragment/21/node = SubResource("359")
nodes/fragment/21/position = Vector2(380, -140)
nodes/fragment/22/node = SubResource("360")
nodes/fragment/22/position = Vector2(-140, 60)
nodes/fragment/23/node = SubResource("361")
nodes/fragment/23/position = Vector2(80, -20)
nodes/fragment/24/node = SubResource("362")
nodes/fragment/24/position = Vector2(-120, -80)
nodes/fragment/25/node = SubResource("363")
nodes/fragment/25/position = Vector2(-460, -120)
nodes/fragment/26/node = SubResource("364")
nodes/fragment/26/position = Vector2(-320, -40)
nodes/fragment/27/node = SubResource("365")
nodes/fragment/27/position = Vector2(180, -400)
nodes/fragment/27/size = Vector2(627, 196)
nodes/fragment/27/input_ports = ""
nodes/fragment/27/output_ports = ""
nodes/fragment/27/expression = "Sometimes texture may show out of its true borders
(for example, when using lod).
To fix it, use ClampAlphaBorder node.
Set 'alpha' port from \"Texture2D\" node to 'Alpha' port of \"Output\"
node to see the difference."
nodes/fragment/connections = PackedInt32Array(22, 0, 23, 1, 25, 0, 24, 0, 24, 0, 23, 0, 26, 0, 24, 1, 24, 0, 21, 1, 21, 0, 0, 1, 23, 0, 0, 0, 23, 4, 21, 0)

[sub_resource type="ShaderMaterial" id="367"]
shader = SubResource("366")

[sub_resource type="VisualShaderNodeCustom" id="368"]
output_port_for_preview = 0
initialized = true
script = ExtResource("62")

[sub_resource type="VisualShaderNodeTexture" id="369"]
source = 2

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_khtr3"]
parameter_name = "Texture2DParameter"

[sub_resource type="VisualShader" id="371"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D Texture2DParameter;


// ColorCorrectionAdjustment
vec3 _applyColorCorrectionFunc(vec3 _col_corr, sampler2D _tex_corr) {
	_col_corr.r = texture(_tex_corr, vec2(_col_corr.r, 0.0)).r;
	_col_corr.g = texture(_tex_corr, vec2(_col_corr.g, 0.0)).g;
	_col_corr.b = texture(_tex_corr, vec2(_col_corr.b, 0.0)).b;
	return _col_corr;
}

void fragment() {
	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TEXTURE, UV);


	vec3 n_out2p0;
// ColorCorrectionAdjustment:2
	{
		n_out2p0 = _applyColorCorrectionFunc(vec3(n_out3p0.xyz), Texture2DParameter);
	}


// Output:0
	COLOR.rgb = n_out2p0;


}
"
graph_offset = Vector2(-274.167, 34.9918)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(400, 200)
nodes/fragment/2/node = SubResource("368")
nodes/fragment/2/position = Vector2(80, 200)
nodes/fragment/3/node = SubResource("369")
nodes/fragment/3/position = Vector2(-200, 140)
nodes/fragment/5/node = SubResource("VisualShaderNodeTexture2DParameter_khtr3")
nodes/fragment/5/position = Vector2(-280, 300)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 0, 2, 0, 0, 0, 5, 0, 2, 1)

[sub_resource type="Gradient" id="Gradient_g5r4v"]
colors = PackedColorArray(0, 0.183333, 1, 1, 1, 0, 0, 1)

[sub_resource type="GradientTexture2D" id="GradientTexture2D_147bn"]
gradient = SubResource("Gradient_g5r4v")
fill_from = Vector2(0, 1)

[sub_resource type="ShaderMaterial" id="372"]
shader = SubResource("371")
shader_parameter/Texture2DParameter = SubResource("GradientTexture2D_147bn")

[sub_resource type="VisualShaderNodeInput" id="370"]
input_name = "texture"

[sub_resource type="VisualShaderNodeCustom" id="373"]
default_input_values = [2, -1.0, 3, 0.005, 4, 1.0]
initialized = true
script = ExtResource("63")

[sub_resource type="VisualShaderNodeInput" id="374"]
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatConstant" id="375"]
constant = -1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="376"]
constant = 0.005

[sub_resource type="VisualShaderNodeFloatConstant" id="377"]
constant = 1.0

[sub_resource type="VisualShader" id="378"]
code = "shader_type canvas_item;
render_mode blend_mix;



// Emboss
vec4 _embossFunc(sampler2D _tex_emboss, vec2 _uv_emboss, float _lod_emboss, vec2 _ofst_emboss, float _ctst_emboss){
	vec4 col_emboss = vec4(0.5, 0.5, 0.5, 0.5);
	if (_lod_emboss < 0.0){
		col_emboss -= texture(_tex_emboss, _uv_emboss - _ofst_emboss) * _ctst_emboss;
		col_emboss += texture(_tex_emboss, _uv_emboss + _ofst_emboss) * _ctst_emboss;
	}else{
		col_emboss -= textureLod(_tex_emboss, _uv_emboss - _ofst_emboss, _lod_emboss) * _ctst_emboss;
		col_emboss += textureLod(_tex_emboss, _uv_emboss + _ofst_emboss, _lod_emboss) * _ctst_emboss;
	}
	col_emboss.rgb = vec3(0.21 * col_emboss.r + 0.71 * col_emboss.g + 0.07 * col_emboss.b);
	return col_emboss;
}

void fragment() {
// Input:6
	vec2 n_out6p0 = UV;


// FloatConstant:7
	float n_out7p0 = -1.000000;


// FloatConstant:8
	float n_out8p0 = 0.005000;


// FloatConstant:9
	float n_out9p0 = 1.000000;


	vec3 n_out5p0;
	float n_out5p1;
// Emboss:5
	{
		vec4 n_out5p0n_out5p1 = _embossFunc(TEXTURE, vec3(n_out6p0, 0.0).xy, n_out7p0, vec2(n_out8p0), n_out9p0);
		n_out5p0 = n_out5p0n_out5p1.rgb;
		n_out5p1 = n_out5p0n_out5p1.a;
	}


// Output:0
	COLOR.rgb = n_out5p0;
	COLOR.a = n_out5p1;


}
"
graph_offset = Vector2(-222, 203)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(400, 200)
nodes/fragment/4/node = SubResource("370")
nodes/fragment/4/position = Vector2(-140, 80)
nodes/fragment/5/node = SubResource("373")
nodes/fragment/5/position = Vector2(180, 200)
nodes/fragment/6/node = SubResource("374")
nodes/fragment/6/position = Vector2(-180, 160)
nodes/fragment/7/node = SubResource("375")
nodes/fragment/7/position = Vector2(-40, 240)
nodes/fragment/8/node = SubResource("376")
nodes/fragment/8/position = Vector2(-40, 320)
nodes/fragment/9/node = SubResource("377")
nodes/fragment/9/position = Vector2(-40, 400)
nodes/fragment/connections = PackedInt32Array(4, 0, 5, 0, 5, 1, 0, 1, 6, 0, 5, 1, 7, 0, 5, 2, 9, 0, 5, 4, 8, 0, 5, 3, 5, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="379"]
shader = SubResource("378")

[sub_resource type="VisualShaderNodeCustom" id="380"]
default_input_values = [1, Vector3(0, 1, 0), 2, 0.3, 3, Vector3(1, 1, 0), 4, 1.0, 5, Vector3(1, 0.5, 0), 6, 1.0, 7, Vector3(1, 0, 0), 8, 1.0, 9, 0, 10, 0.4, 11, 0.2, 12, 0.0]
initialized = true
script = ExtResource("64")

[sub_resource type="VisualShaderNodeCustom" id="381"]
default_input_values = [0, 1.0, 1, 0.0]
initialized = true
script = ExtResource("25")

[sub_resource type="VisualShaderNodeFloatConstant" id="382"]
constant = 1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="383"]
constant = 1.96

[sub_resource type="VisualShaderNodeFloatConstant" id="384"]
constant = 0.3

[sub_resource type="VisualShaderNodeInput" id="385"]
input_name = "time"

[sub_resource type="VisualShaderNodeColorConstant" id="386"]
constant = Color(1, 1, 0, 1)

[sub_resource type="VisualShaderNodeColorConstant" id="387"]
constant = Color(1, 0.501961, 0, 1)

[sub_resource type="VisualShaderNodeColorConstant" id="388"]
constant = Color(1, 0, 0, 1)

[sub_resource type="VisualShaderNodeFloatConstant" id="389"]

[sub_resource type="VisualShaderNodeFloatConstant" id="390"]
constant = 0.4

[sub_resource type="VisualShaderNodeFloatConstant" id="391"]
constant = 0.2

[sub_resource type="VisualShader" id="392"]
code = "shader_type canvas_item;
render_mode blend_mix;



// vec2Compose
vec2 _vec2ComposeFunc(float _vec2_length, float _vec2_angl_rad){
	return vec2(cos(_vec2_angl_rad), sin(_vec2_angl_rad)) * _vec2_length;
}
// FireFX
float _cnoiseFireFXTempFunc(vec3 P) {
	vec3 Pi0 = floor(P);
	vec3 Pi1 = Pi0 + vec3(1.0);
	Pi0 = Pi0 - floor(Pi0 * (1.0 / 289.0)) * 289.0;
	Pi1 = Pi1 - floor(Pi1 * (1.0 / 289.0)) * 289.0;
	vec3 Pf0 = fract(P);
	vec3 Pf1 = Pf0 - vec3(1.0);
	vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
	vec4 iy = vec4(Pi0.yy, Pi1.yy);
	vec4 iz0 = vec4(Pi0.z);
	vec4 iz1 = vec4(Pi1.z);
	
	ix = ((ix*34.0)+1.0)*ix - floor(((ix*34.0)+1.0)*ix * (1.0 / 289.0)) * 289.0;
	vec4 ixy = (((ix + iy)*34.0)+1.0)*(ix + iy) - floor((((ix + iy)*34.0)+1.0)*(ix + iy) * (1.0 / 289.0)) * 289.0;
	vec4 ixy0 = (((ixy + iz0) * 34.0)+1.0)* (ixy + iz0) - floor((( (ixy + iz0) *34.0)+1.0)* (ixy + iz0) * (1.0 / 289.0)) * 289.0;
	vec4 ixy1 = (((ixy + iz1)*34.0)+1.0)*(ixy + iz1) - floor((((ixy + iz1)*34.0)+1.0)*(ixy + iz1) * (1.0 / 289.0)) * 289.0;
	
	vec4 gx0 = ixy0 * (1.0 / 7.0);
	vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
	gx0 = fract(gx0);
	vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
	vec4 sz0 = step(gz0, vec4(0.0));
	gx0 -= sz0 * (step(0.0, gx0) - 0.5);
	gy0 -= sz0 * (step(0.0, gy0) - 0.5);
	
	vec4 gx1 = ixy1 * (1.0 / 7.0);
	vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
	gx1 = fract(gx1);
	vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
	vec4 sz1 = step(gz1, vec4(0.0));
	gx1 -= sz1 * (step(0.0, gx1) - 0.5);
	gy1 -= sz1 * (step(0.0, gy1) - 0.5);
	
	vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
	vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
	vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
	vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
	vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
	vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
	vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
	vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);
	
	vec4 norm0 = 1.79284291400159 - 0.85373472095314 * vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110));
	g000 *= norm0.x;
	g010 *= norm0.y;
	g100 *= norm0.z;
	g110 *= norm0.w;
	vec4 norm1 = 1.79284291400159 - 0.85373472095314 * vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111));
	g001 *= norm1.x;
	g011 *= norm1.y;
	g101 *= norm1.z;
	g111 *= norm1.w;
	
	float n000 = dot(g000, Pf0);
	float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
	float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
	float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
	float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
	float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
	float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
	float n111 = dot(g111, Pf1);
	
	vec3 fade_xyz = Pf0 * Pf0 * Pf0 * (Pf0 * (Pf0 * 6.0 - 15.0) + 10.0);
	vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
	vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
	float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); 
	return 2.2 * n_xyz;
}
float _perlingFbmFireFXTempFunc(vec2 _pos, float _octaves, float _intencity, float persistence, float _scale, float _time) {
	float final = 0.0;
	float amplitude = _intencity;
	for(float i = 0.0; i < _octaves; i++){
		final += _cnoiseFireFXTempFunc(vec3(_pos * _scale, _time)) * amplitude;
		_scale *= 2.0;
		amplitude *= persistence;
	}
	return (min(final, 1.0) + 1.0) * 0.5;
}
vec4 _fireFXFunc(vec2 _uv_fire, vec2 _dir_fire, float _speed_fire, float _time_fire,
	vec4 _col1_fire, vec4 _col2_fire, vec4 _col3_fire,
	float _col1_pos, float _col2_pos, float _col3_pos){
	float _x_pos = mix(0.0, 1.0, _uv_fire.y);
	_uv_fire.x -= _dir_fire.x * _time_fire * _speed_fire;
	_uv_fire.y += _dir_fire.y * _time_fire * _speed_fire;
	float _y_pos = _perlingFbmFireFXTempFunc(_uv_fire, 8.0, 0.4, 1.0, 1.0, 1.0);
	float _1 = step(_y_pos, _x_pos - _col1_pos);
	float _3 = step(_y_pos, _x_pos - _col3_pos);
	float L1 = _1 - _3;
	vec4 col = vec4(1.0);
	col = mix(_col1_fire, _col3_fire, L1);
	
	float _2 = step(_y_pos, _x_pos - _col2_pos);
	float L2 = _3 - _2;
	col.rgb = mix(col.rgb, _col2_fire.rgb, L2);
	col = mix(vec4(0.0), col, _1);
	return col;
}

void fragment() {
// Input:6
	vec2 n_out6p0 = UV;


// FloatConstant:12
	float n_out12p0 = 1.000000;


// FloatConstant:13
	float n_out13p0 = 1.960000;


	vec3 n_out11p0;
// vec2Compose:11
	{
		n_out11p0.xy = _vec2ComposeFunc(n_out12p0, n_out13p0);
	}


// FloatConstant:14
	float n_out14p0 = 0.300000;


// ColorConstant:16
	vec4 n_out16p0 = vec4(1.000000, 1.000000, 0.000000, 1.000000);


// ColorConstant:17
	vec4 n_out17p0 = vec4(1.000000, 0.501961, 0.000000, 1.000000);


// ColorConstant:18
	vec4 n_out18p0 = vec4(1.000000, 0.000000, 0.000000, 1.000000);


// FloatConstant:19
	float n_out19p0 = 0.000000;


// FloatConstant:20
	float n_out20p0 = 0.400000;


// FloatConstant:21
	float n_out21p0 = 0.200000;


// Input:15
	float n_out15p0 = TIME;


	vec3 n_out10p0;
	float n_out10p1;
// FireFX:10
	float n_in10p4 = 1.00000;
	float n_in10p6 = 1.00000;
	float n_in10p8 = 1.00000;
	{
		vec4 n_out10p0n_out10p1 = _fireFXFunc(vec3(n_out6p0, 0.0).xy, n_out11p0.xy, n_out14p0, n_out15p0, vec4(vec3(n_out16p0.xyz), n_in10p4), vec4(vec3(n_out17p0.xyz), n_in10p6), vec4(vec3(n_out18p0.xyz), n_in10p8), n_out19p0, n_out20p0, n_out21p0);
		n_out10p0 = n_out10p0n_out10p1.rgb;
		n_out10p1 = n_out10p0n_out10p1.a;
	}


// Output:0
	COLOR.rgb = n_out10p0;
	COLOR.a = n_out10p1;


}
"
graph_offset = Vector2(-252.507, 83.2718)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(740, 400)
nodes/fragment/6/node = SubResource("374")
nodes/fragment/6/position = Vector2(20, 180)
nodes/fragment/10/node = SubResource("380")
nodes/fragment/10/position = Vector2(400, 400)
nodes/fragment/11/node = SubResource("381")
nodes/fragment/11/position = Vector2(180, 280)
nodes/fragment/12/node = SubResource("382")
nodes/fragment/12/position = Vector2(-100, 260)
nodes/fragment/13/node = SubResource("383")
nodes/fragment/13/position = Vector2(-100, 340)
nodes/fragment/14/node = SubResource("384")
nodes/fragment/14/position = Vector2(180, 380)
nodes/fragment/15/node = SubResource("385")
nodes/fragment/15/position = Vector2(20, 980)
nodes/fragment/16/node = SubResource("386")
nodes/fragment/16/position = Vector2(-20, 440)
nodes/fragment/17/node = SubResource("387")
nodes/fragment/17/position = Vector2(-20, 520)
nodes/fragment/18/node = SubResource("388")
nodes/fragment/18/position = Vector2(-20, 600)
nodes/fragment/19/node = SubResource("389")
nodes/fragment/19/position = Vector2(-20, 720)
nodes/fragment/20/node = SubResource("390")
nodes/fragment/20/position = Vector2(-20, 800)
nodes/fragment/21/node = SubResource("391")
nodes/fragment/21/position = Vector2(-20, 880)
nodes/fragment/connections = PackedInt32Array(6, 0, 10, 0, 10, 1, 0, 1, 14, 0, 10, 2, 15, 0, 10, 12, 18, 0, 10, 7, 19, 0, 10, 9, 20, 0, 10, 10, 21, 0, 10, 11, 16, 0, 10, 3, 17, 0, 10, 5, 10, 0, 0, 0, 11, 0, 10, 1, 13, 0, 11, 1, 12, 0, 11, 0)

[sub_resource type="ShaderMaterial" id="393"]
shader = SubResource("392")

[sub_resource type="VisualShaderNodeCustom" id="394"]
default_input_values = [1, Vector3(1, 1, 1), 2, 1.0, 3, Vector3(1, 1, 1), 4, 1.0, 5, Vector3(1, 1, 1), 6, 1.0, 7, Vector3(1, 1, 1), 8, 1.0]
initialized = true
script = ExtResource("65")

[sub_resource type="VisualShaderNodeColorConstant" id="395"]
expanded_output_ports = [0]
constant = Color(1, 1, 0, 1)

[sub_resource type="VisualShaderNodeColorConstant" id="396"]
expanded_output_ports = [0]
constant = Color(0, 0, 1, 1)

[sub_resource type="VisualShaderNodeColorConstant" id="397"]
expanded_output_ports = [0]
constant = Color(1, 0, 0, 1)

[sub_resource type="VisualShaderNodeColorConstant" id="398"]
expanded_output_ports = [0]
constant = Color(0.0990133, 1, 0, 1)

[sub_resource type="VisualShader" id="399"]
code = "shader_type canvas_item;
render_mode blend_mix;



// Gradient4Corners
vec4 _gradient4cornersFunc(vec2 _uv_corner, vec4 _top_left_corner, vec4 _top_right_corner, vec4 _bottom_left_corner, vec4 _bottom_right_corner){
	vec4 _color_top_corner = mix(_top_left_corner, _top_right_corner, _uv_corner.x);
	vec4 _color_bottom_corner = mix(_bottom_left_corner, _bottom_right_corner, _uv_corner.x);
	return mix(_color_top_corner, _color_bottom_corner, _uv_corner.y);
}

void fragment() {
// Input:6
	vec2 n_out6p0 = UV;


// ColorConstant:23
	vec4 n_out23p0 = vec4(1.000000, 1.000000, 0.000000, 1.000000);
	float n_out23p4 = n_out23p0.a;


// ColorConstant:24
	vec4 n_out24p0 = vec4(0.000000, 0.000000, 1.000000, 1.000000);
	float n_out24p4 = n_out24p0.a;


// ColorConstant:25
	vec4 n_out25p0 = vec4(1.000000, 0.000000, 0.000000, 1.000000);
	float n_out25p4 = n_out25p0.a;


// ColorConstant:26
	vec4 n_out26p0 = vec4(0.099013, 1.000000, 0.000000, 1.000000);
	float n_out26p4 = n_out26p0.a;


	vec3 n_out22p0;
	float n_out22p1;
// Gradient4Corners:22
	{
		vec4 n_out22p0n_out22p1 = _gradient4cornersFunc(vec3(n_out6p0, 0.0).xy, vec4(vec3(n_out23p0.xyz), n_out23p4), vec4(vec3(n_out24p0.xyz), n_out24p4), vec4(vec3(n_out25p0.xyz), n_out25p4), vec4(vec3(n_out26p0.xyz), n_out26p4));
		n_out22p0 = n_out22p0n_out22p1.rgb;
		n_out22p1 = n_out22p0n_out22p1.a;
	}


// Output:0
	COLOR.rgb = n_out22p0;
	COLOR.a = n_out22p1;


}
"
graph_offset = Vector2(256.859, 118.584)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1060, 400)
nodes/fragment/6/node = SubResource("374")
nodes/fragment/6/position = Vector2(360, 300)
nodes/fragment/22/node = SubResource("394")
nodes/fragment/22/position = Vector2(800, 400)
nodes/fragment/23/node = SubResource("395")
nodes/fragment/23/position = Vector2(500, 380)
nodes/fragment/24/node = SubResource("396")
nodes/fragment/24/position = Vector2(500, 540)
nodes/fragment/25/node = SubResource("397")
nodes/fragment/25/position = Vector2(500, 720)
nodes/fragment/26/node = SubResource("398")
nodes/fragment/26/position = Vector2(500, 900)
nodes/fragment/connections = PackedInt32Array(22, 1, 0, 1, 6, 0, 22, 0, 23, 0, 22, 1, 24, 0, 22, 3, 25, 0, 22, 5, 26, 0, 22, 7, 22, 0, 0, 0, 26, 4, 22, 8, 25, 4, 22, 6, 24, 4, 22, 4, 23, 4, 22, 2)

[sub_resource type="ShaderMaterial" id="400"]
shader = SubResource("399")

[sub_resource type="VisualShaderNodeCustom" id="401"]
default_input_values = [1, 1.0, 2, 0.0, 3, false]
initialized = true
script = ExtResource("66")

[sub_resource type="VisualShaderNodeTexture" id="402"]
expanded_output_ports = [0]
source = 2

[sub_resource type="VisualShaderNodeBooleanConstant" id="403"]
constant = true

[sub_resource type="VisualShaderNodeTexture2DParameter" id="404"]
parameter_name = "gradient"

[sub_resource type="VisualShaderNodeCustom" id="405"]
default_input_values = [0, 1.0]
initialized = true
script = ExtResource("78")

[sub_resource type="VisualShaderNodeFloatConstant" id="406"]
constant = 0.3

[sub_resource type="VisualShader" id="407"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D gradient;


// GradientMapping
vec4 _gradientMappingFunc(vec3 _col_base_gm, float _grad_offset, sampler2D _palette_gm, bool _use_col_cycle){
	float avg_col = 0.2126 * _col_base_gm.r + 0.7152 * _col_base_gm.g + 0.0722 * _col_base_gm.b;
	if (_use_col_cycle){
		return texture(_palette_gm, mod(vec2(avg_col + _grad_offset, 0), vec2(1.0)));
	} else{
		return texture(_palette_gm, vec2(avg_col + _grad_offset, 0));
	}
}

void fragment() {
	vec4 n_out28p0;
// Texture2D:28
	n_out28p0 = texture(TEXTURE, UV);
	float n_out28p4 = n_out28p0.a;


// FloatConstant:33
	float n_out33p0 = 0.300000;


	float n_out32p0;
// ScaledTIME:32
	{
		n_out32p0 = n_out33p0 * TIME;
	}


// BooleanConstant:30
	bool n_out30p0 = true;


	vec3 n_out27p0;
	float n_out27p1;
// GradientMapping:27
	{
		vec4 n_out27p0n_out27p1 = _gradientMappingFunc(vec3(n_out28p0.xyz), n_out32p0, gradient, n_out30p0);
		n_out27p0 = n_out27p0n_out27p1.rgb;
		n_out27p1 = n_out27p0n_out27p1.a * n_out28p4;
	}


// Output:0
	COLOR.rgb = n_out27p0;
	COLOR.a = n_out27p1;


}
"
graph_offset = Vector2(-69.8232, 113.43)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1040, 400)
nodes/fragment/27/node = SubResource("401")
nodes/fragment/27/position = Vector2(800, 400)
nodes/fragment/28/node = SubResource("402")
nodes/fragment/28/position = Vector2(460, 240)
nodes/fragment/30/node = SubResource("403")
nodes/fragment/30/position = Vector2(520, 540)
nodes/fragment/31/node = SubResource("404")
nodes/fragment/31/position = Vector2(420, 620)
nodes/fragment/32/node = SubResource("405")
nodes/fragment/32/position = Vector2(540, 460)
nodes/fragment/33/node = SubResource("406")
nodes/fragment/33/position = Vector2(260, 420)
nodes/fragment/connections = PackedInt32Array(28, 0, 27, 0, 30, 0, 27, 3, 27, 1, 0, 1, 27, 0, 0, 0, 28, 4, 27, 1, 31, 0, 27, 4, 33, 0, 32, 0, 32, 0, 27, 2)

[sub_resource type="Gradient" id="408"]
offsets = PackedFloat32Array(0, 0.174242, 0.336134, 0.504202, 0.705882, 0.865546, 1)
colors = PackedColorArray(1, 0, 0, 1, 1, 0.726563, 0, 1, 0.640625, 1, 0, 1, 0, 1, 1, 1, 0, 0.132813, 1, 1, 1, 0, 0.984375, 1, 1, 1, 1, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_y2syp"]
gradient = SubResource("408")

[sub_resource type="ShaderMaterial" id="410"]
shader = SubResource("407")
shader_parameter/gradient = SubResource("GradientTexture1D_y2syp")

[sub_resource type="VisualShaderNodeCustom" id="411"]
default_input_values = [1, 1.0]
initialized = true
script = ExtResource("67")

[sub_resource type="VisualShaderNodeTexture" id="412"]
expanded_output_ports = [0]
source = 2

[sub_resource type="VisualShaderNodeFloatConstant" id="413"]
constant = 1.0

[sub_resource type="VisualShader" id="414"]
code = "shader_type canvas_item;
render_mode blend_mix;



// GrayscalePlus
vec3 _grayscaleFunc(vec3 _color_grayscale, float _gray_factor){
	return _color_grayscale * (1.0 - _gray_factor) + (0.21 * _color_grayscale.r + 0.71 * _color_grayscale.g + 0.07 * _color_grayscale.b) * _gray_factor;
}

void fragment() {
	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TEXTURE, UV);
	float n_out3p4 = n_out3p0.a;


// FloatConstant:4
	float n_out4p0 = 1.000000;


	vec3 n_out2p0;
// GrayscalePlus:2
	{
		n_out2p0 = _grayscaleFunc(vec3(n_out3p0.xyz), n_out4p0);
	}


// Output:0
	COLOR.rgb = n_out2p0;
	COLOR.a = n_out3p4;


}
"
graph_offset = Vector2(-81.0399, 23.8775)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(600, 140)
nodes/fragment/2/node = SubResource("411")
nodes/fragment/2/position = Vector2(360, 120)
nodes/fragment/3/node = SubResource("412")
nodes/fragment/3/position = Vector2(0, 220)
nodes/fragment/4/node = SubResource("413")
nodes/fragment/4/position = Vector2(60, 140)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 0, 2, 0, 0, 0, 4, 0, 2, 1, 3, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="415"]
shader = SubResource("414")

[sub_resource type="VisualShaderNodeCustom" id="416"]
initialized = true
script = ExtResource("68")

[sub_resource type="VisualShader" id="417"]
code = "shader_type canvas_item;
render_mode blend_mix;



// Hue
vec3 _hueFunc(float _inp_hue){
	return 3.0 * abs(1.0 - 2.0 * fract(_inp_hue + vec3(0.0, -1.0 / 3.0, 1.0 / 3.0))) - 1.0;
}

void fragment() {
	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TEXTURE, UV);
	float n_out3p4 = n_out3p0.a;


	vec3 n_out5p0;
// Hue:5
	{
		n_out5p0 = _hueFunc(n_out3p0.x);
	}


// Output:0
	COLOR.rgb = n_out5p0;
	COLOR.a = n_out3p4;


}
"
graph_offset = Vector2(-169.795, 33.3148)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(600, 200)
nodes/fragment/3/node = SubResource("412")
nodes/fragment/3/position = Vector2(0, 200)
nodes/fragment/5/node = SubResource("416")
nodes/fragment/5/position = Vector2(320, 180)
nodes/fragment/connections = PackedInt32Array(3, 0, 5, 0, 5, 0, 0, 0, 3, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="418"]
shader = SubResource("417")

[sub_resource type="VisualShaderNodeCustom" id="419"]
default_input_values = [2, 1.0]
initialized = true
script = ExtResource("69")

[sub_resource type="VisualShaderNodeFloatConstant" id="420"]
constant = 1.0

[sub_resource type="VisualShader" id="421"]
code = "shader_type canvas_item;
render_mode blend_mix;



// InverseColor
vec3 _inverseColorFunc(vec3 _color_to_inverse, float _inverse_color_intensity){
	return mix(_color_to_inverse.rgb, 1.0 - _color_to_inverse.rgb, _inverse_color_intensity);
}

void fragment() {
	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TEXTURE, UV);
	float n_out3p4 = n_out3p0.a;


// FloatConstant:7
	float n_out7p0 = 1.000000;


	vec3 n_out6p0;
	float n_out6p1;
// InverseColor:6
	{
		n_out6p0 = _inverseColorFunc(vec3(n_out3p0.xyz), n_out7p0);
		n_out6p1 = n_out3p4;
	}


// Output:0
	COLOR.rgb = n_out6p0;
	COLOR.a = n_out6p1;


}
"
graph_offset = Vector2(-162.479, 72.6859)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(600, 200)
nodes/fragment/3/node = SubResource("412")
nodes/fragment/3/position = Vector2(80, 180)
nodes/fragment/6/node = SubResource("419")
nodes/fragment/6/position = Vector2(380, 200)
nodes/fragment/7/node = SubResource("420")
nodes/fragment/7/position = Vector2(140, 380)
nodes/fragment/connections = PackedInt32Array(3, 0, 6, 0, 6, 1, 0, 1, 7, 0, 6, 2, 6, 0, 0, 0, 3, 4, 6, 1)

[sub_resource type="ShaderMaterial" id="422"]
shader = SubResource("421")

[sub_resource type="VisualShaderNodeCustom" id="423"]
default_input_values = [1, 1, 2, 1]
initialized = true
script = ExtResource("70")

[sub_resource type="VisualShaderNodeTexture" id="424"]
expanded_output_ports = [0]
texture = ExtResource("57")

[sub_resource type="VisualShader" id="425"]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_9;


// MaskAlpha
vec4 _maskAlphaFunc(vec4 _col_to_mask, float _mask_alpha_to_mask){
	return vec4(_col_to_mask.rgb, _col_to_mask.a * _mask_alpha_to_mask);
}

void fragment() {
	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TEXTURE, UV);
	float n_out3p4 = n_out3p0.a;


// Texture2D:9
	vec4 n_out9p0 = texture(tex_frg_9, UV);
	float n_out9p4 = n_out9p0.a;


	vec3 n_out8p0;
	float n_out8p1;
// MaskAlpha:8
	{
		n_out8p0 = _maskAlphaFunc(vec4(vec3(n_out3p0.xyz), n_out3p4), n_out9p4).rgb;
		n_out8p1 = _maskAlphaFunc(vec4(vec3(n_out3p0.xyz), n_out3p4), n_out9p4).a;
	}


// Output:0
	COLOR.rgb = n_out8p0;
	COLOR.a = n_out8p1;


}
"
graph_offset = Vector2(-307.936, -137.162)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(620, 0)
nodes/fragment/3/node = SubResource("412")
nodes/fragment/3/position = Vector2(100, -140)
nodes/fragment/8/node = SubResource("423")
nodes/fragment/8/position = Vector2(400, 0)
nodes/fragment/9/node = SubResource("424")
nodes/fragment/9/position = Vector2(100, 60)
nodes/fragment/connections = PackedInt32Array(3, 0, 8, 0, 8, 1, 0, 1, 8, 0, 0, 0, 9, 4, 8, 2, 3, 4, 8, 1)

[sub_resource type="ShaderMaterial" id="426"]
shader = SubResource("425")

[sub_resource type="VisualShaderNodeCustom" id="427"]
default_input_values = [1, 8.0]
initialized = true
script = ExtResource("71")

[sub_resource type="VisualShaderNodeFloatConstant" id="428"]
constant = 3.0

[sub_resource type="VisualShader" id="429"]
code = "shader_type canvas_item;
render_mode blend_mix;



// Posterize
vec3 _posterizeFunc(vec3 _col_posterize, float _steps_posterize){
	return floor(_col_posterize * _steps_posterize) / (_steps_posterize - 1.0);
}

void fragment() {
	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TEXTURE, UV);
	float n_out3p4 = n_out3p0.a;


// FloatConstant:11
	float n_out11p0 = 3.000000;


	vec3 n_out10p0;
// Posterize:10
	{
		n_out10p0 = _posterizeFunc(vec3(n_out3p0.xyz), n_out11p0);
	}


// Output:0
	COLOR.rgb = n_out10p0;
	COLOR.a = n_out3p4;


}
"
graph_offset = Vector2(-144, -146.56)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(580, -20)
nodes/fragment/3/node = SubResource("412")
nodes/fragment/3/position = Vector2(100, 0)
nodes/fragment/10/node = SubResource("427")
nodes/fragment/10/position = Vector2(400, -140)
nodes/fragment/11/node = SubResource("428")
nodes/fragment/11/position = Vector2(140, -120)
nodes/fragment/connections = PackedInt32Array(11, 0, 10, 1, 3, 0, 10, 0, 10, 0, 0, 0, 3, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="430"]
shader = SubResource("429")

[sub_resource type="VisualShaderNodeCustom" id="431"]
default_input_values = [1, 1.0, 2, 1.0, 3, 1.0]
initialized = true
script = ExtResource("72")

[sub_resource type="VisualShaderNodeFloatConstant" id="432"]
constant = 0.2

[sub_resource type="VisualShaderNodeFloatConstant" id="433"]
constant = 1.5

[sub_resource type="VisualShaderNodeFloatConstant" id="434"]
constant = 1.2

[sub_resource type="VisualShader" id="435"]
code = "shader_type canvas_item;
render_mode blend_mix;



// ShiftHSV
vec3 _hsv2rgbHSVChangeFunc(vec3 _hsv_color_HSVChange){
	vec4 _K_hsv2rgbHSVChange = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	vec3 _p_hsv2rgbHSVChange = abs(fract(_hsv_color_HSVChange.xxx + _K_hsv2rgbHSVChange.xyz) * 6.0 - _K_hsv2rgbHSVChange.www);
	return vec3(_hsv_color_HSVChange.z * mix(_K_hsv2rgbHSVChange.xxx, 
				clamp(_p_hsv2rgbHSVChange - _K_hsv2rgbHSVChange.xxx, 0.0, 1.0),
				_hsv_color_HSVChange.y));
}

vec3 _rgb2hvsHSVChangeFunc(vec3 _rgb_color_HSVChange){
	vec4 _K_rgb2hvsHSVChange = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	vec4 _p_rgb2hvsHSVChange = mix( vec4(_rgb_color_HSVChange.bg, _K_rgb2hvsHSVChange.wz),
									vec4(_rgb_color_HSVChange.gb, _K_rgb2hvsHSVChange.xy),
									step(_rgb_color_HSVChange.b, _rgb_color_HSVChange.g));
	vec4 _q_rgb2hvsHSVChange = mix( vec4(_p_rgb2hvsHSVChange.xyw, _rgb_color_HSVChange.r), 
									vec4(_rgb_color_HSVChange.r, _p_rgb2hvsHSVChange.yzx),
									step(_p_rgb2hvsHSVChange.x, _rgb_color_HSVChange.r));
	float _d_rgb2hvsHSVChange = _q_rgb2hvsHSVChange.x - min(_q_rgb2hvsHSVChange.w, _q_rgb2hvsHSVChange.y);
	return vec3(vec3(abs(_q_rgb2hvsHSVChange.z + (_q_rgb2hvsHSVChange.w - _q_rgb2hvsHSVChange.y) / (6.0 * _d_rgb2hvsHSVChange + 1.0e-10)),
					_d_rgb2hvsHSVChange / (_q_rgb2hvsHSVChange.x + 1.0e-10),
					_q_rgb2hvsHSVChange.x));
}

vec3 _hsvChangeHSVChangeFunc(vec3 _color_HSVChange, float _h_HSVChange, float _s_HSVChange, float _v_HSVChange){
	_color_HSVChange = _rgb2hvsHSVChangeFunc(_color_HSVChange);
	_color_HSVChange.r *= _h_HSVChange;
	_color_HSVChange.g *= _s_HSVChange;
	_color_HSVChange.b *= _v_HSVChange;
	return _hsv2rgbHSVChangeFunc(_color_HSVChange);
}

void fragment() {
	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TEXTURE, UV);
	float n_out3p4 = n_out3p0.a;


// FloatConstant:13
	float n_out13p0 = 0.200000;


// FloatConstant:14
	float n_out14p0 = 1.500000;


// FloatConstant:15
	float n_out15p0 = 1.200000;


	vec3 n_out12p0;
// ShiftHSV:12
	{
		n_out12p0 = _hsvChangeHSVChangeFunc(vec3(n_out3p0.xyz), n_out13p0, n_out14p0, n_out15p0);
	}


// Output:0
	COLOR.rgb = n_out12p0;
	COLOR.a = n_out3p4;


}
"
graph_offset = Vector2(-215.199, -205.719)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(680, 0)
nodes/fragment/3/node = SubResource("412")
nodes/fragment/3/position = Vector2(120, 0)
nodes/fragment/12/node = SubResource("431")
nodes/fragment/12/position = Vector2(400, -120)
nodes/fragment/13/node = SubResource("432")
nodes/fragment/13/position = Vector2(180, -200)
nodes/fragment/14/node = SubResource("433")
nodes/fragment/14/position = Vector2(180, -140)
nodes/fragment/15/node = SubResource("434")
nodes/fragment/15/position = Vector2(180, -80)
nodes/fragment/connections = PackedInt32Array(13, 0, 12, 1, 15, 0, 12, 3, 14, 0, 12, 2, 3, 0, 12, 0, 12, 0, 0, 0, 3, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="436"]
shader = SubResource("435")

[sub_resource type="VisualShaderNodeCustom" id="437"]
default_input_values = [3, 0.0, 4, 0.0, 5, 0.0, 6, 0.0, 7, 0.0, 8, 0.0, 9, Vector3(1, 1, 1)]
initialized = true
script = ExtResource("73")

[sub_resource type="VisualShaderNodeInput" id="438"]
input_name = "uv"

[sub_resource type="VisualShaderNodeColorConstant" id="439"]
constant = Color(0, 0.833388, 1, 1)

[sub_resource type="VisualShaderNodeFloatConstant" id="440"]
constant = 0.5

[sub_resource type="VisualShaderNodeFloatConstant" id="441"]
constant = 0.7

[sub_resource type="VisualShaderNodeFloatConstant" id="442"]
constant = 0.4

[sub_resource type="VisualShaderNodeFloatConstant" id="443"]
constant = 2.0

[sub_resource type="VisualShaderNodeFloatConstant" id="444"]
constant = 2.0

[sub_resource type="VisualShaderNodeFloatConstant" id="445"]
constant = 1.0

[sub_resource type="VisualShader" id="446"]
code = "shader_type canvas_item;
render_mode blend_mix;



// ShineFX
vec4 _shineFunc(vec4 _color_shine, vec2 _uv_shine, float _loc_shine, float _rot_shine, float _width_shine, float _soft_shine, float _bright_shine, float _gloss_shine, vec3 _shine_color_shine){
	vec2 _angle_shine = vec2(cos(_rot_shine), sin(_rot_shine));
	float _norm_pos_shine = dot(_uv_shine, _angle_shine);
	float _normal_shine = 1.0 - abs((_norm_pos_shine - _loc_shine) / _width_shine);
	float _shine_power_shine = smoothstep(0.0, _soft_shine * 2.0, _normal_shine);
	vec3 _reflect_color_shine = mix(vec3(1.0), _color_shine.rgb * 10.0, _gloss_shine);
	_color_shine.rgb += _color_shine.a * _shine_power_shine * _bright_shine * _reflect_color_shine * _shine_color_shine.rgb;
	return _color_shine;
}

void fragment() {
// Input:17
	vec2 n_out17p0 = UV;


	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TEXTURE, UV);
	float n_out3p4 = n_out3p0.a;


// FloatConstant:19
	float n_out19p0 = 0.500000;


// FloatConstant:20
	float n_out20p0 = 0.700000;


// FloatConstant:21
	float n_out21p0 = 0.400000;


// FloatConstant:22
	float n_out22p0 = 2.000000;


// FloatConstant:23
	float n_out23p0 = 2.000000;


// FloatConstant:24
	float n_out24p0 = 1.000000;


// ColorConstant:18
	vec4 n_out18p0 = vec4(0.000000, 0.833388, 1.000000, 1.000000);


	vec3 n_out16p0;
	float n_out16p1;
// ShineFX:16
	{
		n_out16p1 = n_out3p4;
		n_out16p0 = _shineFunc(vec4(vec3(n_out3p0.xyz), n_out3p4), vec3(n_out17p0, 0.0).xy, n_out19p0, n_out20p0, n_out21p0, n_out22p0, n_out23p0, n_out24p0, vec3(n_out18p0.xyz)).rgb;
	}


// Output:0
	COLOR.rgb = n_out16p0;
	COLOR.a = n_out16p1;


}
"
graph_offset = Vector2(8.33194, -215.869)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(820, 0)
nodes/fragment/3/node = SubResource("412")
nodes/fragment/3/position = Vector2(240, -220)
nodes/fragment/16/node = SubResource("437")
nodes/fragment/16/position = Vector2(600, 0)
nodes/fragment/17/node = SubResource("438")
nodes/fragment/17/position = Vector2(160, -320)
nodes/fragment/18/node = SubResource("439")
nodes/fragment/18/position = Vector2(300, 360)
nodes/fragment/19/node = SubResource("440")
nodes/fragment/19/position = Vector2(300, -20)
nodes/fragment/20/node = SubResource("441")
nodes/fragment/20/position = Vector2(300, 40)
nodes/fragment/21/node = SubResource("442")
nodes/fragment/21/position = Vector2(300, 100)
nodes/fragment/22/node = SubResource("443")
nodes/fragment/22/position = Vector2(300, 160)
nodes/fragment/23/node = SubResource("444")
nodes/fragment/23/position = Vector2(300, 220)
nodes/fragment/24/node = SubResource("445")
nodes/fragment/24/position = Vector2(300, 280)
nodes/fragment/connections = PackedInt32Array(3, 0, 16, 1, 16, 1, 0, 1, 17, 0, 16, 0, 18, 0, 16, 9, 19, 0, 16, 3, 20, 0, 16, 4, 21, 0, 16, 5, 22, 0, 16, 6, 23, 0, 16, 7, 24, 0, 16, 8, 16, 0, 0, 0, 3, 4, 16, 2)

[sub_resource type="ShaderMaterial" id="447"]
shader = SubResource("446")

[sub_resource type="VisualShaderNodeCustom" id="448"]
default_input_values = [1, 1.0, 2, Vector3(1, 1, 1), 3, 1]
initialized = true
script = ExtResource("74")

[sub_resource type="VisualShaderNodeColorConstant" id="449"]
expanded_output_ports = [0]
constant = Color(0.46875, 0.0585938, 0.337372, 1)

[sub_resource type="VisualShader" id="450"]
code = "shader_type canvas_item;
render_mode blend_mix;




void fragment() {
	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TEXTURE, UV);
	float n_out3p4 = n_out3p0.a;


// ColorConstant:26
	vec4 n_out26p0 = vec4(0.468750, 0.058594, 0.337372, 1.000000);
	float n_out26p4 = n_out26p0.a;


	vec3 n_out25p0;
	float n_out25p1;
// TintRGBA:25
	{
		n_out25p0 = vec3(n_out3p0.xyz) * vec3(n_out26p0.xyz);
		n_out25p1 = n_out3p4 * n_out26p4;
	}


// Output:0
	COLOR.rgb = n_out25p0;
	COLOR.a = n_out25p1;


}
"
graph_offset = Vector2(-142.104, -217.975)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(800, -100)
nodes/fragment/3/node = SubResource("412")
nodes/fragment/3/position = Vector2(120, -180)
nodes/fragment/25/node = SubResource("448")
nodes/fragment/25/position = Vector2(540, -100)
nodes/fragment/26/node = SubResource("449")
nodes/fragment/26/position = Vector2(260, 60)
nodes/fragment/connections = PackedInt32Array(3, 0, 25, 0, 25, 0, 0, 0, 25, 1, 0, 1, 26, 0, 25, 2, 26, 4, 25, 3, 3, 4, 25, 1)

[sub_resource type="ShaderMaterial" id="451"]
shader = SubResource("450")

[sub_resource type="VisualShaderNodeCustom" id="452"]
default_input_values = [1, 0.0, 2, 1.0]
initialized = true
script = ExtResource("75")

[sub_resource type="VisualShaderNodeFloatConstant" id="453"]
constant = 0.6

[sub_resource type="VisualShaderNodeFloatConstant" id="454"]
constant = 2.0

[sub_resource type="VisualShader" id="455"]
code = "shader_type canvas_item;
render_mode blend_mix;



// Tonemap
vec3 _tonemapFunc(vec3 _color_tonemap, float _exposure_tonemap, float _gamma_tonemap){
	_color_tonemap.rgb *= pow(2.0, _exposure_tonemap);
	_color_tonemap.rgb = pow(_color_tonemap.rgb, vec3(_gamma_tonemap));
	return _color_tonemap;
}

void fragment() {
	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TEXTURE, UV);
	float n_out3p4 = n_out3p0.a;


// FloatConstant:28
	float n_out28p0 = 0.600000;


// FloatConstant:29
	float n_out29p0 = 2.000000;


	vec3 n_out27p0;
// Tonemap:27
	{
		n_out27p0 = _tonemapFunc(vec3(n_out3p0.xyz), n_out28p0, n_out29p0);
	}


// Output:0
	COLOR.rgb = n_out27p0;
	COLOR.a = n_out3p4;


}
"
graph_offset = Vector2(331.087, -354.391)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(800, -200)
nodes/fragment/3/node = SubResource("412")
nodes/fragment/3/position = Vector2(200, -200)
nodes/fragment/27/node = SubResource("452")
nodes/fragment/27/position = Vector2(500, -340)
nodes/fragment/28/node = SubResource("453")
nodes/fragment/28/position = Vector2(240, -360)
nodes/fragment/29/node = SubResource("454")
nodes/fragment/29/position = Vector2(240, -280)
nodes/fragment/connections = PackedInt32Array(3, 0, 27, 0, 28, 0, 27, 1, 29, 0, 27, 2, 27, 0, 0, 0, 3, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="456"]
shader = SubResource("455")

[sub_resource type="VisualShaderNodeCustom" id="457"]
default_input_values = [1, 1.5]
initialized = true
script = ExtResource("76")

[sub_resource type="VisualShaderNodeFloatConstant" id="458"]
constant = 1.5

[sub_resource type="VisualShader" id="459"]
code = "shader_type canvas_item;
render_mode blend_mix;



// TurnCGA4Palette
vec3 _cg4PaletteFunc(vec3 _col_cga, float _gamma_cga){
	_col_cga = pow(_col_cga, vec3(_gamma_cga));
	float _gray_col_cga4 = 0.21 * _col_cga.r + 0.71 * _col_cga.g + 0.07 * _col_cga.b;
	vec3 _res_col_cga4 = vec3(0.0);
	
	if      (_gray_col_cga4 <= 1.0/4.0)
		_res_col_cga4 = vec3(0.0,  0.0,  0.0);
	else if (_gray_col_cga4 <= 2.0/4.0)
		_res_col_cga4 = vec3(1.0,  0.33, 1.0);
	else if (_gray_col_cga4 <= 3.0/4.0)
		_res_col_cga4 = vec3(0.33, 1.0,  1.0);
	else if (_gray_col_cga4 <= 4.0/4.0)
		_res_col_cga4 = vec3(1.0,  1.0,  1.0);
	
	return _res_col_cga4;
}

void fragment() {
	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TEXTURE, UV);
	float n_out3p4 = n_out3p0.a;


// FloatConstant:31
	float n_out31p0 = 1.500000;


	vec3 n_out30p0;
// TurnCGA4Palette:30
	{
		n_out30p0 = _cg4PaletteFunc(vec3(n_out3p0.xyz), n_out31p0);
	}


// Output:0
	COLOR.rgb = n_out30p0;
	COLOR.a = n_out3p4;


}
"
graph_offset = Vector2(181.043, -362.087)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(800, -200)
nodes/fragment/3/node = SubResource("412")
nodes/fragment/3/position = Vector2(280, -200)
nodes/fragment/30/node = SubResource("457")
nodes/fragment/30/position = Vector2(560, -340)
nodes/fragment/31/node = SubResource("458")
nodes/fragment/31/position = Vector2(280, -280)
nodes/fragment/connections = PackedInt32Array(3, 0, 30, 0, 31, 0, 30, 1, 30, 0, 0, 0, 3, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="460"]
shader = SubResource("459")

[sub_resource type="VisualShaderNodeFloatConstant" id="461"]
constant = 1.6

[sub_resource type="VisualShaderNodeCustom" id="462"]
default_input_values = [1, 1.5]
initialized = true
script = ExtResource("77")

[sub_resource type="VisualShader" id="463"]
code = "shader_type canvas_item;
render_mode blend_mix;



// TurnGameBoyPalette
vec3 _gameboyPaletteFunc(vec3 _col_gbp0, float _gamma_gbp0){
	_col_gbp0 = pow(_col_gbp0, vec3(_gamma_gbp0));
	float _gray_col_gbp0 = 0.21 * _col_gbp0.r + 0.71 * _col_gbp0.g + 0.07 * _col_gbp0.b;
	vec3 _res_col_gbp0 = vec3(0.0);
	
	if      (_gray_col_gbp0 <= 1.0/4.0)
		_res_col_gbp0 = vec3(0.063, 0.247, 0.063);
	else if (_gray_col_gbp0 <= 2.0/4.0)
		_res_col_gbp0 = vec3(0.188, 0.392, 0.188);
	else if (_gray_col_gbp0 <= 3.0/4.0)
		_res_col_gbp0 = vec3(0.549, 0.667, 0.078);
	else if (_gray_col_gbp0 <= 4.0/4.0)
		_res_col_gbp0 = vec3(0.612, 0.725, 0.086);
	
	return _res_col_gbp0;
}

void fragment() {
	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TEXTURE, UV);
	float n_out3p4 = n_out3p0.a;


// FloatConstant:32
	float n_out32p0 = 1.600000;


	vec3 n_out33p0;
// TurnGameBoyPalette:33
	{
		n_out33p0 = _gameboyPaletteFunc(vec3(n_out3p0.xyz), n_out32p0);
	}


// Output:0
	COLOR.rgb = n_out33p0;
	COLOR.a = n_out3p4;


}
"
graph_offset = Vector2(170.522, -346.044)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(800, -200)
nodes/fragment/3/node = SubResource("412")
nodes/fragment/3/position = Vector2(280, -200)
nodes/fragment/32/node = SubResource("461")
nodes/fragment/32/position = Vector2(280, -280)
nodes/fragment/33/node = SubResource("462")
nodes/fragment/33/position = Vector2(540, -300)
nodes/fragment/connections = PackedInt32Array(32, 0, 33, 1, 3, 0, 33, 0, 33, 0, 0, 0, 3, 4, 0, 1)

[sub_resource type="ShaderMaterial" id="464"]
shader = SubResource("463")

[sub_resource type="VisualShaderNodeFloatConstant" id="465"]
constant = 2.0

[sub_resource type="VisualShaderNodeCustom" id="466"]
default_input_values = [1, 6, 2, Vector3(2, 2, 0), 3, 2, 4, 0.8, 5, 0.5, 6, 0.3, 7, Vector3(0.5, 0.5, 0)]
initialized = true
script = ExtResource("79")

[sub_resource type="VisualShaderNodeInput" id="467"]
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatConstant" id="468"]
constant = 6.0

[sub_resource type="VisualShaderNodeFloatConstant" id="469"]
constant = 2.0

[sub_resource type="VisualShaderNodeFloatConstant" id="470"]
constant = 0.8

[sub_resource type="VisualShaderNodeFloatConstant" id="471"]
constant = 0.5

[sub_resource type="VisualShaderNodeFloatConstant" id="472"]
constant = 0.3

[sub_resource type="VisualShaderNodeVec3Constant" id="473"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShader" id="474"]
resource_local_to_scene = true
code = "shader_type canvas_item;
render_mode blend_mix;



// FractalGenericNoise2D
float _hash2_gener1c2DFractal(vec2 _p_hash2_gener1c) {
	return (fract(1e4 * sin(17.0 * _p_hash2_gener1c.x + _p_hash2_gener1c.y * 0.1) *
					(0.1 + abs(sin(_p_hash2_gener1c.y * 13.0 + _p_hash2_gener1c.x)))));
}
float _genericNoise2DFractal(vec2 _x_gener1c2D) {
	vec2 _temp_i_gener1c2D = floor(_x_gener1c2D);
	vec2 _temp_f_gener1c2D = fract(_x_gener1c2D);

	float _a_g1n2 = _hash2_gener1c2DFractal(_temp_i_gener1c2D);
	float _b_g1n2 = _hash2_gener1c2DFractal(_temp_i_gener1c2D + vec2(1.0, 0.0));
	float _c_g1n2 = _hash2_gener1c2DFractal(_temp_i_gener1c2D + vec2(0.0, 1.0));
	float _d_g1n2 = _hash2_gener1c2DFractal(_temp_i_gener1c2D + vec2(1.0, 1.0));
	
	vec2 _u_g1n2 = _temp_f_gener1c2D * _temp_f_gener1c2D * (3.0 - 2.0 * _temp_f_gener1c2D);
	return (mix(_a_g1n2, _b_g1n2, _u_g1n2.x) + (_c_g1n2 - _a_g1n2) *
				_u_g1n2.y * (1.0 - _u_g1n2.x) + (_d_g1n2 - _b_g1n2) * _u_g1n2.x * _u_g1n2.y);
}
float _genericNoise2DFBM(vec2 _uv_gnfbm, int _oct_gnfbm, vec2 _per_gnfbm, float _lac_gnfbm,
						float _persist_gnfbm, float _rot_gnfbm, float _ampl_gnfbm, vec2 _shift_gnfbm) {
	float _v = 0.0;
	float _a = _ampl_gnfbm;
	mat2 _r0t = mat2(vec2(cos(_rot_gnfbm), sin(_rot_gnfbm)), vec2(-sin(_rot_gnfbm), cos(_rot_gnfbm)));
	for (int i = 0; i < _oct_gnfbm; ++i) {
		_v += _a * _genericNoise2DFractal(_uv_gnfbm * _per_gnfbm);
		_uv_gnfbm = _r0t * _uv_gnfbm * _lac_gnfbm + _shift_gnfbm;
		_a *= _persist_gnfbm;
	}
	return _v;
}

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:4
	float n_out4p0 = 6.000000;


// FloatConstant:10
	float n_out10p0 = 2.000000;


// FloatConstant:5
	float n_out5p0 = 2.000000;


// FloatConstant:6
	float n_out6p0 = 0.800000;


// FloatConstant:7
	float n_out7p0 = 0.500000;


// FloatConstant:8
	float n_out8p0 = 0.300000;


// Vector3Constant:9
	vec3 n_out9p0 = vec3(0.500000, 0.500000, 0.000000);


	float n_out2p0;
// FractalGenericNoise2D:2
	{
		n_out2p0 = _genericNoise2DFBM(vec3(n_out3p0, 0.0).xy, int(n_out4p0), vec3(n_out10p0).xy, n_out5p0, n_out6p0, n_out7p0, n_out8p0, n_out9p0.xy);
	}


// Output:0
	COLOR.rgb = vec3(n_out2p0);


}
"
graph_offset = Vector2(-116.618, -6.67545)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(400, 200)
nodes/fragment/2/node = SubResource("466")
nodes/fragment/2/position = Vector2(140, 200)
nodes/fragment/3/node = SubResource("467")
nodes/fragment/3/position = Vector2(-280, -20)
nodes/fragment/4/node = SubResource("468")
nodes/fragment/4/position = Vector2(-140, 60)
nodes/fragment/5/node = SubResource("469")
nodes/fragment/5/position = Vector2(-140, 220)
nodes/fragment/6/node = SubResource("470")
nodes/fragment/6/position = Vector2(-140, 300)
nodes/fragment/7/node = SubResource("471")
nodes/fragment/7/position = Vector2(-140, 380)
nodes/fragment/8/node = SubResource("472")
nodes/fragment/8/position = Vector2(-140, 460)
nodes/fragment/9/node = SubResource("473")
nodes/fragment/9/position = Vector2(-300, 540)
nodes/fragment/10/node = SubResource("465")
nodes/fragment/10/position = Vector2(-140, 140)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 0, 4, 0, 2, 1, 6, 0, 2, 4, 7, 0, 2, 5, 8, 0, 2, 6, 9, 0, 2, 7, 5, 0, 2, 3, 10, 0, 2, 2, 2, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="475"]
shader = SubResource("474")

[sub_resource type="VisualShaderNodeVec3Constant" id="476"]
constant = Vector3(2, 2, 0)

[sub_resource type="VisualShaderNodeVec3Constant" id="477"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShaderNodeCustom" id="478"]
default_input_values = [1, 6, 2, Vector3(2, 2, 0), 3, 2, 4, 0.8, 5, 0.5, 6, 0.6, 7, Vector3(0.5, 0.5, 0)]
initialized = true
script = ExtResource("80")

[sub_resource type="VisualShaderNodeFloatConstant" id="479"]
constant = 6.0

[sub_resource type="VisualShaderNodeFloatConstant" id="480"]
constant = 2.0

[sub_resource type="VisualShaderNodeFloatConstant" id="481"]
constant = 0.8

[sub_resource type="VisualShaderNodeFloatConstant" id="482"]
constant = 0.5

[sub_resource type="VisualShaderNodeFloatConstant" id="483"]
constant = 0.6

[sub_resource type="VisualShader" id="484"]
resource_local_to_scene = true
code = "shader_type canvas_item;
render_mode blend_mix;



// FractalPerlinNoise2D
float _perlin2dNoiseFuncFractal(vec2 P) {
	vec4 Pi = floor(vec4(P, P)) + vec4(0.0, 0.0, 1.0, 1.0);
	vec4 Pf = fract(vec4(P, P)) - vec4(0.0, 0.0, 1.0, 1.0);
	
	Pi = Pi - floor(Pi * (1.0 / 289.0)) * 289.0;
	vec4 ix = Pi.xzxz;
	vec4 iy = Pi.yyww;
	vec4 fx = Pf.xzxz;
	vec4 fy = Pf.yyww;
	
	vec4 i = (((((((ix*34.0)+1.0)*ix)-floor((((ix*34.0)+1.0)*ix)*(1.0/289.0))*289.0 + iy)*34.0)+1.0)*
		((((ix*34.0)+1.0)*ix)-floor((((ix*34.0)+1.0)*ix)*(1.0/289.0))*289.0 + iy))-
		floor((((((((ix*34.0)+1.0)*ix)-floor((((ix*34.0)+1.0)*ix)*(1.0/289.0))*289.0 + iy)*34.0)+1.0)*
		((((ix*34.0)+1.0)*ix)-floor((((ix*34.0)+1.0)*ix)*(1.0/289.0))*289.0 + iy))*(1.0/289.0))*289.0;
	
	vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;
	vec4 gy = abs(gx) - 0.5 ;
	vec4 tx = floor(gx + 0.5);
	gx = gx - tx;
	
	vec2 g00 = vec2(gx.x,gy.x);
	vec2 g10 = vec2(gx.y,gy.y);
	vec2 g01 = vec2(gx.z,gy.z);
	vec2 g11 = vec2(gx.w,gy.w);
	
	vec4 norm = 1.79284291400159 - 0.85373472095314 * vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));
	g00 *= norm.x;
	g01 *= norm.y;
	g10 *= norm.z;
	g11 *= norm.w;
	
	float n00 = dot(g00, vec2(fx.x, fy.x));
	float n10 = dot(g10, vec2(fx.y, fy.y));
	float n01 = dot(g01, vec2(fx.z, fy.z));
	float n11 = dot(g11, vec2(fx.w, fy.w));
	
	vec2 fade_xy = Pf.xy * Pf.xy * Pf.xy * (Pf.xy * (Pf.xy * 6.0 - 15.0) + 10.0);
	vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);
	float n_xy = mix(n_x.x, n_x.y, fade_xy.y);
	return 2.3 * n_xy;
}
float _perlinNoise2DFBM(vec2 _uv_pn2fbm, int _oct_pn2fbm, vec2 _per_pn2fbm, float _lac_pn2fbm,
						float _persist_pn2fbm, float _rot_pn2fbm, float _ampl_pn2fbm, vec2 _shift_pn2fbm) {
	float _v = 0.0;
	float _a = _ampl_pn2fbm;
	mat2 _r0t = mat2(vec2(cos(_rot_pn2fbm), sin(_rot_pn2fbm)), vec2(-sin(_rot_pn2fbm), cos(_rot_pn2fbm)));
	for (int i = 0; i < _oct_pn2fbm; ++i) {
		_v += _a * _perlin2dNoiseFuncFractal(_uv_pn2fbm * _per_pn2fbm);
		_uv_pn2fbm = _r0t * _uv_pn2fbm * _lac_pn2fbm + _shift_pn2fbm;
		_a *= _persist_pn2fbm;
	}
	return (min(_v, 1.0) + 1.0) * 0.5;
}

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:5
	float n_out5p0 = 6.000000;


// Vector3Constant:10
	vec3 n_out10p0 = vec3(2.000000, 2.000000, 0.000000);


// FloatConstant:6
	float n_out6p0 = 2.000000;


// FloatConstant:7
	float n_out7p0 = 0.800000;


// FloatConstant:8
	float n_out8p0 = 0.500000;


// FloatConstant:9
	float n_out9p0 = 0.600000;


// Vector3Constant:11
	vec3 n_out11p0 = vec3(0.500000, 0.500000, 0.000000);


	float n_out4p0;
// FractalPerlinNoise2D:4
	{
		n_out4p0 = _perlinNoise2DFBM(vec3(n_out3p0, 0.0).xy, int(n_out5p0), n_out10p0.xy, n_out6p0, n_out7p0, n_out8p0, n_out9p0, n_out11p0.xy);
	}


// Output:0
	COLOR.rgb = vec3(n_out4p0);


}
"
graph_offset = Vector2(-231.063, 38.8457)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(400, 200)
nodes/fragment/3/node = SubResource("467")
nodes/fragment/3/position = Vector2(-260, -40)
nodes/fragment/4/node = SubResource("478")
nodes/fragment/4/position = Vector2(160, 200)
nodes/fragment/5/node = SubResource("479")
nodes/fragment/5/position = Vector2(-120, 40)
nodes/fragment/6/node = SubResource("480")
nodes/fragment/6/position = Vector2(-100, 220)
nodes/fragment/7/node = SubResource("481")
nodes/fragment/7/position = Vector2(-100, 300)
nodes/fragment/8/node = SubResource("482")
nodes/fragment/8/position = Vector2(-100, 380)
nodes/fragment/9/node = SubResource("483")
nodes/fragment/9/position = Vector2(-100, 460)
nodes/fragment/10/node = SubResource("476")
nodes/fragment/10/position = Vector2(-260, 120)
nodes/fragment/11/node = SubResource("477")
nodes/fragment/11/position = Vector2(-240, 540)
nodes/fragment/connections = PackedInt32Array(3, 0, 4, 0, 5, 0, 4, 1, 6, 0, 4, 3, 7, 0, 4, 4, 8, 0, 4, 5, 9, 0, 4, 6, 10, 0, 4, 2, 11, 0, 4, 7, 4, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="485"]
shader = SubResource("484")

[sub_resource type="VisualShaderNodeFloatConstant" id="486"]
constant = 0.3

[sub_resource type="VisualShaderNodeFloatConstant" id="487"]
constant = 1.0

[sub_resource type="VisualShaderNodeVec3Constant" id="488"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShaderNodeCustom" id="489"]
default_input_values = [1, 6, 2, Vector3(2, 2, 0), 3, 2, 4, 0.8, 5, 0.5, 6, 0.3, 7, Vector3(0.5, 0.5, 0), 8, 1, 9, false]
initialized = true
script = ExtResource("81")

[sub_resource type="VisualShaderNodeBooleanConstant" id="490"]

[sub_resource type="VisualShaderNodeVec3Constant" id="491"]
constant = Vector3(2, 2, 0)

[sub_resource type="VisualShaderNodeFloatConstant" id="492"]
constant = 6.0

[sub_resource type="VisualShaderNodeInput" id="493"]
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatConstant" id="494"]
constant = 2.0

[sub_resource type="VisualShaderNodeFloatConstant" id="495"]
constant = 0.8

[sub_resource type="VisualShaderNodeFloatConstant" id="496"]
constant = 0.5

[sub_resource type="VisualShader" id="497"]
code = "shader_type canvas_item;
render_mode blend_mix;



// FractalWorleyNoise2D
vec2 _cellular2dNoiseFractalFunc(vec2 P, float _jitter_w2d) {
	float K = 0.142857142857; // 1/7
	float Ko = 0.428571428571; // 3/7
	
	vec2 Pi = floor(P) - floor(floor(P) * (1.0 / 289.0)) * 289.0;
	vec2 Pf = fract(P);
	vec3 oi = vec3(-1.0, 0.0, 1.0);
	vec3 of = vec3(-0.5, 0.5, 1.5);
	vec3 px = (34.0*(Pi.x+oi)+1.0)*(Pi.x+oi)-floor((34.0*(Pi.x+oi)+1.0)*(Pi.x+oi)*(1.0/289.0))* 289.0;
	vec3 p = (34.0*(px.x+Pi.y+ oi)+1.0)*(px.x+Pi.y+ oi)-floor((34.0*(px.x+Pi.y+oi)+1.0)*(px.x+Pi.y+ oi)*(1.0/289.0))*289.0;
	vec3 ox = fract(p*K) - Ko;
	vec3 oy = (floor(p*K) - floor(floor(p*K) * (1.0 / 7.0)) * 7.0) * K - Ko;
	vec3 dx = Pf.x + 0.5 + _jitter_w2d*ox;
	vec3 dy = Pf.y - of + _jitter_w2d*oy;
	vec3 d1 = dx * dx + dy * dy;
	p = (34.0*(px.y+Pi.y+oi)+1.0)*(px.y+Pi.y+oi)-floor((34.0*(px.y+Pi.y+oi)+1.0)*(px.y+Pi.y+oi)*(1.0/289.0))*289.0;
	ox = fract(p*K) - Ko;
	oy = (floor(p*K) - floor(floor(p*K) * (1.0 / 7.0)) * 7.0) * K - Ko;
	dx = Pf.x - 0.5 + _jitter_w2d*ox;
	dy = Pf.y - of + _jitter_w2d*oy;
	vec3 d2 = dx * dx + dy * dy;
	p = (34.0*(px.z+Pi.y+oi)+1.0)*(px.z+Pi.y+oi)-floor((34.0*(px.z+Pi.y+oi)+1.0)*(px.z+Pi.y+oi)*(1.0/289.0))*289.0;
	ox = fract(p*K) - Ko;
	oy = (floor(p*K) - floor(floor(p*K) * (1.0 / 7.0)) * 7.0) * K - Ko;
	dx = Pf.x - 1.5 + _jitter_w2d*ox;
	dy = Pf.y - of + _jitter_w2d*oy;
	vec3 d3 = dx * dx + dy * dy;
	vec3 d1a = min(d1, d2);
	d2 = max(d1, d2);
	d2 = min(d2, d3);
	d1 = min(d1a, d2);
	d2 = max(d1a, d2);
	d1.xy = (d1.x < d1.y) ? d1.xy : d1.yx;
	d1.xz = (d1.x < d1.z) ? d1.xz : d1.zx;
	d1.yz = min(d1.yz, d2.yz);
	d1.y = min(d1.y, d1.z);
	d1.y = min(d1.y, d2.x);
	return sqrt(d1.xy);
}
float _cellularNoise2DFBM(vec2 _uv_cnfbm, int _oct_cnfbm, vec2 _per_cnfbm, float _lac_cnfbm, float _persist_cnfbm,
		float _rot_cnfbm, float _ampl_cnfbm, vec2 _shift_cnfbm, float _jitter_cnfbm, bool _use_F2_cnfbm) {
	float _v = 0.0;
	float _a = _ampl_cnfbm;
	mat2 _r0t = mat2(vec2(cos(_rot_cnfbm), sin(_rot_cnfbm)), vec2(-sin(_rot_cnfbm), cos(_rot_cnfbm)));
	for (int i = 0; i < _oct_cnfbm; ++i) {
		vec2 _cell_noiseF12 = _cellular2dNoiseFractalFunc(_uv_cnfbm * _per_cnfbm, _jitter_cnfbm);
		if (_use_F2_cnfbm) {
			_v += _a * _cell_noiseF12.y;
		} else {
			_v += _a * _cell_noiseF12.x;
		}
		_uv_cnfbm = _r0t * _uv_cnfbm * _lac_cnfbm + _shift_cnfbm;
		_a *= _persist_cnfbm;
	}
	return _v;
}

void fragment() {
// Input:5
	vec2 n_out5p0 = UV;


// FloatConstant:4
	float n_out4p0 = 6.000000;


// Vector3Constant:3
	vec3 n_out3p0 = vec3(2.000000, 2.000000, 0.000000);


// FloatConstant:7
	float n_out7p0 = 2.000000;


// FloatConstant:8
	float n_out8p0 = 0.800000;


// FloatConstant:9
	float n_out9p0 = 0.500000;


// FloatConstant:10
	float n_out10p0 = 0.300000;


// Vector3Constant:12
	vec3 n_out12p0 = vec3(0.500000, 0.500000, 0.000000);


// FloatConstant:11
	float n_out11p0 = 1.000000;


// BooleanConstant:14
	bool n_out14p0 = false;


	float n_out13p0;
// FractalWorleyNoise2D:13
	{
		n_out13p0 = _cellularNoise2DFBM(vec3(n_out5p0, 0.0).xy, int(n_out4p0), n_out3p0.xy, n_out7p0, n_out8p0, n_out9p0, n_out10p0, n_out12p0.xy, n_out11p0, n_out14p0);
	}


// Output:0
	COLOR.rgb = vec3(n_out13p0);


}
"
graph_offset = Vector2(-354.809, -74.2784)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(460, 200)
nodes/fragment/3/node = SubResource("491")
nodes/fragment/3/position = Vector2(-220, 160)
nodes/fragment/4/node = SubResource("492")
nodes/fragment/4/position = Vector2(-80, 100)
nodes/fragment/5/node = SubResource("493")
nodes/fragment/5/position = Vector2(-240, 20)
nodes/fragment/7/node = SubResource("494")
nodes/fragment/7/position = Vector2(-80, 240)
nodes/fragment/8/node = SubResource("495")
nodes/fragment/8/position = Vector2(-80, 300)
nodes/fragment/9/node = SubResource("496")
nodes/fragment/9/position = Vector2(-80, 360)
nodes/fragment/10/node = SubResource("486")
nodes/fragment/10/position = Vector2(-80, 420)
nodes/fragment/11/node = SubResource("487")
nodes/fragment/11/position = Vector2(-80, 560)
nodes/fragment/12/node = SubResource("488")
nodes/fragment/12/position = Vector2(-220, 480)
nodes/fragment/13/node = SubResource("489")
nodes/fragment/13/position = Vector2(180, 200)
nodes/fragment/14/node = SubResource("490")
nodes/fragment/14/position = Vector2(-80, 620)
nodes/fragment/connections = PackedInt32Array(5, 0, 13, 0, 4, 0, 13, 1, 3, 0, 13, 2, 7, 0, 13, 3, 8, 0, 13, 4, 9, 0, 13, 5, 10, 0, 13, 6, 12, 0, 13, 7, 11, 0, 13, 8, 14, 0, 13, 9, 13, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="498"]
shader = SubResource("497")

[sub_resource type="VisualShaderNodeVec3Constant" id="499"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShaderNodeVec3Constant" id="500"]
constant = Vector3(2, 2, 0)

[sub_resource type="VisualShaderNodeCustom" id="501"]
default_input_values = [1, 6, 2, Vector3(2, 2, 0), 3, 2, 4, 0.8, 5, 0.5, 6, 0.5, 7, Vector3(0.5, 0.5, 0)]
initialized = true
script = ExtResource("82")

[sub_resource type="VisualShaderNodeInput" id="502"]
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatConstant" id="503"]
constant = 6.0

[sub_resource type="VisualShaderNodeFloatConstant" id="504"]
constant = 2.0

[sub_resource type="VisualShaderNodeFloatConstant" id="505"]
constant = 0.8

[sub_resource type="VisualShaderNodeFloatConstant" id="506"]
constant = 0.5

[sub_resource type="VisualShaderNodeFloatConstant" id="507"]
constant = 0.5

[sub_resource type="VisualShader" id="508"]
code = "shader_type canvas_item;
render_mode blend_mix;



// FractalSimplexNoise2D
vec3 _permute_simplex2_noise_fractal(vec3 x) {
	return ((x*34.0)+1.0)*x-floor(((x*34.0)+1.0)*x*(1.0/289.0))*289.0;
}

float _simplex2dNoiseFractalFunc(vec2 v) {
	vec4 C = vec4(0.211324865405187,
				0.366025403784439,
				-0.577350269189626,
				0.024390243902439);
	
	vec2 i  = floor(v + dot(v, C.yy) );
	vec2 x0 = v -   i + dot(i, C.xx);
	
	vec2 i1;
	i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
	vec4 x12 = vec4(x0.xy, x0.xy) + C.xxzz;
	x12.xy -= i1;
	
	i = i - floor(i * (1.0 / 289.0)) * 289.0;
	vec3 p = _permute_simplex2_noise_fractal(_permute_simplex2_noise_fractal(i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0));
	
	vec3 m = max(0.5 - vec3(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)), vec3(0.0));
	m = m * m;
	m = m * m;
	
	vec3 x = 2.0 * fract(p * C.www) - 1.0;
	vec3 h = abs(x) - 0.5;
	vec3 ox = floor(x + 0.5);
	vec3 a0 = x - ox;
	
	m *= 1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h);
	
	vec3 g;
	g.x  = a0.x  * x0.x  + h.x  * x0.y;
	g.yz = a0.yz * x12.xz + h.yz * x12.yw;
	return 130.0 * dot(m, g);
}
float _simplexNoise2DFBM(vec2 _uv_sn2fbm, int _oct_sn2fbm, vec2 _per_sn2fbm, float _lac_sn2fbm,
						float _persist_sn2fbm, float _rot_sn2fbm, float _ampl_sn2fbm, vec2 _shift_sn2fbm) {
	float _v = 0.0;
	float _a = _ampl_sn2fbm;
	mat2 _r0t = mat2(vec2(cos(_rot_sn2fbm), sin(_rot_sn2fbm)), vec2(-sin(_rot_sn2fbm), cos(_rot_sn2fbm)));
	for (int i = 0; i < _oct_sn2fbm; ++i) {
		_v += _a * _simplex2dNoiseFractalFunc(_uv_sn2fbm * _per_sn2fbm);
		_uv_sn2fbm = _r0t * _uv_sn2fbm * _lac_sn2fbm + _shift_sn2fbm;
		_a *= _persist_sn2fbm;
	}
	return (min(_v, 1.0) + 1.0) * 0.5;
}

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:4
	float n_out4p0 = 6.000000;


// Vector3Constant:12
	vec3 n_out12p0 = vec3(2.000000, 2.000000, 0.000000);


// FloatConstant:5
	float n_out5p0 = 2.000000;


// FloatConstant:6
	float n_out6p0 = 0.800000;


// FloatConstant:7
	float n_out7p0 = 0.500000;


// FloatConstant:8
	float n_out8p0 = 0.500000;


// Vector3Constant:10
	vec3 n_out10p0 = vec3(0.500000, 0.500000, 0.000000);


	float n_out2p0;
// FractalSimplexNoise2D:2
	{
		n_out2p0 = _simplexNoise2DFBM(vec3(n_out3p0, 0.0).xy, int(n_out4p0), n_out12p0.xy, n_out5p0, n_out6p0, n_out7p0, n_out8p0, n_out10p0.xy);
	}


// Output:0
	COLOR.rgb = vec3(n_out2p0);


}
"
graph_offset = Vector2(-202.473, 86.5394)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(600, 200)
nodes/fragment/2/node = SubResource("501")
nodes/fragment/2/position = Vector2(320, 200)
nodes/fragment/3/node = SubResource("502")
nodes/fragment/3/position = Vector2(-80, 20)
nodes/fragment/4/node = SubResource("503")
nodes/fragment/4/position = Vector2(60, 100)
nodes/fragment/5/node = SubResource("504")
nodes/fragment/5/position = Vector2(60, 240)
nodes/fragment/6/node = SubResource("505")
nodes/fragment/6/position = Vector2(60, 300)
nodes/fragment/7/node = SubResource("506")
nodes/fragment/7/position = Vector2(60, 360)
nodes/fragment/8/node = SubResource("507")
nodes/fragment/8/position = Vector2(60, 420)
nodes/fragment/10/node = SubResource("499")
nodes/fragment/10/position = Vector2(-80, 480)
nodes/fragment/12/node = SubResource("500")
nodes/fragment/12/position = Vector2(-80, 160)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 0, 4, 0, 2, 1, 10, 0, 2, 7, 5, 0, 2, 3, 6, 0, 2, 4, 7, 0, 2, 5, 8, 0, 2, 6, 12, 0, 2, 2, 2, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="509"]
shader = SubResource("508")

[sub_resource type="VisualShaderNodeFloatConstant" id="510"]
constant = 0.8

[sub_resource type="VisualShaderNodeFloatConstant" id="511"]
constant = 2.0

[sub_resource type="VisualShaderNodeVec3Constant" id="512"]
constant = Vector3(2, 2, 0)

[sub_resource type="VisualShaderNodeFloatConstant" id="513"]
constant = 6.0

[sub_resource type="VisualShaderNodeCustom" id="514"]
default_input_values = [1, 6, 2, Vector3(2, 2, 0), 3, 2, 4, 0.8, 5, 0.5, 6, 0.3, 7, Vector3(0.5, 0.5, 0), 8, 1, 9, false, 10, 0]
initialized = true
script = ExtResource("83")

[sub_resource type="VisualShaderNodeInput" id="515"]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id="516"]
input_name = "time"

[sub_resource type="VisualShaderNodeBooleanConstant" id="517"]

[sub_resource type="VisualShaderNodeFloatConstant" id="518"]
constant = 1.0

[sub_resource type="VisualShaderNodeVec3Constant" id="519"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShaderNodeFloatConstant" id="520"]
constant = 0.3

[sub_resource type="VisualShaderNodeFloatConstant" id="521"]
constant = 0.5

[sub_resource type="VisualShader" id="522"]
code = "shader_type canvas_item;
render_mode blend_mix;



// FractalWorleyNoise3D
vec2 _cellular3dNoiseFractalFunc(vec3 P, float _jitter_w3d) {
	float K = 0.142857142857;
	float Ko = 0.428571428571;
	float K2 = 0.020408163265306;
	float Kz = 0.166666666667;
	float Kzo = 0.416666666667;
	
	vec3 Pi = floor(P) - floor(floor(P) * (1.0 / 289.0)) * 289.0;
	vec3 Pf = fract(P) - 0.5;
	
	vec3 Pfx = Pf.x + vec3(1.0, 0.0, -1.0);
	vec3 Pfy = Pf.y + vec3(1.0, 0.0, -1.0);
	vec3 Pfz = Pf.z + vec3(1.0, 0.0, -1.0);
	
	vec3 p = ((34.0*(Pi.x+vec3(-1.0,0.0,1.0))+1.0)*(Pi.x+vec3(-1.0,0.0,1.0)))-floor(((34.0*(Pi.x+vec3(-1.0,0.0,1.0))+1.0)
				*(Pi.x+vec3(-1.0,0.0,1.0)))*(1.0/289.0))*289.0;
	vec3 p1 = ((34.0*(p+Pi.y-1.0)+1.0)*(p+Pi.y-1.0))-floor(((34.0*(p+Pi.y-1.0)+1.0)*(p+Pi.y-1.0))*(1.0/289.0))*289.0;
	vec3 p2 = ((34.0*(p+Pi.y)+1.0)*(p+Pi.y))-floor(((34.0*(p+Pi.y)+1.0)*(p+Pi.y))*(1.0/289.0))*289.0;
	vec3 p3 = ((34.0*(p+Pi.y+1.0)+1.0)*(p+Pi.y+1.0))-floor(((34.0*(p+Pi.y+1.0)+1.0)*(p+Pi.y+1.0))*(1.0/289.0))*289.0;
	
	vec3 p11 = ((34.0*(p1+Pi.z-1.0)+1.0)*(p1+Pi.z-1.0))-floor(((34.0*(p1+Pi.z-1.0)+1.0)*(p1+Pi.z-1.0))*(1.0/289.0))*289.0;
	vec3 p12 = ((34.0*(p1+Pi.z)+1.0)*(p1+Pi.z))-floor(((34.0*(p1+Pi.z)+1.0)*(p1+Pi.z))*(1.0/289.0))*289.0;
	vec3 p13 = ((34.0*(p1+Pi.z+1.0)+1.0)*(p1+Pi.z+1.0))-floor(((34.0*(p1+Pi.z+1.0)+1.0)*(p1+Pi.z+1.0))*(1.0/289.0))*289.0;
	
	vec3 p21 = ((34.0*(p2+Pi.z-1.0)+1.0)*(p2+Pi.z-1.0))-floor(((34.0*(p2+Pi.z-1.0)+1.0)*(p2+Pi.z-1.0))*(1.0/289.0))*289.0;
	vec3 p22 = ((34.0*(p2+Pi.z)+1.0)*(p2+Pi.z))-floor(((34.0*(p2+Pi.z)+1.0)*(p2+Pi.z))*(1.0/289.0))*289.0;
	vec3 p23 = ((34.0*(p2+Pi.z+1.0)+1.0)*(p2+Pi.z+1.0))-floor(((34.0*(p2+Pi.z+1.0)+1.0)*(p2+Pi.z+1.0))*(1.0/289.0))*289.0;
	
	vec3 p31 = ((34.0*(p3+Pi.z-1.0)+1.0)*(p3+Pi.z-1.0))-floor(((34.0*(p3+Pi.z-1.0)+1.0)*(p3+Pi.z-1.0))*(1.0/289.0))*289.0;
	vec3 p32 = ((34.0*(p3+Pi.z)+1.0)*(p3+Pi.z))-floor(((34.0*(p3+Pi.z)+1.0)*(p3+Pi.z))*(1.0/289.0))*289.0;
	vec3 p33 = ((34.0*(p3+Pi.z+1.0)+1.0)*(p3+Pi.z+1.0))-floor(((34.0*(p3+Pi.z+1.0)+1.0)*(p3+Pi.z+1.0))*(1.0/289.0))*289.0;
	
	vec3 ox11 = fract(p11*K) - Ko;
	vec3 oy11 = ((floor(p11*K))-floor((floor(p11*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz11 = floor(p11*K2)*Kz - Kzo;
	
	vec3 ox12 = fract(p12*K) - Ko;
	vec3 oy12 = ((floor(p12*K))-floor((floor(p12*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz12 = floor(p12*K2)*Kz - Kzo;
	
	vec3 ox13 = fract(p13*K) - Ko;
	vec3 oy13 = ((floor(p13*K))-floor((floor(p13*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz13 = floor(p13*K2)*Kz - Kzo;
	
	vec3 ox21 = fract(p21*K) - Ko;
	vec3 oy21 = ((floor(p21*K))-floor((floor(p21*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz21 = floor(p21*K2)*Kz - Kzo;
	
	vec3 ox22 = fract(p22*K) - Ko;
	vec3 oy22 = ((floor(p22*K))-floor((floor(p22*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz22 = floor(p22*K2)*Kz - Kzo;
	
	vec3 ox23 = fract(p23*K) - Ko;
	vec3 oy23 = ((floor(p23*K))-floor((floor(p23*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz23 = floor(p23*K2)*Kz - Kzo;
	
	vec3 ox31 = fract(p31*K) - Ko;
	vec3 oy31 = ((floor(p31*K))-floor((floor(p31*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz31 = floor(p31*K2)*Kz - Kzo;
	
	vec3 ox32 = fract(p32*K) - Ko;
	vec3 oy32 = ((floor(p32*K))-floor((floor(p32*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz32 = floor(p32*K2)*Kz - Kzo;
	
	vec3 ox33 = fract(p33*K) - Ko;
	vec3 oy33 = ((floor(p33*K))-floor((floor(p33*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz33 = floor(p33*K2)*Kz - Kzo;
	
	vec3 dx11 = Pfx + _jitter_w3d*ox11;
	vec3 dy11 = Pfy.x + _jitter_w3d*oy11;
	vec3 dz11 = Pfz.x + _jitter_w3d*oz11;
	
	vec3 dx12 = Pfx + _jitter_w3d*ox12;
	vec3 dy12 = Pfy.x + _jitter_w3d*oy12;
	vec3 dz12 = Pfz.y + _jitter_w3d*oz12;
	
	vec3 dx13 = Pfx + _jitter_w3d*ox13;
	vec3 dy13 = Pfy.x + _jitter_w3d*oy13;
	vec3 dz13 = Pfz.z + _jitter_w3d*oz13;
	
	vec3 dx21 = Pfx + _jitter_w3d*ox21;
	vec3 dy21 = Pfy.y + _jitter_w3d*oy21;
	vec3 dz21 = Pfz.x + _jitter_w3d*oz21;
	
	vec3 dx22 = Pfx + _jitter_w3d*ox22;
	vec3 dy22 = Pfy.y + _jitter_w3d*oy22;
	vec3 dz22 = Pfz.y + _jitter_w3d*oz22;
	
	vec3 dx23 = Pfx + _jitter_w3d*ox23;
	vec3 dy23 = Pfy.y + _jitter_w3d*oy23;
	vec3 dz23 = Pfz.z + _jitter_w3d*oz23;
	
	vec3 dx31 = Pfx + _jitter_w3d*ox31;
	vec3 dy31 = Pfy.z + _jitter_w3d*oy31;
	vec3 dz31 = Pfz.x + _jitter_w3d*oz31;
	
	vec3 dx32 = Pfx + _jitter_w3d*ox32;
	vec3 dy32 = Pfy.z + _jitter_w3d*oy32;
	vec3 dz32 = Pfz.y + _jitter_w3d*oz32;
	
	vec3 dx33 = Pfx + _jitter_w3d*ox33;
	vec3 dy33 = Pfy.z + _jitter_w3d*oy33;
	vec3 dz33 = Pfz.z + _jitter_w3d*oz33;
	
	vec3 d11 = dx11 * dx11 + dy11 * dy11 + dz11 * dz11;
	vec3 d12 = dx12 * dx12 + dy12 * dy12 + dz12 * dz12;
	vec3 d13 = dx13 * dx13 + dy13 * dy13 + dz13 * dz13;
	vec3 d21 = dx21 * dx21 + dy21 * dy21 + dz21 * dz21;
	vec3 d22 = dx22 * dx22 + dy22 * dy22 + dz22 * dz22;
	vec3 d23 = dx23 * dx23 + dy23 * dy23 + dz23 * dz23;
	vec3 d31 = dx31 * dx31 + dy31 * dy31 + dz31 * dz31;
	vec3 d32 = dx32 * dx32 + dy32 * dy32 + dz32 * dz32;
	vec3 d33 = dx33 * dx33 + dy33 * dy33 + dz33 * dz33;

	vec3 d1a = min(d11, d12);
	d12 = max(d11, d12);
	d11 = min(d1a, d13);
	d13 = max(d1a, d13);
	d12 = min(d12, d13);
	vec3 d2a = min(d21, d22);
	d22 = max(d21, d22);
	d21 = min(d2a, d23);
	d23 = max(d2a, d23);
	d22 = min(d22, d23);
	vec3 d3a = min(d31, d32);
	d32 = max(d31, d32);
	d31 = min(d3a, d33);
	d33 = max(d3a, d33);
	d32 = min(d32, d33);
	vec3 da = min(d11, d21);
	d21 = max(d11, d21);
	d11 = min(da, d31);
	d31 = max(da, d31);
	d11.xy = (d11.x < d11.y) ? d11.xy : d11.yx;
	d11.xz = (d11.x < d11.z) ? d11.xz : d11.zx;
	d12 = min(d12, d21);
	d12 = min(d12, d22);
	d12 = min(d12, d31);
	d12 = min(d12, d32);
	d11.yz = min(d11.yz,d12.xy);
	d11.y = min(d11.y,d12.z);
	d11.y = min(d11.y,d11.z);
	return sqrt(d11.xy);
}
float _cellularNoise3DFBM(vec2 _uv_cnfbm, int _oct_cnfbm, vec2 _per_cnfbm, float _lac_cnfbm, float _persist_cnfbm,
		float _rot_cnfbm, float _ampl_cnfbm, vec2 _shift_cnfbm, float _jitter_cnfbm, bool _use_F2_cnfbm, float _time_cnfbm) {
	float _v = 0.0;
	float _a = _ampl_cnfbm;
	mat2 _r0t = mat2(vec2(cos(_rot_cnfbm), sin(_rot_cnfbm)), vec2(-sin(_rot_cnfbm), cos(_rot_cnfbm)));
	for (int i = 0; i < _oct_cnfbm; ++i) {
		vec2 _cell_noiseF12 = _cellular3dNoiseFractalFunc(vec3(_uv_cnfbm * _per_cnfbm, _time_cnfbm), _jitter_cnfbm);
		if (_use_F2_cnfbm) {
			_v += _a * _cell_noiseF12.y;
		} else {
			_v += _a * _cell_noiseF12.x;
		}
		_uv_cnfbm = _r0t * _uv_cnfbm * _lac_cnfbm + _shift_cnfbm;
		_a *= _persist_cnfbm;
	}
	return _v;
}

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:13
	float n_out13p0 = 6.000000;


// Vector3Constant:12
	vec3 n_out12p0 = vec3(2.000000, 2.000000, 0.000000);


// FloatConstant:11
	float n_out11p0 = 2.000000;


// FloatConstant:10
	float n_out10p0 = 0.800000;


// FloatConstant:9
	float n_out9p0 = 0.500000;


// FloatConstant:8
	float n_out8p0 = 0.300000;


// Vector3Constant:7
	vec3 n_out7p0 = vec3(0.500000, 0.500000, 0.000000);


// FloatConstant:6
	float n_out6p0 = 1.000000;


// BooleanConstant:5
	bool n_out5p0 = false;


// Input:4
	float n_out4p0 = TIME;


	float n_out2p0;
// FractalWorleyNoise3D:2
	{
		n_out2p0 = _cellularNoise3DFBM(vec3(n_out3p0, 0.0).xy, int(n_out13p0), n_out12p0.xy, n_out11p0, n_out10p0, n_out9p0, n_out8p0, n_out7p0.xy, n_out6p0, n_out5p0, n_out4p0);
	}


// Output:0
	COLOR.rgb = vec3(n_out2p0);


}
"
graph_offset = Vector2(-189.109, 35.1915)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(600, 200)
nodes/fragment/2/node = SubResource("514")
nodes/fragment/2/position = Vector2(340, 200)
nodes/fragment/3/node = SubResource("515")
nodes/fragment/3/position = Vector2(-60, -20)
nodes/fragment/4/node = SubResource("516")
nodes/fragment/4/position = Vector2(-40, 640)
nodes/fragment/5/node = SubResource("517")
nodes/fragment/5/position = Vector2(60, 560)
nodes/fragment/6/node = SubResource("518")
nodes/fragment/6/position = Vector2(80, 500)
nodes/fragment/7/node = SubResource("519")
nodes/fragment/7/position = Vector2(-80, 420)
nodes/fragment/8/node = SubResource("520")
nodes/fragment/8/position = Vector2(80, 360)
nodes/fragment/9/node = SubResource("521")
nodes/fragment/9/position = Vector2(80, 300)
nodes/fragment/10/node = SubResource("510")
nodes/fragment/10/position = Vector2(80, 240)
nodes/fragment/11/node = SubResource("511")
nodes/fragment/11/position = Vector2(80, 180)
nodes/fragment/12/node = SubResource("512")
nodes/fragment/12/position = Vector2(-60, 100)
nodes/fragment/13/node = SubResource("513")
nodes/fragment/13/position = Vector2(80, 40)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 0, 4, 0, 2, 10, 5, 0, 2, 9, 6, 0, 2, 8, 7, 0, 2, 7, 8, 0, 2, 6, 9, 0, 2, 5, 10, 0, 2, 4, 11, 0, 2, 3, 12, 0, 2, 2, 13, 0, 2, 1, 2, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="523"]
shader = SubResource("522")

[sub_resource type="VisualShaderNodeFloatConstant" id="524"]
constant = 0.6

[sub_resource type="VisualShaderNodeVec3Constant" id="525"]
constant = Vector3(2, 2, 0)

[sub_resource type="VisualShaderNodeVec3Constant" id="526"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShaderNodeInput" id="527"]
input_name = "uv"

[sub_resource type="VisualShaderNodeCustom" id="528"]
default_input_values = [1, 6, 2, Vector3(2, 2, 0), 3, 2, 4, 0.8, 5, 0.5, 6, 0.6, 7, Vector3(0.5, 0.5, 0), 8, 0]
initialized = true
script = ExtResource("84")

[sub_resource type="VisualShaderNodeInput" id="529"]
input_name = "time"

[sub_resource type="VisualShaderNodeFloatConstant" id="530"]
constant = 6.0

[sub_resource type="VisualShaderNodeFloatConstant" id="531"]
constant = 2.0

[sub_resource type="VisualShaderNodeFloatConstant" id="532"]
constant = 0.8

[sub_resource type="VisualShaderNodeFloatConstant" id="533"]
constant = 0.5

[sub_resource type="VisualShader" id="534"]
code = "shader_type canvas_item;
render_mode blend_mix;



// FractalPerlinNoise3D
float _perlin3dNoiseFractalFunc(vec3 P) {
	vec3 Pi0 = floor(P);
	vec3 Pi1 = Pi0 + vec3(1.0);
	Pi0 = Pi0 - floor(Pi0 * (1.0 / 289.0)) * 289.0;
	Pi1 = Pi1 - floor(Pi1 * (1.0 / 289.0)) * 289.0;
	vec3 Pf0 = fract(P);
	vec3 Pf1 = Pf0 - vec3(1.0);
	vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
	vec4 iy = vec4(Pi0.yy, Pi1.yy);
	vec4 iz0 = vec4(Pi0.z);
	vec4 iz1 = vec4(Pi1.z);
	
	vec4 ixy = (((((((ix*34.0)+1.0)*ix)-floor(((ix*34.0)+1.0)*ix*(1.0/289.0))*289.0 + iy)*34.0)+1.0)*
		((((ix*34.0)+1.0)*ix)-floor(((ix*34.0)+1.0)*ix*(1.0/289.0))*289.0 + iy))-
		floor(((((((ix*34.0)+1.0)*ix)-floor(((ix*34.0)+1.0)*ix*(1.0/289.0))*289.0 + iy)*34.0)+1.0)*
		((((ix*34.0)+1.0)*ix)-floor(((ix*34.0)+1.0)*ix*(1.0/289.0))*289.0 + iy)*(1.0/289.0))*289.0;
	vec4 ixy0 = ((((ixy + iz0)*34.0)+1.0)*(ixy + iz0))-floor((((ixy + iz0)*34.0)+1.0)*(ixy + iz0)*(1.0/289.0))*289.0;
	vec4 ixy1 = ((((ixy + iz1)*34.0)+1.0)*(ixy + iz1))-floor((((ixy + iz1)*34.0)+1.0)*(ixy + iz1)*(1.0/289.0))*289.0;
	
	vec4 gx0 = ixy0 * (1.0 / 7.0);
	vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
	gx0 = fract(gx0);
	vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
	vec4 sz0 = step(gz0, vec4(0.0));
	gx0 -= sz0 * (step(0.0, gx0) - 0.5);
	gy0 -= sz0 * (step(0.0, gy0) - 0.5);
	
	vec4 gx1 = ixy1 * (1.0 / 7.0);
	vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
	gx1 = fract(gx1);
	vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
	vec4 sz1 = step(gz1, vec4(0.0));
	gx1 -= sz1 * (step(0.0, gx1) - 0.5);
	gy1 -= sz1 * (step(0.0, gy1) - 0.5);
	
	vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
	vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
	vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
	vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
	vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
	vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
	vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
	vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);
	
	vec4 norm0 = 1.79284291400159 - 0.85373472095314 * vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110));
	g000 *= norm0.x;
	g010 *= norm0.y;
	g100 *= norm0.z;
	g110 *= norm0.w;
	vec4 norm1 = 1.79284291400159 - 0.85373472095314 * vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111));
	g001 *= norm1.x;
	g011 *= norm1.y;
	g101 *= norm1.z;
	g111 *= norm1.w;
	
	float n000 = dot(g000, Pf0);
	float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
	float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
	float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
	float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
	float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
	float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
	float n111 = dot(g111, Pf1);
	
	vec3 fade_xyz = Pf0 * Pf0 * Pf0 * (Pf0 * (Pf0 * 6.0 - 15.0) + 10.0);
	vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
	vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
	float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); 
	return 2.2 * n_xyz;
}
float _perlinNoise3DFBM(vec2 _uv_pn3fbm, int _oct_pn3fbm, vec2 _per_pn3fbm, float _lac_pn3fbm,
		float _persist_pn3fbm, float _rot_pn3fbm, float _ampl_pn3fbm, vec2 _shift_pn3fbm, float _time_pn3fbm) {
	float _v = 0.0;
	float _a = _ampl_pn3fbm;
	mat2 _r0t = mat2(vec2(cos(_rot_pn3fbm), sin(_rot_pn3fbm)), vec2(-sin(_rot_pn3fbm), cos(_rot_pn3fbm)));
	for (int i = 0; i < _oct_pn3fbm; ++i) {
		_v += _a * _perlin3dNoiseFractalFunc(vec3(_uv_pn3fbm * _per_pn3fbm, _time_pn3fbm));
		_uv_pn3fbm = _r0t * _uv_pn3fbm * _lac_pn3fbm + _shift_pn3fbm;
		_a *= _persist_pn3fbm;
	}
	return (min(_v, 1.0) + 1.0) * 0.5;
}

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:6
	float n_out6p0 = 6.000000;


// Vector3Constant:11
	vec3 n_out11p0 = vec3(2.000000, 2.000000, 0.000000);


// FloatConstant:7
	float n_out7p0 = 2.000000;


// FloatConstant:8
	float n_out8p0 = 0.800000;


// FloatConstant:9
	float n_out9p0 = 0.500000;


// FloatConstant:10
	float n_out10p0 = 0.600000;


// Vector3Constant:12
	vec3 n_out12p0 = vec3(0.500000, 0.500000, 0.000000);


// Input:5
	float n_out5p0 = TIME;


	float n_out4p0;
// FractalPerlinNoise3D:4
	{
		n_out4p0 = _perlinNoise3DFBM(vec3(n_out3p0, 0.0).xy, int(n_out6p0), n_out11p0.xy, n_out7p0, n_out8p0, n_out9p0, n_out10p0, n_out12p0.xy, n_out5p0);
	}


// Output:0
	COLOR.rgb = vec3(n_out4p0);


}
"
graph_offset = Vector2(-325.64, -4.4259)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 200)
nodes/fragment/3/node = SubResource("527")
nodes/fragment/3/position = Vector2(-260, 0)
nodes/fragment/4/node = SubResource("528")
nodes/fragment/4/position = Vector2(160, 200)
nodes/fragment/5/node = SubResource("529")
nodes/fragment/5/position = Vector2(-260, 520)
nodes/fragment/6/node = SubResource("530")
nodes/fragment/6/position = Vector2(-120, 60)
nodes/fragment/7/node = SubResource("531")
nodes/fragment/7/position = Vector2(-120, 200)
nodes/fragment/8/node = SubResource("532")
nodes/fragment/8/position = Vector2(-120, 260)
nodes/fragment/9/node = SubResource("533")
nodes/fragment/9/position = Vector2(-120, 320)
nodes/fragment/10/node = SubResource("524")
nodes/fragment/10/position = Vector2(-120, 380)
nodes/fragment/11/node = SubResource("525")
nodes/fragment/11/position = Vector2(-260, 120)
nodes/fragment/12/node = SubResource("526")
nodes/fragment/12/position = Vector2(-280, 440)
nodes/fragment/connections = PackedInt32Array(3, 0, 4, 0, 6, 0, 4, 1, 7, 0, 4, 3, 8, 0, 4, 4, 9, 0, 4, 5, 10, 0, 4, 6, 11, 0, 4, 2, 12, 0, 4, 7, 5, 0, 4, 8, 4, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="535"]
shader = SubResource("534")

[sub_resource type="VisualShaderNodeFloatConstant" id="536"]
constant = 0.5

[sub_resource type="VisualShaderNodeFloatConstant" id="537"]
constant = 0.6

[sub_resource type="VisualShaderNodeCustom" id="538"]
default_input_values = [1, 6, 2, Vector3(2, 2, 0), 3, 2, 4, 0.8, 5, 0.5, 6, 0.6, 7, Vector3(0.5, 0.5, 0), 8, 0]
initialized = true
script = ExtResource("85")

[sub_resource type="VisualShaderNodeInput" id="539"]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id="540"]
input_name = "time"

[sub_resource type="VisualShaderNodeFloatConstant" id="541"]
constant = 6.0

[sub_resource type="VisualShaderNodeVec3Constant" id="542"]
constant = Vector3(2, 2, 0)

[sub_resource type="VisualShaderNodeVec3Constant" id="543"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShaderNodeFloatConstant" id="544"]
constant = 2.0

[sub_resource type="VisualShaderNodeFloatConstant" id="545"]
constant = 0.8

[sub_resource type="VisualShader" id="546"]
code = "shader_type canvas_item;
render_mode blend_mix;



// FractalSimplexNoise3D
vec4 _permute_simplex3_noise_fractal(vec4 x) {
	return ((x * 34.0) + 1.0) * x - floor(((x * 34.0) + 1.0) * x * (1.0 / 289.0)) * 289.0;
}
float _simplex3dNoiseFractalFunc(vec3 v) { 
	vec2 C = vec2(1.0/6.0, 1.0/3.0) ;
	vec4 D = vec4(0.0, 0.5, 1.0, 2.0);
	
	vec3 i  = floor(v + dot(v, vec3(C.y)));
	vec3 x0 = v - i + dot(i, vec3(C.x)) ;
	
	vec3 g = step(x0.yzx, x0.xyz);
	vec3 l = 1.0 - g;
	vec3 i1 = min( g.xyz, l.zxy );
	vec3 i2 = max( g.xyz, l.zxy );
	
	vec3 x1 = x0 - i1 + vec3(C.x);
	vec3 x2 = x0 - i2 + vec3(C.y);
	vec3 x3 = x0 - D.yyy;
	
	i = i - floor(i * (1.0 / 289.0)) * 289.0;
	vec4 p = _permute_simplex3_noise_fractal(_permute_simplex3_noise_fractal(_permute_simplex3_noise_fractal(
	 		i.z + vec4(0.0, i1.z, i2.z, 1.0))
		+   i.y + vec4(0.0, i1.y, i2.y, 1.0))
		+   i.x + vec4(0.0, i1.x, i2.x, 1.0));
	
	float n_ = 0.142857142857;
	vec3  ns = n_ * D.wyz - D.xzx;
	
	vec4 j = p - 49.0 * floor(p * ns.z * ns.z);
	
	vec4 x_ = floor(j * ns.z);
	vec4 y_ = floor(j - 7.0 * x_ );
	
	vec4 x = x_ *ns.x + vec4(ns.y);
	vec4 y = y_ *ns.x + vec4(ns.y);
	vec4 h = 1.0 - abs(x) - abs(y);
	
	vec4 b0 = vec4( x.xy, y.xy );
	vec4 b1 = vec4( x.zw, y.zw );
	
	vec4 s0 = floor(b0)*2.0 + 1.0;
	vec4 s1 = floor(b1)*2.0 + 1.0;
	vec4 sh = -step(h, vec4(0.0));
	
	vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
	vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;
	
	vec3 p0 = vec3(a0.xy,h.x);
	vec3 p1 = vec3(a0.zw,h.y);
	vec3 p2 = vec3(a1.xy,h.z);
	vec3 p3 = vec3(a1.zw,h.w);
	
	vec4 norm = 2.79284291400159 - 0.85373472095314 * vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3));
	p0 *= norm.x;
	p1 *= norm.y;
	p2 *= norm.z;
	p3 *= norm.w;
	
	vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), vec4(0.0));
	m = m * m;
	return 22.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );
}
float _simplexNoise3DFBM(vec2 _uv_sn3fbm, int _oct_sn3fbm, vec2 _per_sn3fbm, float _lac_sn3fbm,
		float _persist_sn3fbm, float _rot_sn3fbm, float _ampl_sn3fbm, vec2 _shift_sn3fbm, float _time_sn3fbm) {
	float _v = 0.0;
	float _a = _ampl_sn3fbm;
	mat2 _r0t = mat2(vec2(cos(_rot_sn3fbm), sin(_rot_sn3fbm)), vec2(-sin(_rot_sn3fbm), cos(_rot_sn3fbm)));
	for (int i = 0; i < _oct_sn3fbm; ++i) {
		_v += _a * _simplex3dNoiseFractalFunc(vec3(_uv_sn3fbm * _per_sn3fbm, _time_sn3fbm));
		_uv_sn3fbm = _r0t * _uv_sn3fbm * _lac_sn3fbm + _shift_sn3fbm;
		_a *= _persist_sn3fbm;
	}
	return (min(_v, 1.0) + 1.0) * 0.5;
}

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:5
	float n_out5p0 = 6.000000;


// Vector3Constant:6
	vec3 n_out6p0 = vec3(2.000000, 2.000000, 0.000000);


// FloatConstant:8
	float n_out8p0 = 2.000000;


// FloatConstant:9
	float n_out9p0 = 0.800000;


// FloatConstant:10
	float n_out10p0 = 0.500000;


// FloatConstant:11
	float n_out11p0 = 0.600000;


// Vector3Constant:7
	vec3 n_out7p0 = vec3(0.500000, 0.500000, 0.000000);


// Input:4
	float n_out4p0 = TIME;


	float n_out2p0;
// FractalSimplexNoise3D:2
	{
		n_out2p0 = _simplexNoise3DFBM(vec3(n_out3p0, 0.0).xy, int(n_out5p0), n_out6p0.xy, n_out8p0, n_out9p0, n_out10p0, n_out11p0, n_out7p0.xy, n_out4p0);
	}


// Output:0
	COLOR.rgb = vec3(n_out2p0);


}
"
graph_offset = Vector2(-346.405, 163.275)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(400, 200)
nodes/fragment/2/node = SubResource("538")
nodes/fragment/2/position = Vector2(140, 200)
nodes/fragment/3/node = SubResource("539")
nodes/fragment/3/position = Vector2(-260, 0)
nodes/fragment/4/node = SubResource("540")
nodes/fragment/4/position = Vector2(-240, 520)
nodes/fragment/5/node = SubResource("541")
nodes/fragment/5/position = Vector2(-120, 60)
nodes/fragment/6/node = SubResource("542")
nodes/fragment/6/position = Vector2(-260, 120)
nodes/fragment/7/node = SubResource("543")
nodes/fragment/7/position = Vector2(-260, 440)
nodes/fragment/8/node = SubResource("544")
nodes/fragment/8/position = Vector2(-120, 200)
nodes/fragment/9/node = SubResource("545")
nodes/fragment/9/position = Vector2(-120, 260)
nodes/fragment/10/node = SubResource("536")
nodes/fragment/10/position = Vector2(-120, 320)
nodes/fragment/11/node = SubResource("537")
nodes/fragment/11/position = Vector2(-120, 380)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 0, 5, 0, 2, 1, 6, 0, 2, 2, 4, 0, 2, 8, 7, 0, 2, 7, 8, 0, 2, 3, 9, 0, 2, 4, 10, 0, 2, 5, 11, 0, 2, 6, 2, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="547"]
shader = SubResource("546")

[sub_resource type="VisualShaderNodeFloatConstant" id="548"]
constant = 0.6

[sub_resource type="VisualShaderNodeVec3Constant" id="549"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShaderNodeFloatConstant" id="550"]
constant = 1.0

[sub_resource type="VisualShaderNodeCustom" id="551"]
default_input_values = [1, 6, 2, Vector3(2, 2, 0), 3, 2, 4, 0.8, 5, 0.5, 6, 0.6, 7, Vector3(0.5, 0.5, 0), 8, 0, 9, 0]
initialized = true
script = ExtResource("86")

[sub_resource type="VisualShaderNodeInput" id="552"]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id="553"]
input_name = "time"

[sub_resource type="VisualShaderNodeFloatConstant" id="554"]
constant = 6.0

[sub_resource type="VisualShaderNodeFloatConstant" id="555"]
constant = 2.0

[sub_resource type="VisualShaderNodeFloatConstant" id="556"]
constant = 0.8

[sub_resource type="VisualShaderNodeFloatConstant" id="557"]
constant = 0.5

[sub_resource type="VisualShaderNodeVec3Constant" id="558"]
constant = Vector3(2, 2, 0)

[sub_resource type="VisualShader" id="559"]
code = "shader_type canvas_item;
render_mode blend_mix;



// FractalPerlinNoise4D
vec4 _permute_perlin4d_noise_fractal_func(vec4 x) {
	return ((x*34.0)+1.0)*x - floor(((x*34.0)+1.0)*x * (1.0 / 289.0)) * 289.0;
}
float _perlin4dNoiseFractalFunc(vec4 P) {
	vec4 Pi0 = floor(P);
	vec4 Pi1 = Pi0 + 1.0;
	Pi0 = Pi0 - floor(Pi0 * (1.0 / 289.0)) * 289.0;
	Pi1 = Pi1 - floor(Pi1 * (1.0 / 289.0)) * 289.0;
	vec4 Pf0 = fract(P);
	vec4 Pf1 = Pf0 - 1.0;
	vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
	vec4 iy = vec4(Pi0.yy, Pi1.yy);
	vec4 iz0 = vec4(Pi0.zzzz);
	vec4 iz1 = vec4(Pi1.zzzz);
	vec4 iw0 = vec4(Pi0.wwww);
	vec4 iw1 = vec4(Pi1.wwww);
	
	vec4 ixy = _permute_perlin4d_noise_fractal_func(_permute_perlin4d_noise_fractal_func(ix) + iy);
	vec4 ixy0 = _permute_perlin4d_noise_fractal_func(ixy + iz0);
	vec4 ixy1 = _permute_perlin4d_noise_fractal_func(ixy + iz1);
	vec4 ixy00 = _permute_perlin4d_noise_fractal_func(ixy0 + iw0);
	vec4 ixy01 = _permute_perlin4d_noise_fractal_func(ixy0 + iw1);
	vec4 ixy10 = _permute_perlin4d_noise_fractal_func(ixy1 + iw0);
	vec4 ixy11 = _permute_perlin4d_noise_fractal_func(ixy1 + iw1);
	
	vec4 gx00 = ixy00 * (1.0 / 7.0);
	vec4 gy00 = floor(gx00) * (1.0 / 7.0);
	vec4 gz00 = floor(gy00) * (1.0 / 6.0);
	gx00 = fract(gx00) - 0.5;
	gy00 = fract(gy00) - 0.5;
	gz00 = fract(gz00) - 0.5;
	vec4 gw00 = vec4(0.75) - abs(gx00) - abs(gy00) - abs(gz00);
	vec4 sw00 = step(gw00, vec4(0.0));
	gx00 -= sw00 * (step(0.0, gx00) - 0.5);
	gy00 -= sw00 * (step(0.0, gy00) - 0.5);
	
	vec4 gx01 = ixy01 * (1.0 / 7.0);
	vec4 gy01 = floor(gx01) * (1.0 / 7.0);
	vec4 gz01 = floor(gy01) * (1.0 / 6.0);
	gx01 = fract(gx01) - 0.5;
	gy01 = fract(gy01) - 0.5;
	gz01 = fract(gz01) - 0.5;
	vec4 gw01 = vec4(0.75) - abs(gx01) - abs(gy01) - abs(gz01);
	vec4 sw01 = step(gw01, vec4(0.0));
	gx01 -= sw01 * (step(0.0, gx01) - 0.5);
	gy01 -= sw01 * (step(0.0, gy01) - 0.5);
	
	vec4 gx10 = ixy10 * (1.0 / 7.0);
	vec4 gy10 = floor(gx10) * (1.0 / 7.0);
	vec4 gz10 = floor(gy10) * (1.0 / 6.0);
	gx10 = fract(gx10) - 0.5;
	gy10 = fract(gy10) - 0.5;
	gz10 = fract(gz10) - 0.5;
	vec4 gw10 = vec4(0.75) - abs(gx10) - abs(gy10) - abs(gz10);
	vec4 sw10 = step(gw10, vec4(0.0));
	gx10 -= sw10 * (step(0.0, gx10) - 0.5);
	gy10 -= sw10 * (step(0.0, gy10) - 0.5);
	
	vec4 gx11 = ixy11 * (1.0 / 7.0);
	vec4 gy11 = floor(gx11) * (1.0 / 7.0);
	vec4 gz11 = floor(gy11) * (1.0 / 6.0);
	gx11 = fract(gx11) - 0.5;
	gy11 = fract(gy11) - 0.5;
	gz11 = fract(gz11) - 0.5;
	vec4 gw11 = vec4(0.75) - abs(gx11) - abs(gy11) - abs(gz11);
	vec4 sw11 = step(gw11, vec4(0.0));
	gx11 -= sw11 * (step(0.0, gx11) - 0.5);
	gy11 -= sw11 * (step(0.0, gy11) - 0.5);
	
	vec4 g0000 = vec4(gx00.x,gy00.x,gz00.x,gw00.x);
	vec4 g1000 = vec4(gx00.y,gy00.y,gz00.y,gw00.y);
	vec4 g0100 = vec4(gx00.z,gy00.z,gz00.z,gw00.z);
	vec4 g1100 = vec4(gx00.w,gy00.w,gz00.w,gw00.w);
	vec4 g0010 = vec4(gx10.x,gy10.x,gz10.x,gw10.x);
	vec4 g1010 = vec4(gx10.y,gy10.y,gz10.y,gw10.y);
	vec4 g0110 = vec4(gx10.z,gy10.z,gz10.z,gw10.z);
	vec4 g1110 = vec4(gx10.w,gy10.w,gz10.w,gw10.w);
	vec4 g0001 = vec4(gx01.x,gy01.x,gz01.x,gw01.x);
	vec4 g1001 = vec4(gx01.y,gy01.y,gz01.y,gw01.y);
	vec4 g0101 = vec4(gx01.z,gy01.z,gz01.z,gw01.z);
	vec4 g1101 = vec4(gx01.w,gy01.w,gz01.w,gw01.w);
	vec4 g0011 = vec4(gx11.x,gy11.x,gz11.x,gw11.x);
	vec4 g1011 = vec4(gx11.y,gy11.y,gz11.y,gw11.y);
	vec4 g0111 = vec4(gx11.z,gy11.z,gz11.z,gw11.z);
	vec4 g1111 = vec4(gx11.w,gy11.w,gz11.w,gw11.w);
	
	vec4 norm00 = 1.79284291400159 - 0.85373472095314 * vec4(dot(g0000, g0000), dot(g0100, g0100), dot(g1000, g1000), dot(g1100, g1100));
	g0000 *= norm00.x;
	g0100 *= norm00.y;
	g1000 *= norm00.z;
	g1100 *= norm00.w;
	
	vec4 norm01 = 1.79284291400159 - 0.85373472095314 * vec4(dot(g0001, g0001), dot(g0101, g0101), dot(g1001, g1001), dot(g1101, g1101));
	g0001 *= norm01.x;
	g0101 *= norm01.y;
	g1001 *= norm01.z;
	g1101 *= norm01.w;
	
	vec4 norm10 = 1.79284291400159 - 0.85373472095314 * vec4(dot(g0010, g0010), dot(g0110, g0110), dot(g1010, g1010), dot(g1110, g1110));
	g0010 *= norm10.x;
	g0110 *= norm10.y;
	g1010 *= norm10.z;
	g1110 *= norm10.w;
	
	vec4 norm11 = 1.79284291400159 - 0.85373472095314 * vec4(dot(g0011, g0011), dot(g0111, g0111), dot(g1011, g1011), dot(g1111, g1111));
	g0011 *= norm11.x;
	g0111 *= norm11.y;
	g1011 *= norm11.z;
	g1111 *= norm11.w;
	
	float n0000 = dot(g0000, Pf0);
	float n1000 = dot(g1000, vec4(Pf1.x, Pf0.yzw));
	float n0100 = dot(g0100, vec4(Pf0.x, Pf1.y, Pf0.zw));
	float n1100 = dot(g1100, vec4(Pf1.xy, Pf0.zw));
	float n0010 = dot(g0010, vec4(Pf0.xy, Pf1.z, Pf0.w));
	float n1010 = dot(g1010, vec4(Pf1.x, Pf0.y, Pf1.z, Pf0.w));
	float n0110 = dot(g0110, vec4(Pf0.x, Pf1.yz, Pf0.w));
	float n1110 = dot(g1110, vec4(Pf1.xyz, Pf0.w));
	float n0001 = dot(g0001, vec4(Pf0.xyz, Pf1.w));
	float n1001 = dot(g1001, vec4(Pf1.x, Pf0.yz, Pf1.w));
	float n0101 = dot(g0101, vec4(Pf0.x, Pf1.y, Pf0.z, Pf1.w));
	float n1101 = dot(g1101, vec4(Pf1.xy, Pf0.z, Pf1.w));
	float n0011 = dot(g0011, vec4(Pf0.xy, Pf1.zw));
	float n1011 = dot(g1011, vec4(Pf1.x, Pf0.y, Pf1.zw));
	float n0111 = dot(g0111, vec4(Pf0.x, Pf1.yzw));
	float n1111 = dot(g1111, Pf1);
	
	vec4 fade_xyzw = Pf0 * Pf0 * Pf0 * (Pf0 * (Pf0 * 6.0 - 15.0) + 10.0);
	vec4 n_0w = mix(vec4(n0000, n1000, n0100, n1100), vec4(n0001, n1001, n0101, n1101), fade_xyzw.w);
	vec4 n_1w = mix(vec4(n0010, n1010, n0110, n1110), vec4(n0011, n1011, n0111, n1111), fade_xyzw.w);
	vec4 n_zw = mix(n_0w, n_1w, fade_xyzw.z);
	vec2 n_yzw = mix(n_zw.xy, n_zw.zw, fade_xyzw.y);
	float n_xyzw = mix(n_yzw.x, n_yzw.y, fade_xyzw.x);
	return 2.2 * n_xyzw;
}
float _perlinNoise4DFBM(vec2 _uv_pn4fbm, int _oct_pn4fbm, vec2 _per_pn4fbm, float _lac_pn4fbm, float _persist_pn4fbm,
				float _rot_pn4fbm, float _ampl_pn4fbm, vec2 _shift_pn4fbm, float _time_pn4fbm, float _z_pn4fbm) {
	float _v = 0.0;
	float _a = _ampl_pn4fbm;
	mat2 _r0t = mat2(vec2(cos(_rot_pn4fbm), sin(_rot_pn4fbm)), vec2(-sin(_rot_pn4fbm), cos(_rot_pn4fbm)));
	for (int i = 0; i < _oct_pn4fbm; ++i) {
		_v += _a * _perlin4dNoiseFractalFunc(vec4(_uv_pn4fbm * _per_pn4fbm, _time_pn4fbm, _z_pn4fbm));
		_uv_pn4fbm = _r0t * _uv_pn4fbm * _lac_pn4fbm + _shift_pn4fbm;
		_a *= _persist_pn4fbm;
	}
	return (min(_v, 1.0) + 1.0) * 0.5;
}

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:5
	float n_out5p0 = 6.000000;


// Vector3Constant:9
	vec3 n_out9p0 = vec3(2.000000, 2.000000, 0.000000);


// FloatConstant:6
	float n_out6p0 = 2.000000;


// FloatConstant:7
	float n_out7p0 = 0.800000;


// FloatConstant:8
	float n_out8p0 = 0.500000;


// FloatConstant:10
	float n_out10p0 = 0.600000;


// Vector3Constant:11
	vec3 n_out11p0 = vec3(0.500000, 0.500000, 0.000000);


// FloatConstant:12
	float n_out12p0 = 1.000000;


// Input:4
	float n_out4p0 = TIME;


	float n_out2p0;
// FractalPerlinNoise4D:2
	{
		n_out2p0 = _perlinNoise4DFBM(vec3(n_out3p0, 0.0).xy, int(n_out5p0), n_out9p0.xy, n_out6p0, n_out7p0, n_out8p0, n_out10p0, n_out11p0.xy, n_out4p0, n_out12p0);
	}


// Output:0
	COLOR.rgb = vec3(n_out2p0);


}
"
graph_offset = Vector2(-371.857, 241.222)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(460, 200)
nodes/fragment/2/node = SubResource("551")
nodes/fragment/2/position = Vector2(200, 200)
nodes/fragment/3/node = SubResource("552")
nodes/fragment/3/position = Vector2(-200, -20)
nodes/fragment/4/node = SubResource("553")
nodes/fragment/4/position = Vector2(-180, 580)
nodes/fragment/5/node = SubResource("554")
nodes/fragment/5/position = Vector2(-60, 60)
nodes/fragment/6/node = SubResource("555")
nodes/fragment/6/position = Vector2(-60, 200)
nodes/fragment/7/node = SubResource("556")
nodes/fragment/7/position = Vector2(-60, 260)
nodes/fragment/8/node = SubResource("557")
nodes/fragment/8/position = Vector2(-60, 320)
nodes/fragment/9/node = SubResource("558")
nodes/fragment/9/position = Vector2(-200, 120)
nodes/fragment/10/node = SubResource("548")
nodes/fragment/10/position = Vector2(-60, 380)
nodes/fragment/11/node = SubResource("549")
nodes/fragment/11/position = Vector2(-200, 440)
nodes/fragment/12/node = SubResource("550")
nodes/fragment/12/position = Vector2(-60, 520)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 0, 4, 0, 2, 9, 5, 0, 2, 1, 9, 0, 2, 2, 6, 0, 2, 3, 7, 0, 2, 4, 8, 0, 2, 5, 10, 0, 2, 6, 11, 0, 2, 7, 12, 0, 2, 8, 2, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="560"]
shader = SubResource("559")

[sub_resource type="VisualShaderNodeFloatConstant" id="561"]
constant = 0.5

[sub_resource type="VisualShaderNodeFloatConstant" id="562"]
constant = 0.6

[sub_resource type="VisualShaderNodeFloatConstant" id="563"]
constant = 1.0

[sub_resource type="VisualShaderNodeCustom" id="564"]
default_input_values = [1, 6, 2, Vector3(2, 2, 0), 3, 2, 4, 0.8, 5, 0.5, 6, 0.6, 7, Vector3(0.5, 0.5, 0), 8, 0, 9, 0]
initialized = true
script = ExtResource("87")

[sub_resource type="VisualShaderNodeInput" id="565"]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id="566"]
input_name = "time"

[sub_resource type="VisualShaderNodeFloatConstant" id="567"]
constant = 6.0

[sub_resource type="VisualShaderNodeVec3Constant" id="568"]
constant = Vector3(2, 2, 0)

[sub_resource type="VisualShaderNodeFloatConstant" id="569"]
constant = 2.0

[sub_resource type="VisualShaderNodeFloatConstant" id="570"]
constant = 0.8

[sub_resource type="VisualShaderNodeVec3Constant" id="571"]
constant = Vector3(0.5, 0.5, 0)

[sub_resource type="VisualShader" id="572"]
code = "shader_type canvas_item;
render_mode blend_mix;



// FractalSimplexNoise4D
vec4 _permute_4_s4_noise_fractal(vec4 x) {
	return ((x * 34.0) + 1.0) * x - floor(((x * 34.0) + 1.0) * x * (1.0 / 289.0)) * 289.0;
}
float _permute_s4_noise_fractal(float x) {
	return ((x * 34.0) + 1.0) * x - floor(((x * 34.0) + 1.0) * x * (1.0 / 289.0)) * 289.0;
}
vec4 _grad4_s4_noise_fractal(float j, vec4 ip) {
	vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);
	vec4 p, s;
	p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;
	p.w = 1.5 - dot(abs(p.xyz), ones.xyz);
	s = vec4(lessThan(p, vec4(0.0)));
	p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www; 
	return p;
}
float _simplex4dNoiseFractalFunc(vec4 v) {
	vec4 C = vec4( 0.138196601125011,
				0.276393202250021,
				0.414589803375032,
				-0.447213595499958);
	
	vec4 i  = floor(v + dot(v, vec4(0.309016994374947451)) );
	vec4 x0 = v -   i + dot(i, C.xxxx);
	
	vec4 i0;
	vec3 isX = step( x0.yzw, x0.xxx );
	vec3 isYZ = step( x0.zww, x0.yyz );
	i0.x = isX.x + isX.y + isX.z;
	i0.yzw = 1.0 - isX;
	i0.y += isYZ.x + isYZ.y;
	i0.zw += 1.0 - isYZ.xy;
	i0.z += isYZ.z;
	i0.w += 1.0 - isYZ.z;
	
	vec4 i3 = clamp( i0, 0.0, 1.0 );
	vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );
	vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );
	
	vec4 x1 = x0 - i1 + C.xxxx;
	vec4 x2 = x0 - i2 + C.yyyy;
	vec4 x3 = x0 - i3 + C.zzzz;
	vec4 x4 = x0 + C.wwww;
	
	i = i - floor(i * (1.0 / 289.0)) * 289.0;
	float j0 = _permute_s4_noise_fractal( _permute_s4_noise_fractal( _permute_s4_noise_fractal( _permute_s4_noise_fractal(i.w) + i.z) + i.y) + i.x);
	vec4 j1 = _permute_4_s4_noise_fractal( _permute_4_s4_noise_fractal( _permute_4_s4_noise_fractal( _permute_4_s4_noise_fractal (
				i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))
				+ i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))
				+ i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))
				+ i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));
	
	vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;
	
	vec4 p0 = _grad4_s4_noise_fractal(j0,   ip);
	vec4 p1 = _grad4_s4_noise_fractal(j1.x, ip);
	vec4 p2 = _grad4_s4_noise_fractal(j1.y, ip);
	vec4 p3 = _grad4_s4_noise_fractal(j1.z, ip);
	vec4 p4 = _grad4_s4_noise_fractal(j1.w, ip);
	
	vec4 norm = 2.79284291400159 - 1.85373472095314 * vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3));
	p0 *= norm.x;
	p1 *= norm.y;
	p2 *= norm.z;
	p3 *= norm.w;
	p4 *= 2.79284291400159 - 1.85373472095314 * dot(p4,p4);
	
	vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), vec3(0.0));
	vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)), vec2(0.0));
	m0 = m0 * m0;
	m1 = m1 * m1;
	return 33.0 *(dot(m0*m0, vec3(dot(p0, x0), dot(p1, x1), dot(p2, x2)))
				+ dot(m1*m1, vec2(dot(p3, x3), dot(p4, x4))));
}
float _simplexNoise4DFBM(vec2 _uv_sn4fbm, int _oct_sn4fbm, vec2 _per_sn4fbm, float _lac_sn4fbm, float _persist_sn4fbm,
				float _rot_sn4fbm, float _ampl_sn4fbm, vec2 _shift_sn4fbm, float _time_sn4fbm, float _z_sn4fbm) {
	float _v = 0.0;
	float _a = _ampl_sn4fbm;
	mat2 _r0t = mat2(vec2(cos(_rot_sn4fbm), sin(_rot_sn4fbm)), vec2(-sin(_rot_sn4fbm), cos(_rot_sn4fbm)));
	for (int i = 0; i < _oct_sn4fbm; ++i) {
		_v += _a * _simplex4dNoiseFractalFunc(vec4(_uv_sn4fbm * _per_sn4fbm, _time_sn4fbm, _z_sn4fbm));
		_uv_sn4fbm = _r0t * _uv_sn4fbm * _lac_sn4fbm + _shift_sn4fbm;
		_a *= _persist_sn4fbm;
	}
	return (min(_v, 1.0) + 1.0) * 0.5;
}

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:5
	float n_out5p0 = 6.000000;


// Vector3Constant:6
	vec3 n_out6p0 = vec3(2.000000, 2.000000, 0.000000);


// FloatConstant:7
	float n_out7p0 = 2.000000;


// FloatConstant:8
	float n_out8p0 = 0.800000;


// FloatConstant:10
	float n_out10p0 = 0.500000;


// FloatConstant:11
	float n_out11p0 = 0.600000;


// Vector3Constant:9
	vec3 n_out9p0 = vec3(0.500000, 0.500000, 0.000000);


// FloatConstant:12
	float n_out12p0 = 1.000000;


// Input:4
	float n_out4p0 = TIME;


	float n_out2p0;
// FractalSimplexNoise4D:2
	{
		n_out2p0 = _simplexNoise4DFBM(vec3(n_out3p0, 0.0).xy, int(n_out5p0), n_out6p0.xy, n_out7p0, n_out8p0, n_out10p0, n_out11p0, n_out9p0.xy, n_out4p0, n_out12p0);
	}


// Output:0
	COLOR.rgb = vec3(n_out2p0);


}
"
graph_offset = Vector2(-245.436, 47.5641)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(480, 200)
nodes/fragment/2/node = SubResource("564")
nodes/fragment/2/position = Vector2(200, 200)
nodes/fragment/3/node = SubResource("565")
nodes/fragment/3/position = Vector2(-180, 0)
nodes/fragment/4/node = SubResource("566")
nodes/fragment/4/position = Vector2(-160, 580)
nodes/fragment/5/node = SubResource("567")
nodes/fragment/5/position = Vector2(-40, 60)
nodes/fragment/6/node = SubResource("568")
nodes/fragment/6/position = Vector2(-180, 120)
nodes/fragment/7/node = SubResource("569")
nodes/fragment/7/position = Vector2(-40, 200)
nodes/fragment/8/node = SubResource("570")
nodes/fragment/8/position = Vector2(-40, 260)
nodes/fragment/9/node = SubResource("571")
nodes/fragment/9/position = Vector2(-200, 440)
nodes/fragment/10/node = SubResource("561")
nodes/fragment/10/position = Vector2(-40, 320)
nodes/fragment/11/node = SubResource("562")
nodes/fragment/11/position = Vector2(-40, 380)
nodes/fragment/12/node = SubResource("563")
nodes/fragment/12/position = Vector2(-40, 520)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 0, 4, 0, 2, 9, 7, 0, 2, 3, 5, 0, 2, 1, 6, 0, 2, 2, 8, 0, 2, 4, 10, 0, 2, 5, 11, 0, 2, 6, 9, 0, 2, 7, 12, 0, 2, 8, 2, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="573"]
shader = SubResource("572")

[sub_resource type="VisualShaderNodeCustom" id="574"]
default_input_values = [2, Vector3(64, 64, 0), 3, 10, 4, false, 5, false, 6, false]
initialized = true
script = ExtResource("88")

[sub_resource type="VisualShaderNodeInput" id="575"]
input_name = "texture"

[sub_resource type="VisualShaderNodeInput" id="576"]
input_name = "uv"

[sub_resource type="VisualShaderNodeVec3Constant" id="577"]
constant = Vector3(68, 68, 0)

[sub_resource type="VisualShaderNodeFloatConstant" id="578"]
constant = 10.0

[sub_resource type="VisualShaderNodeBooleanConstant" id="579"]

[sub_resource type="VisualShaderNodeBooleanConstant" id="580"]

[sub_resource type="VisualShaderNodeBooleanConstant" id="581"]

[sub_resource type="VisualShader" id="582"]
code = "shader_type canvas_item;
render_mode blend_mix;



// NormalFromHeightmap
vec3 _normalFromHeightmapFunc(vec2 _hm_uv, sampler2D _hm_tex, vec2 _hm_size, float _norm_hm_strgth, bool _conv_hm_gray, bool _inv_x_norm, bool _inv_y_norm){
	vec3 _hm_down = textureLod(_hm_tex, _hm_uv + vec2(0.0, 1.0 / _hm_size.y), 0.0).rgb;
	vec3 _hm_up = textureLod(_hm_tex, _hm_uv - vec2(0.0, 1.0 / _hm_size.y), 0.0).rgb;
	vec3 _hm_right = textureLod(_hm_tex, _hm_uv + vec2(1.0 / _hm_size.x, 0.0), 0.0).rgb;
	vec3 _hm_left = textureLod(_hm_tex, _hm_uv - vec2(1.0 / _hm_size.x, 0.0), 0.0).rgb;
	
	if (_conv_hm_gray) {
		_hm_down.r = 0.2126 * _hm_down.r + 0.7152 * _hm_down.g + 0.0722 * _hm_down.b;
		_hm_up.r = 0.2126 * _hm_up.r + 0.7152 * _hm_up.g + 0.0722 * _hm_up.b;
		_hm_right.r = 0.2126 * _hm_right.r + 0.7152 * _hm_right.g + 0.0722 * _hm_right.b;
		_hm_left.r = 0.2126 * _hm_left.r + 0.7152 * _hm_left.g + 0.0722 * _hm_left.b;
	}
	
	float dx = (1.0 - float(_inv_x_norm)) * (_hm_left.r - _hm_right.r) + 
				(float(_inv_x_norm)) * (-_hm_left.r + _hm_right.r);
	float dy = (1.0 - float(_inv_y_norm)) * (_hm_up.r - _hm_down.r) + 
				(float(_inv_y_norm)) * (-_hm_up.r + _hm_down.r);
	
	return normalize(vec3(dx, dy, 1.0 / _norm_hm_strgth));
}

void fragment() {
// Input:4
	vec2 n_out4p0 = UV;


// Vector3Constant:5
	vec3 n_out5p0 = vec3(68.000000, 68.000000, 0.000000);


// FloatConstant:6
	float n_out6p0 = 10.000000;


// BooleanConstant:7
	bool n_out7p0 = false;


// BooleanConstant:8
	bool n_out8p0 = false;


// BooleanConstant:9
	bool n_out9p0 = false;


	vec3 n_out2p0;
// NormalFromHeightmap:2
	{
		n_out2p0 = _normalFromHeightmapFunc(vec3(n_out4p0, 0.0).xy, TEXTURE, n_out5p0.xy, n_out6p0, n_out7p0, n_out8p0, n_out9p0);
	}


// Output:0
	COLOR.rgb = n_out2p0;


}
"
graph_offset = Vector2(-300.192, -48.4031)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 200)
nodes/fragment/2/node = SubResource("574")
nodes/fragment/2/position = Vector2(80, 200)
nodes/fragment/3/node = SubResource("575")
nodes/fragment/3/position = Vector2(-260, 40)
nodes/fragment/4/node = SubResource("576")
nodes/fragment/4/position = Vector2(-300, 120)
nodes/fragment/5/node = SubResource("577")
nodes/fragment/5/position = Vector2(-300, 180)
nodes/fragment/6/node = SubResource("578")
nodes/fragment/6/position = Vector2(-160, 260)
nodes/fragment/7/node = SubResource("579")
nodes/fragment/7/position = Vector2(-180, 320)
nodes/fragment/8/node = SubResource("580")
nodes/fragment/8/position = Vector2(-180, 380)
nodes/fragment/9/node = SubResource("581")
nodes/fragment/9/position = Vector2(-180, 440)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 0, 4, 0, 2, 1, 5, 0, 2, 2, 6, 0, 2, 3, 7, 0, 2, 4, 8, 0, 2, 5, 9, 0, 2, 6, 2, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="583"]
shader = SubResource("582")

[sub_resource type="VisualShaderNodeCustom" id="584"]
output_port_for_preview = 0
default_input_values = [0, Vector3(1, 1, 0)]
initialized = true
script = ExtResource("89")

[sub_resource type="VisualShaderNodeCustom" id="585"]
output_port_for_preview = 0
default_input_values = [0, Vector3(1, 1, 1)]
initialized = true
script = ExtResource("91")

[sub_resource type="VisualShaderNodeCustom" id="586"]
output_port_for_preview = 0
default_input_values = [0, Vector3(1, 1, 0)]
initialized = true
script = ExtResource("92")

[sub_resource type="VisualShaderNodeCustom" id="587"]
output_port_for_preview = 0
default_input_values = [0, Vector3(1, 1, 1)]
initialized = true
script = ExtResource("90")

[sub_resource type="VisualShaderNodeInput" id="588"]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShader" id="589"]
code = "shader_type canvas_item;
render_mode blend_mix;



// CartesianToSpherical
vec3 _cartesianToSphericalFunc(vec3 _cartesian_vec3){
//	(x, y, z) -> (r, theta, phi)
	return vec3(length(_cartesian_vec3),
				atan(_cartesian_vec3.y / _cartesian_vec3.x),
				atan(length(_cartesian_vec3.xy)/ _cartesian_vec3.z));
}

void fragment() {
// Input:6
	vec2 n_out6p0 = UV;


	vec3 n_out3p0;
// CartesianToSpherical:3
	{
		n_out3p0 = _cartesianToSphericalFunc(vec3(n_out6p0, 0.0));
	}


// Output:0
	COLOR.rgb = n_out3p0;


}
"
graph_offset = Vector2(-263.26, -53.8514)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(600, 20)
nodes/fragment/2/node = SubResource("584")
nodes/fragment/2/position = Vector2(-120, -160)
nodes/fragment/3/node = SubResource("585")
nodes/fragment/3/position = Vector2(-60, 120)
nodes/fragment/4/node = SubResource("586")
nodes/fragment/4/position = Vector2(200, -160)
nodes/fragment/5/node = SubResource("587")
nodes/fragment/5/position = Vector2(240, 260)
nodes/fragment/6/node = SubResource("588")
nodes/fragment/6/position = Vector2(-480, -20)
nodes/fragment/connections = PackedInt32Array(3, 0, 5, 0, 3, 0, 0, 0, 6, 0, 3, 0, 6, 0, 2, 0, 2, 0, 4, 0)

[sub_resource type="ShaderMaterial" id="590"]
shader = SubResource("589")

[sub_resource type="VisualShaderNodeCustom" id="591"]
default_input_values = [1, Vector3(8, 8, 0), 2, Vector3(0.2, 0.2, 0), 3, Vector3(0.01, 0.01, 0), 4, Vector3(1, 1, 1), 5, 1.0, 6, Vector3(0, 0, 0), 7, 0.0]
initialized = true
script = ExtResource("93")

[sub_resource type="VisualShaderNodeColorConstant" id="592"]
constant = Color(1, 0, 0, 1)

[sub_resource type="VisualShaderNodeColorConstant" id="593"]
constant = Color(1, 1, 0, 0)

[sub_resource type="VisualShaderNodeVec3Constant" id="594"]
constant = Vector3(0.05, 0.05, 0)

[sub_resource type="VisualShaderNodeInput" id="595"]
input_name = "uv"

[sub_resource type="VisualShaderNodeVec3Constant" id="596"]
constant = Vector3(0.2, 0.2, 0)

[sub_resource type="VisualShaderNodeVec3Constant" id="597"]
constant = Vector3(8, 8, 0)

[sub_resource type="VisualShader" id="598"]
code = "shader_type canvas_item;
render_mode blend_mix;



// GridShape
vec4 _gridFunc(vec2 _grid_uv, vec2 _gridline_thickness, vec2 _gridline_smooth, vec2 _gridcell_count, vec4 _grid_col, vec4 _grid_bg_col){
	vec2 _grid_vec = fract(_grid_uv * _gridcell_count);
	_grid_vec = min(_grid_vec, vec2(1.0) - _grid_vec);
	_grid_vec = smoothstep(_grid_vec - _gridline_smooth, _grid_vec + _gridline_smooth, _gridline_thickness / vec2(2.0));
//	return mix(_grid_bg_col, _grid_col, clamp(_grid_vec.x + _grid_vec.y, 0.0, 1.0));
	return mix(_grid_bg_col, _grid_col, (_grid_vec.x + _grid_vec.y));
}

void fragment() {
// Input:6
	vec2 n_out6p0 = UV;


// Vector3Constant:8
	vec3 n_out8p0 = vec3(8.000000, 8.000000, 0.000000);


// Vector3Constant:7
	vec3 n_out7p0 = vec3(0.200000, 0.200000, 0.000000);


// Vector3Constant:5
	vec3 n_out5p0 = vec3(0.050000, 0.050000, 0.000000);


// ColorConstant:3
	vec4 n_out3p0 = vec4(1.000000, 0.000000, 0.000000, 1.000000);


// ColorConstant:4
	vec4 n_out4p0 = vec4(1.000000, 1.000000, 0.000000, 0.000000);


	vec3 n_out2p0;
	float n_out2p1;
// GridShape:2
	float n_in2p5 = 1.00000;
	float n_in2p7 = 0.00000;
	{
		vec4 n_out2p0n_out2p1 = _gridFunc(vec3(n_out6p0, 0.0).xy, n_out7p0.xy, n_out5p0.xy, n_out8p0.xy, vec4(vec3(n_out3p0.xyz), n_in2p5), vec4(vec3(n_out4p0.xyz), n_in2p7));
		n_out2p0 = n_out2p0n_out2p1.rgb;
		n_out2p1 = n_out2p0n_out2p1.a;
	}


// Output:0
	COLOR.rgb = n_out2p0;
	COLOR.a = n_out2p1;


}
"
graph_offset = Vector2(-178.57, 110.562)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(400, 200)
nodes/fragment/2/node = SubResource("591")
nodes/fragment/2/position = Vector2(100, 200)
nodes/fragment/3/node = SubResource("592")
nodes/fragment/3/position = Vector2(-160, 400)
nodes/fragment/4/node = SubResource("593")
nodes/fragment/4/position = Vector2(-160, 480)
nodes/fragment/5/node = SubResource("594")
nodes/fragment/5/position = Vector2(-320, 300)
nodes/fragment/6/node = SubResource("595")
nodes/fragment/6/position = Vector2(-320, 60)
nodes/fragment/7/node = SubResource("596")
nodes/fragment/7/position = Vector2(-320, 220)
nodes/fragment/8/node = SubResource("597")
nodes/fragment/8/position = Vector2(-320, 140)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 4, 4, 0, 2, 6, 5, 0, 2, 3, 6, 0, 2, 0, 7, 0, 2, 2, 8, 0, 2, 1, 2, 1, 0, 1, 2, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="599"]
shader = SubResource("598")

[sub_resource type="VisualShaderNodeCustom" id="600"]
default_input_values = [2, -1.0, 3, 0.001, 4, false, 5, false]
initialized = true
script = ExtResource("94")

[sub_resource type="VisualShaderNodeInput" id="601"]
input_name = "texture"

[sub_resource type="VisualShaderNodeInput" id="602"]
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatConstant" id="603"]
constant = -1.0

[sub_resource type="VisualShaderNodeFloatConstant" id="604"]
constant = 0.005

[sub_resource type="VisualShaderNodeBooleanConstant" id="605"]

[sub_resource type="VisualShaderNodeBooleanConstant" id="606"]

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_vb5u8"]

[sub_resource type="VisualShader" id="607"]
code = "shader_type canvas_item;
render_mode blend_mix;



// SobelEdge
float _sobelEdgeFunc(sampler2D _tex_sobel, vec2 _uv_sobel, float _lod_sobel, float _ofst_sobel, bool _preconv_grayscale_sobel, bool _use_scharr){
	vec3 s00 = vec3(0.0);
	vec3 s01 = vec3(0.0);
	vec3 s02 = vec3(0.0);
	vec3 s10 = vec3(0.0);
	vec3 s12 = vec3(0.0);
	vec3 s20 = vec3(0.0);
	vec3 s21 = vec3(0.0);
	vec3 s22 = vec3(0.0);
	if (_lod_sobel < 0.0){
		s00 = texture(_tex_sobel, _uv_sobel + _ofst_sobel * vec2(-1.0, -1.0)).rgb;
		s01 = texture(_tex_sobel, _uv_sobel + _ofst_sobel * vec2( 0.0, -1.0)).rgb;
		s02 = texture(_tex_sobel, _uv_sobel + _ofst_sobel * vec2( 1.0, -1.0)).rgb;
		s10 = texture(_tex_sobel, _uv_sobel + _ofst_sobel * vec2(-1.0,  0.0)).rgb;
		s12 = texture(_tex_sobel, _uv_sobel + _ofst_sobel * vec2( 1.0,  0.0)).rgb;
		s20 = texture(_tex_sobel, _uv_sobel + _ofst_sobel * vec2(-1.0,  1.0)).rgb;
		s21 = texture(_tex_sobel, _uv_sobel + _ofst_sobel * vec2( 0.0,  1.0)).rgb;
		s22 = texture(_tex_sobel, _uv_sobel + _ofst_sobel * vec2( 1.0,  1.0)).rgb;
	}else{
		s00 = textureLod(_tex_sobel, _uv_sobel + _ofst_sobel * vec2(-1.0, -1.0), _lod_sobel).rgb;
		s01 = textureLod(_tex_sobel, _uv_sobel + _ofst_sobel * vec2( 0.0, -1.0), _lod_sobel).rgb;
		s02 = textureLod(_tex_sobel, _uv_sobel + _ofst_sobel * vec2( 1.0, -1.0), _lod_sobel).rgb;
		s10 = textureLod(_tex_sobel, _uv_sobel + _ofst_sobel * vec2(-1.0,  0.0), _lod_sobel).rgb;
		s12 = textureLod(_tex_sobel, _uv_sobel + _ofst_sobel * vec2( 1.0,  0.0), _lod_sobel).rgb;
		s20 = textureLod(_tex_sobel, _uv_sobel + _ofst_sobel * vec2(-1.0,  1.0), _lod_sobel).rgb;
		s21 = textureLod(_tex_sobel, _uv_sobel + _ofst_sobel * vec2( 0.0,  1.0), _lod_sobel).rgb;
		s22 = textureLod(_tex_sobel, _uv_sobel + _ofst_sobel * vec2( 1.0,  1.0), _lod_sobel).rgb;
	}
	if (_preconv_grayscale_sobel){
		s00.x = 0.2126 * s00.r + 0.7152 * s00.g + 0.0722 * s00.b;
		s01.x = 0.2126 * s01.r + 0.7152 * s01.g + 0.0722 * s01.b;
		s02.x = 0.2126 * s02.r + 0.7152 * s02.g + 0.0722 * s02.b;
		s10.x = 0.2126 * s10.r + 0.7152 * s10.g + 0.0722 * s10.b;
		s12.x = 0.2126 * s12.r + 0.7152 * s12.g + 0.0722 * s12.b;
		s20.x = 0.2126 * s20.r + 0.7152 * s20.g + 0.0722 * s20.b;
		s21.x = 0.2126 * s21.r + 0.7152 * s21.g + 0.0722 * s21.b;
		s22.x = 0.2126 * s22.r + 0.7152 * s22.g + 0.0722 * s22.b;
	}
	float edgeSqr = 0.0;
	if (!_use_scharr) {
		float sobelX = s00.x + 2.0 * s10.x + s20.x - s02.x - 2.0 * s12.x - s22.x;
		float sobelY = s00.x + 2.0 * s01.x + s02.x - s20.x - 2.0 * s21.x - s22.x;
		edgeSqr = (sobelX * sobelX + sobelY * sobelY);
	}else{
		float scharrX = 3.0 * s00.x + 10.0 * s10.x + 3.0 * s20.x - 3.0 * s02.x - 10.0 * s12.x - 3.0 * s22.x;
		float scharrY = 3.0 * s00.x + 10.0 * s01.x + 3.0 * s02.x - 3.0 * s20.x - 10.0 * s21.x - 3.0 * s22.x;
		edgeSqr = (scharrX * scharrX + scharrY * scharrY);
	}
	return edgeSqr;
}

void fragment() {
// ColorConstant:9
	vec4 n_out9p0 = vec4(1.000000, 1.000000, 1.000000, 1.000000);


// Input:4
	vec2 n_out4p0 = UV;


// FloatConstant:5
	float n_out5p0 = -1.000000;


// FloatConstant:6
	float n_out6p0 = 0.005000;


// BooleanConstant:7
	bool n_out7p0 = false;


// BooleanConstant:8
	bool n_out8p0 = false;


	float n_out2p0;
// SobelEdge:2
	{
		n_out2p0 = _sobelEdgeFunc(TEXTURE, vec3(n_out4p0, 0.0).xy, n_out5p0, n_out6p0, n_out7p0, n_out8p0);
	}


// Output:0
	COLOR.rgb = vec3(n_out9p0.xyz);
	COLOR.a = n_out2p0;


}
"
graph_offset = Vector2(-31, 32)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(400, 200)
nodes/fragment/2/node = SubResource("600")
nodes/fragment/2/position = Vector2(100, 200)
nodes/fragment/3/node = SubResource("601")
nodes/fragment/3/position = Vector2(-220, 40)
nodes/fragment/4/node = SubResource("602")
nodes/fragment/4/position = Vector2(-260, 120)
nodes/fragment/5/node = SubResource("603")
nodes/fragment/5/position = Vector2(-120, 200)
nodes/fragment/6/node = SubResource("604")
nodes/fragment/6/position = Vector2(-120, 260)
nodes/fragment/7/node = SubResource("605")
nodes/fragment/7/position = Vector2(-100, 320)
nodes/fragment/8/node = SubResource("606")
nodes/fragment/8/position = Vector2(-100, 380)
nodes/fragment/9/node = SubResource("VisualShaderNodeColorConstant_vb5u8")
nodes/fragment/9/position = Vector2(220, 100)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 0, 4, 0, 2, 1, 5, 0, 2, 2, 6, 0, 2, 3, 7, 0, 2, 4, 8, 0, 2, 5, 2, 0, 0, 1, 9, 0, 0, 0)

[sub_resource type="ShaderMaterial" id="608"]
shader = SubResource("607")

[node name="root" type="Control"]
texture_filter = 1
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="container" type="GridContainer" parent="."]
texture_filter = 1
layout_mode = 0
offset_right = 1450.0
offset_bottom = 1080.0
columns = 11

[node name="distortionUV" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/distortionUV"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Distortion UV"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/distortionUV"]
texture_filter = 1
material = SubResource("8")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="FlipUV" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/FlipUV"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Flip UV"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/FlipUV"]
texture_filter = 1
material = SubResource("15")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="lensDistortion" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/lensDistortion"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Lens Distortion"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/lensDistortion"]
texture_filter = 1
material = SubResource("19")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="pixelate" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/pixelate"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Pixelate UV"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/pixelate"]
texture_filter = 1
material = SubResource("24")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="rotate" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/rotate"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Rotate UV"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/rotate"]
texture_filter = 1
material = SubResource("29")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="scaleUV" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/scaleUV"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Scale UV"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/scaleUV"]
texture_filter = 1
material = SubResource("34")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="sphericalUV" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/sphericalUV"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Spherical UV"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/sphericalUV"]
texture_filter = 1
material = SubResource("41")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="tileUV" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/tileUV"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Tile UV"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/tileUV"]
texture_filter = 1
material = SubResource("47")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="tilingNoffset" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/tilingNoffset"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Tiling & Offset UV"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/tilingNoffset"]
texture_filter = 1
material = SubResource("51")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="transformUV" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/transformUV"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Transform3D UV"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/transformUV"]
texture_filter = 1
material = SubResource("59")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="twirl" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/twirl"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Twirl UV"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/twirl"]
texture_filter = 1
material = SubResource("64")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="distortionUVAnimated" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/distortionUVAnimated"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Distortion UV
Animated"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/distortionUVAnimated"]
texture_filter = 1
material = SubResource("73")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="doodleUV" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/doodleUV"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Doodle UV"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/doodleUV"]
texture_filter = 1
material = SubResource("81")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="rotateAnimated" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/rotateAnimated"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Rotate UV
Animated"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/rotateAnimated"]
texture_filter = 1
material = SubResource("86")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="swirlUV" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/swirlUV"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Swirl UV"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/swirlUV"]
texture_filter = 1
material = SubResource("93")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="tilingNoffsetAnimated" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/tilingNoffsetAnimated"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Tiling & Offset UV
Animated"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/tilingNoffsetAnimated"]
texture_filter = 1
texture_repeat = 2
material = SubResource("98")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="hash1d" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/hash1d"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Hash 1D
Random"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/hash1d"]
texture_filter = 1
material = SubResource("101")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="hash2d" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/hash2d"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Hash 2D
Random"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/hash2d"]
texture_filter = 1
material = SubResource("104")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="hash2dvector" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/hash2dvector"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Hash Random 
Vector 2D"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/hash2dvector"]
texture_filter = 1
material = SubResource("107")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="randomFloat" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/randomFloat"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Random Float"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/randomFloat"]
texture_filter = 1
material = SubResource("110")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="randomGoldNoiseFloat" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/randomGoldNoiseFloat"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Random Float
(Gold Noise)"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/randomGoldNoiseFloat"]
texture_filter = 1
material = SubResource("119")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="remap" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/remap"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Remap Vector"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/remap"]
texture_filter = 1
material = SubResource("127")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="sinTime" type="VBoxContainer" parent="container"]
texture_filter = 1
material = SubResource("ShaderMaterial_bvkyk")
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/sinTime"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "SinTIME"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/sinTime"]
texture_filter = 1
material = SubResource("132")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="vec2Compose" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/vec2Compose"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Vector2 Compose"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/vec2Compose"]
texture_filter = 1
material = SubResource("137")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="blur9sample" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/blur9sample"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Basic Blur"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/blur9sample"]
texture_filter = 1
material = SubResource("144")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="blurCustom" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/blurCustom"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Blur Custom"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/blurCustom"]
texture_filter = 1
material = SubResource("150")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="zoomBlur" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/zoomBlur"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Zoom Blur"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/zoomBlur"]
texture_filter = 1
material = SubResource("158")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="glowEmpty" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/glowEmpty"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Glow Empty"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/glowEmpty"]
texture_filter = 1
material = SubResource("166")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="innerGlow" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/innerGlow"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Inner Glow"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/innerGlow"]
texture_filter = 1
material = SubResource("172")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="innerGlowEmpty" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/innerGlowEmpty"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Inner Glow
Empty"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/innerGlowEmpty"]
texture_filter = 1
material = SubResource("181")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="outerGlow" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/outerGlow"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Outer Glow"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/outerGlow"]
texture_filter = 1
material = SubResource("188")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="outerGlowEmpty" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/outerGlowEmpty"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Outer Glow
Empty"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/outerGlowEmpty"]
texture_filter = 1
material = SubResource("195")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="checkerboardPattern" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/checkerboardPattern"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Chekerboard
Shape3D"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/checkerboardPattern"]
texture_filter = 1
material = SubResource("200")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="generateCircle" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/generateCircle"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Circle Shape3D"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/generateCircle"]
texture_filter = 1
material = SubResource("218")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="generateCircle2" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/generateCircle2"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Circle Shape3D 2"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/generateCircle2"]
texture_filter = 1
material = SubResource("209")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="regulatNgon" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/regulatNgon"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Regular Ngon
Shape3D"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/regulatNgon"]
texture_filter = 1
material = SubResource("233")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="generateSpiral" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/generateSpiral"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Spiral Shape3D"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/generateSpiral"]
texture_filter = 1
material = SubResource("243")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="scanLinesSharp" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/scanLinesSharp"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Scanlines
Sharp Shape3D"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/scanLinesSharp"]
texture_filter = 1
material = SubResource("252")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="stripesRandom" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/stripesRandom"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Random
Stripes Shape3D"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/stripesRandom"]
texture_filter = 1
material = SubResource("258")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="generic2d" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/generic2d"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Generic 2D
Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/generic2d"]
texture_filter = 1
material = SubResource("263")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="perlin2d" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/perlin2d"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Perlin 2D
Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/perlin2d"]
texture_filter = 1
material = SubResource("269")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="perlin3d" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/perlin3d"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Perlin 3D
Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/perlin3d"]
texture_filter = 1
material = SubResource("275")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="perlinPeriodic3d" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/perlinPeriodic3d"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Perlin 3D
Periodic Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/perlinPeriodic3d"]
texture_filter = 1
material = SubResource("281")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="perlin4d" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/perlin4d"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Perlin 4D
Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/perlin4d"]
texture_filter = 1
material = SubResource("287")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="simplex2d" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/simplex2d"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Simplex 2D
Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/simplex2d"]
texture_filter = 1
material = SubResource("293")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="simplex3d" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/simplex3d"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Simplex 3D
Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/simplex3d"]
texture_filter = 1
material = SubResource("299")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
stretch_mode = 5

[node name="simplex4d" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/simplex4d"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Simplex 4D
Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/simplex4d"]
texture_filter = 1
material = SubResource("305")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="worley2d" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/worley2d"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Worley 2D
Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/worley2d"]
texture_filter = 1
material = SubResource("311")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="worley2x2" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/worley2x2"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Worley 2x2
Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/worley2x2"]
texture_filter = 1
material = SubResource("317")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="worley2x2x2" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/worley2x2x2"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Worley 2x2x2
Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/worley2x2x2"]
texture_filter = 1
material = SubResource("324")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="worley3d" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/worley3d"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Worley 3D
Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/worley3d"]
texture_filter = 1
material = SubResource("330")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="BCSAdjustment" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/BCSAdjustment"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "BCS Adjustment"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/BCSAdjustment"]
texture_filter = 1
material = SubResource("337")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="blackAndWhite" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/blackAndWhite"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Black & White"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/blackAndWhite"]
texture_filter = 1
material = SubResource("341")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="blendAwithB" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/blendAwithB"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Blend A with B"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/blendAwithB"]
texture_filter = 1
material = SubResource("346")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="bloom" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/bloom"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Bloom"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/bloom"]
texture_filter = 1
material = SubResource("350")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="chromaticAberration" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/chromaticAberration"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Chromatic
Aberration"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/chromaticAberration"]
texture_filter = 1
material = SubResource("358")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="clamp" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/clamp"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Clamp Alpha
Border"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/clamp"]
texture_filter = 1
material = SubResource("367")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="colorCorrectionAdjustment" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/colorCorrectionAdjustment"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Color Correction
Adjustment"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/colorCorrectionAdjustment"]
texture_filter = 1
material = SubResource("372")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
stretch_mode = 6

[node name="emboss" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/emboss"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Emboss"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/emboss"]
texture_filter = 1
material = SubResource("379")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="fireFX" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/fireFX"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "FireFX"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/fireFX"]
texture_filter = 1
material = SubResource("393")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="gradient4corners" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/gradient4corners"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Gradient
4-Corners"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/gradient4corners"]
texture_filter = 1
material = SubResource("400")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="gradientMapping" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/gradientMapping"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Gradient Mapping
(+ColorCycling Support)"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/gradientMapping"]
texture_filter = 1
material = SubResource("410")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="grayscale" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/grayscale"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Grayscale+"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/grayscale"]
texture_filter = 1
material = SubResource("415")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="hue" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/hue"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Hue"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/hue"]
texture_filter = 1
material = SubResource("418")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="inverseColor" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/inverseColor"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Inverse Color"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/inverseColor"]
texture_filter = 1
material = SubResource("422")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="maskAlpha" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/maskAlpha"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Mask Alpha"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/maskAlpha"]
texture_filter = 1
material = SubResource("426")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="posterize" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/posterize"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Posterize"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/posterize"]
texture_filter = 1
material = SubResource("430")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="shiftHSV" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/shiftHSV"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Shift HSV"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/shiftHSV"]
texture_filter = 1
material = SubResource("436")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="shineFX" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/shineFX"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Shine FX"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/shineFX"]
texture_filter = 1
material = SubResource("447")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="tintRGBA" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/tintRGBA"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Tint RGBA"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/tintRGBA"]
texture_filter = 1
material = SubResource("451")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="tonemap" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/tonemap"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Tonemap"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/tonemap"]
texture_filter = 1
material = SubResource("456")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="turnCGA4Palette" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/turnCGA4Palette"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "CGA4 Pallete"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/turnCGA4Palette"]
texture_filter = 1
material = SubResource("460")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="turnGBPalette" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/turnGBPalette"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "GameBoy
Pallete"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/turnGBPalette"]
texture_filter = 1
material = SubResource("464")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="generic2d_fractal" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/generic2d_fractal"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Fractal
Generic2D Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/generic2d_fractal"]
texture_filter = 1
material = SubResource("475")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="perlin2d_fractal" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/perlin2d_fractal"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Fractal
Perlin2D Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/perlin2d_fractal"]
texture_filter = 1
material = SubResource("485")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="worley2d_fractal" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/worley2d_fractal"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Fractal
Worley2D Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/worley2d_fractal"]
texture_filter = 1
material = SubResource("498")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="simplex2d_fractal" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/simplex2d_fractal"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Fractal
Simplex2D Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/simplex2d_fractal"]
texture_filter = 1
material = SubResource("509")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="worley3d_fractal" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/worley3d_fractal"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Fractal
Worley3D Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/worley3d_fractal"]
texture_filter = 1
material = SubResource("523")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="perlin3d_fractal" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/perlin3d_fractal"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Fractal
Perlin3D Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/perlin3d_fractal"]
texture_filter = 1
material = SubResource("535")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="simplex3d_fractal" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/simplex3d_fractal"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Fractal
Simplex3D Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/simplex3d_fractal"]
texture_filter = 1
material = SubResource("547")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="perlin4d_fractal" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/perlin4d_fractal"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Fractal
Perlin4D Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/perlin4d_fractal"]
texture_filter = 1
material = SubResource("560")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="simplex4d_fractal" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/simplex4d_fractal"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Fractal
Simplex4D Noise"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/simplex4d_fractal"]
texture_filter = 1
material = SubResource("573")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 4
stretch_mode = 6

[node name="normalFromHeightmap" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/normalFromHeightmap"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Normal From
Heightmap"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/normalFromHeightmap"]
texture_filter = 1
material = SubResource("583")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="coordsTransformation" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/coordsTransformation"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Cartesian Coords To
Polar/Spherical
and back to Cartesian"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/coordsTransformation"]
texture_filter = 1
material = SubResource("590")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="gridShape" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/gridShape"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Grid Shape3D"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/gridShape"]
texture_filter = 1
material = SubResource("599")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6

[node name="sobelEdge" type="VBoxContainer" parent="container"]
texture_filter = 1
custom_minimum_size = Vector2(120, 95)
layout_mode = 2
alignment = 1

[node name="title" type="Label" parent="container/sobelEdge"]
texture_filter = 1
custom_minimum_size = Vector2(70, 0)
layout_mode = 2
text = "Sobel Edge"
horizontal_alignment = 1

[node name="preview" type="TextureRect" parent="container/sobelEdge"]
texture_filter = 1
material = SubResource("608")
custom_minimum_size = Vector2(60, 60)
layout_mode = 2
size_flags_horizontal = 4
texture = ExtResource("1")
expand_mode = 1
stretch_mode = 6
